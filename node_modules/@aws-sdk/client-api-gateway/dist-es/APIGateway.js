import { __extends } from "tslib";
import { APIGatewayClient } from "./APIGatewayClient";
import { CreateApiKeyCommand, } from "./commands/CreateApiKeyCommand";
import { CreateAuthorizerCommand, } from "./commands/CreateAuthorizerCommand";
import { CreateBasePathMappingCommand, } from "./commands/CreateBasePathMappingCommand";
import { CreateDeploymentCommand, } from "./commands/CreateDeploymentCommand";
import { CreateDocumentationPartCommand, } from "./commands/CreateDocumentationPartCommand";
import { CreateDocumentationVersionCommand, } from "./commands/CreateDocumentationVersionCommand";
import { CreateDomainNameCommand, } from "./commands/CreateDomainNameCommand";
import { CreateModelCommand } from "./commands/CreateModelCommand";
import { CreateRequestValidatorCommand, } from "./commands/CreateRequestValidatorCommand";
import { CreateResourceCommand, } from "./commands/CreateResourceCommand";
import { CreateRestApiCommand, } from "./commands/CreateRestApiCommand";
import { CreateStageCommand } from "./commands/CreateStageCommand";
import { CreateUsagePlanCommand, } from "./commands/CreateUsagePlanCommand";
import { CreateUsagePlanKeyCommand, } from "./commands/CreateUsagePlanKeyCommand";
import { CreateVpcLinkCommand, } from "./commands/CreateVpcLinkCommand";
import { DeleteApiKeyCommand, } from "./commands/DeleteApiKeyCommand";
import { DeleteAuthorizerCommand, } from "./commands/DeleteAuthorizerCommand";
import { DeleteBasePathMappingCommand, } from "./commands/DeleteBasePathMappingCommand";
import { DeleteClientCertificateCommand, } from "./commands/DeleteClientCertificateCommand";
import { DeleteDeploymentCommand, } from "./commands/DeleteDeploymentCommand";
import { DeleteDocumentationPartCommand, } from "./commands/DeleteDocumentationPartCommand";
import { DeleteDocumentationVersionCommand, } from "./commands/DeleteDocumentationVersionCommand";
import { DeleteDomainNameCommand, } from "./commands/DeleteDomainNameCommand";
import { DeleteGatewayResponseCommand, } from "./commands/DeleteGatewayResponseCommand";
import { DeleteIntegrationCommand, } from "./commands/DeleteIntegrationCommand";
import { DeleteIntegrationResponseCommand, } from "./commands/DeleteIntegrationResponseCommand";
import { DeleteMethodCommand, } from "./commands/DeleteMethodCommand";
import { DeleteMethodResponseCommand, } from "./commands/DeleteMethodResponseCommand";
import { DeleteModelCommand } from "./commands/DeleteModelCommand";
import { DeleteRequestValidatorCommand, } from "./commands/DeleteRequestValidatorCommand";
import { DeleteResourceCommand, } from "./commands/DeleteResourceCommand";
import { DeleteRestApiCommand, } from "./commands/DeleteRestApiCommand";
import { DeleteStageCommand } from "./commands/DeleteStageCommand";
import { DeleteUsagePlanCommand, } from "./commands/DeleteUsagePlanCommand";
import { DeleteUsagePlanKeyCommand, } from "./commands/DeleteUsagePlanKeyCommand";
import { DeleteVpcLinkCommand, } from "./commands/DeleteVpcLinkCommand";
import { FlushStageAuthorizersCacheCommand, } from "./commands/FlushStageAuthorizersCacheCommand";
import { FlushStageCacheCommand, } from "./commands/FlushStageCacheCommand";
import { GenerateClientCertificateCommand, } from "./commands/GenerateClientCertificateCommand";
import { GetAccountCommand } from "./commands/GetAccountCommand";
import { GetApiKeyCommand } from "./commands/GetApiKeyCommand";
import { GetApiKeysCommand } from "./commands/GetApiKeysCommand";
import { GetAuthorizerCommand, } from "./commands/GetAuthorizerCommand";
import { GetAuthorizersCommand, } from "./commands/GetAuthorizersCommand";
import { GetBasePathMappingCommand, } from "./commands/GetBasePathMappingCommand";
import { GetBasePathMappingsCommand, } from "./commands/GetBasePathMappingsCommand";
import { GetClientCertificateCommand, } from "./commands/GetClientCertificateCommand";
import { GetClientCertificatesCommand, } from "./commands/GetClientCertificatesCommand";
import { GetDeploymentCommand, } from "./commands/GetDeploymentCommand";
import { GetDeploymentsCommand, } from "./commands/GetDeploymentsCommand";
import { GetDocumentationPartCommand, } from "./commands/GetDocumentationPartCommand";
import { GetDocumentationPartsCommand, } from "./commands/GetDocumentationPartsCommand";
import { GetDocumentationVersionCommand, } from "./commands/GetDocumentationVersionCommand";
import { GetDocumentationVersionsCommand, } from "./commands/GetDocumentationVersionsCommand";
import { GetDomainNameCommand, } from "./commands/GetDomainNameCommand";
import { GetDomainNamesCommand, } from "./commands/GetDomainNamesCommand";
import { GetExportCommand } from "./commands/GetExportCommand";
import { GetGatewayResponseCommand, } from "./commands/GetGatewayResponseCommand";
import { GetGatewayResponsesCommand, } from "./commands/GetGatewayResponsesCommand";
import { GetIntegrationCommand, } from "./commands/GetIntegrationCommand";
import { GetIntegrationResponseCommand, } from "./commands/GetIntegrationResponseCommand";
import { GetMethodCommand } from "./commands/GetMethodCommand";
import { GetMethodResponseCommand, } from "./commands/GetMethodResponseCommand";
import { GetModelCommand } from "./commands/GetModelCommand";
import { GetModelsCommand } from "./commands/GetModelsCommand";
import { GetModelTemplateCommand, } from "./commands/GetModelTemplateCommand";
import { GetRequestValidatorCommand, } from "./commands/GetRequestValidatorCommand";
import { GetRequestValidatorsCommand, } from "./commands/GetRequestValidatorsCommand";
import { GetResourceCommand } from "./commands/GetResourceCommand";
import { GetResourcesCommand, } from "./commands/GetResourcesCommand";
import { GetRestApiCommand } from "./commands/GetRestApiCommand";
import { GetRestApisCommand } from "./commands/GetRestApisCommand";
import { GetSdkCommand } from "./commands/GetSdkCommand";
import { GetSdkTypeCommand } from "./commands/GetSdkTypeCommand";
import { GetSdkTypesCommand } from "./commands/GetSdkTypesCommand";
import { GetStageCommand } from "./commands/GetStageCommand";
import { GetStagesCommand } from "./commands/GetStagesCommand";
import { GetTagsCommand } from "./commands/GetTagsCommand";
import { GetUsageCommand } from "./commands/GetUsageCommand";
import { GetUsagePlanCommand, } from "./commands/GetUsagePlanCommand";
import { GetUsagePlanKeyCommand, } from "./commands/GetUsagePlanKeyCommand";
import { GetUsagePlanKeysCommand, } from "./commands/GetUsagePlanKeysCommand";
import { GetUsagePlansCommand, } from "./commands/GetUsagePlansCommand";
import { GetVpcLinkCommand } from "./commands/GetVpcLinkCommand";
import { GetVpcLinksCommand } from "./commands/GetVpcLinksCommand";
import { ImportApiKeysCommand, } from "./commands/ImportApiKeysCommand";
import { ImportDocumentationPartsCommand, } from "./commands/ImportDocumentationPartsCommand";
import { ImportRestApiCommand, } from "./commands/ImportRestApiCommand";
import { PutGatewayResponseCommand, } from "./commands/PutGatewayResponseCommand";
import { PutIntegrationCommand, } from "./commands/PutIntegrationCommand";
import { PutIntegrationResponseCommand, } from "./commands/PutIntegrationResponseCommand";
import { PutMethodCommand } from "./commands/PutMethodCommand";
import { PutMethodResponseCommand, } from "./commands/PutMethodResponseCommand";
import { PutRestApiCommand } from "./commands/PutRestApiCommand";
import { TagResourceCommand } from "./commands/TagResourceCommand";
import { TestInvokeAuthorizerCommand, } from "./commands/TestInvokeAuthorizerCommand";
import { TestInvokeMethodCommand, } from "./commands/TestInvokeMethodCommand";
import { UntagResourceCommand, } from "./commands/UntagResourceCommand";
import { UpdateAccountCommand, } from "./commands/UpdateAccountCommand";
import { UpdateApiKeyCommand, } from "./commands/UpdateApiKeyCommand";
import { UpdateAuthorizerCommand, } from "./commands/UpdateAuthorizerCommand";
import { UpdateBasePathMappingCommand, } from "./commands/UpdateBasePathMappingCommand";
import { UpdateClientCertificateCommand, } from "./commands/UpdateClientCertificateCommand";
import { UpdateDeploymentCommand, } from "./commands/UpdateDeploymentCommand";
import { UpdateDocumentationPartCommand, } from "./commands/UpdateDocumentationPartCommand";
import { UpdateDocumentationVersionCommand, } from "./commands/UpdateDocumentationVersionCommand";
import { UpdateDomainNameCommand, } from "./commands/UpdateDomainNameCommand";
import { UpdateGatewayResponseCommand, } from "./commands/UpdateGatewayResponseCommand";
import { UpdateIntegrationCommand, } from "./commands/UpdateIntegrationCommand";
import { UpdateIntegrationResponseCommand, } from "./commands/UpdateIntegrationResponseCommand";
import { UpdateMethodCommand, } from "./commands/UpdateMethodCommand";
import { UpdateMethodResponseCommand, } from "./commands/UpdateMethodResponseCommand";
import { UpdateModelCommand } from "./commands/UpdateModelCommand";
import { UpdateRequestValidatorCommand, } from "./commands/UpdateRequestValidatorCommand";
import { UpdateResourceCommand, } from "./commands/UpdateResourceCommand";
import { UpdateRestApiCommand, } from "./commands/UpdateRestApiCommand";
import { UpdateStageCommand } from "./commands/UpdateStageCommand";
import { UpdateUsageCommand } from "./commands/UpdateUsageCommand";
import { UpdateUsagePlanCommand, } from "./commands/UpdateUsagePlanCommand";
import { UpdateVpcLinkCommand, } from "./commands/UpdateVpcLinkCommand";
var APIGateway = (function (_super) {
    __extends(APIGateway, _super);
    function APIGateway() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    APIGateway.prototype.createApiKey = function (args, optionsOrCb, cb) {
        var command = new CreateApiKeyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.createAuthorizer = function (args, optionsOrCb, cb) {
        var command = new CreateAuthorizerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.createBasePathMapping = function (args, optionsOrCb, cb) {
        var command = new CreateBasePathMappingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.createDeployment = function (args, optionsOrCb, cb) {
        var command = new CreateDeploymentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.createDocumentationPart = function (args, optionsOrCb, cb) {
        var command = new CreateDocumentationPartCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.createDocumentationVersion = function (args, optionsOrCb, cb) {
        var command = new CreateDocumentationVersionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.createDomainName = function (args, optionsOrCb, cb) {
        var command = new CreateDomainNameCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.createModel = function (args, optionsOrCb, cb) {
        var command = new CreateModelCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.createRequestValidator = function (args, optionsOrCb, cb) {
        var command = new CreateRequestValidatorCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.createResource = function (args, optionsOrCb, cb) {
        var command = new CreateResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.createRestApi = function (args, optionsOrCb, cb) {
        var command = new CreateRestApiCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.createStage = function (args, optionsOrCb, cb) {
        var command = new CreateStageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.createUsagePlan = function (args, optionsOrCb, cb) {
        var command = new CreateUsagePlanCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.createUsagePlanKey = function (args, optionsOrCb, cb) {
        var command = new CreateUsagePlanKeyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.createVpcLink = function (args, optionsOrCb, cb) {
        var command = new CreateVpcLinkCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteApiKey = function (args, optionsOrCb, cb) {
        var command = new DeleteApiKeyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteAuthorizer = function (args, optionsOrCb, cb) {
        var command = new DeleteAuthorizerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteBasePathMapping = function (args, optionsOrCb, cb) {
        var command = new DeleteBasePathMappingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteClientCertificate = function (args, optionsOrCb, cb) {
        var command = new DeleteClientCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteDeployment = function (args, optionsOrCb, cb) {
        var command = new DeleteDeploymentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteDocumentationPart = function (args, optionsOrCb, cb) {
        var command = new DeleteDocumentationPartCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteDocumentationVersion = function (args, optionsOrCb, cb) {
        var command = new DeleteDocumentationVersionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteDomainName = function (args, optionsOrCb, cb) {
        var command = new DeleteDomainNameCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteGatewayResponse = function (args, optionsOrCb, cb) {
        var command = new DeleteGatewayResponseCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteIntegration = function (args, optionsOrCb, cb) {
        var command = new DeleteIntegrationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteIntegrationResponse = function (args, optionsOrCb, cb) {
        var command = new DeleteIntegrationResponseCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteMethod = function (args, optionsOrCb, cb) {
        var command = new DeleteMethodCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteMethodResponse = function (args, optionsOrCb, cb) {
        var command = new DeleteMethodResponseCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteModel = function (args, optionsOrCb, cb) {
        var command = new DeleteModelCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteRequestValidator = function (args, optionsOrCb, cb) {
        var command = new DeleteRequestValidatorCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteResource = function (args, optionsOrCb, cb) {
        var command = new DeleteResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteRestApi = function (args, optionsOrCb, cb) {
        var command = new DeleteRestApiCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteStage = function (args, optionsOrCb, cb) {
        var command = new DeleteStageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteUsagePlan = function (args, optionsOrCb, cb) {
        var command = new DeleteUsagePlanCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteUsagePlanKey = function (args, optionsOrCb, cb) {
        var command = new DeleteUsagePlanKeyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.deleteVpcLink = function (args, optionsOrCb, cb) {
        var command = new DeleteVpcLinkCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.flushStageAuthorizersCache = function (args, optionsOrCb, cb) {
        var command = new FlushStageAuthorizersCacheCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.flushStageCache = function (args, optionsOrCb, cb) {
        var command = new FlushStageCacheCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.generateClientCertificate = function (args, optionsOrCb, cb) {
        var command = new GenerateClientCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getAccount = function (args, optionsOrCb, cb) {
        var command = new GetAccountCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getApiKey = function (args, optionsOrCb, cb) {
        var command = new GetApiKeyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getApiKeys = function (args, optionsOrCb, cb) {
        var command = new GetApiKeysCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getAuthorizer = function (args, optionsOrCb, cb) {
        var command = new GetAuthorizerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getAuthorizers = function (args, optionsOrCb, cb) {
        var command = new GetAuthorizersCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getBasePathMapping = function (args, optionsOrCb, cb) {
        var command = new GetBasePathMappingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getBasePathMappings = function (args, optionsOrCb, cb) {
        var command = new GetBasePathMappingsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getClientCertificate = function (args, optionsOrCb, cb) {
        var command = new GetClientCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getClientCertificates = function (args, optionsOrCb, cb) {
        var command = new GetClientCertificatesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getDeployment = function (args, optionsOrCb, cb) {
        var command = new GetDeploymentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getDeployments = function (args, optionsOrCb, cb) {
        var command = new GetDeploymentsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getDocumentationPart = function (args, optionsOrCb, cb) {
        var command = new GetDocumentationPartCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getDocumentationParts = function (args, optionsOrCb, cb) {
        var command = new GetDocumentationPartsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getDocumentationVersion = function (args, optionsOrCb, cb) {
        var command = new GetDocumentationVersionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getDocumentationVersions = function (args, optionsOrCb, cb) {
        var command = new GetDocumentationVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getDomainName = function (args, optionsOrCb, cb) {
        var command = new GetDomainNameCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getDomainNames = function (args, optionsOrCb, cb) {
        var command = new GetDomainNamesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getExport = function (args, optionsOrCb, cb) {
        var command = new GetExportCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getGatewayResponse = function (args, optionsOrCb, cb) {
        var command = new GetGatewayResponseCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getGatewayResponses = function (args, optionsOrCb, cb) {
        var command = new GetGatewayResponsesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getIntegration = function (args, optionsOrCb, cb) {
        var command = new GetIntegrationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getIntegrationResponse = function (args, optionsOrCb, cb) {
        var command = new GetIntegrationResponseCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getMethod = function (args, optionsOrCb, cb) {
        var command = new GetMethodCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getMethodResponse = function (args, optionsOrCb, cb) {
        var command = new GetMethodResponseCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getModel = function (args, optionsOrCb, cb) {
        var command = new GetModelCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getModels = function (args, optionsOrCb, cb) {
        var command = new GetModelsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getModelTemplate = function (args, optionsOrCb, cb) {
        var command = new GetModelTemplateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getRequestValidator = function (args, optionsOrCb, cb) {
        var command = new GetRequestValidatorCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getRequestValidators = function (args, optionsOrCb, cb) {
        var command = new GetRequestValidatorsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getResource = function (args, optionsOrCb, cb) {
        var command = new GetResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getResources = function (args, optionsOrCb, cb) {
        var command = new GetResourcesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getRestApi = function (args, optionsOrCb, cb) {
        var command = new GetRestApiCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getRestApis = function (args, optionsOrCb, cb) {
        var command = new GetRestApisCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getSdk = function (args, optionsOrCb, cb) {
        var command = new GetSdkCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getSdkType = function (args, optionsOrCb, cb) {
        var command = new GetSdkTypeCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getSdkTypes = function (args, optionsOrCb, cb) {
        var command = new GetSdkTypesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getStage = function (args, optionsOrCb, cb) {
        var command = new GetStageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getStages = function (args, optionsOrCb, cb) {
        var command = new GetStagesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getTags = function (args, optionsOrCb, cb) {
        var command = new GetTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getUsage = function (args, optionsOrCb, cb) {
        var command = new GetUsageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getUsagePlan = function (args, optionsOrCb, cb) {
        var command = new GetUsagePlanCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getUsagePlanKey = function (args, optionsOrCb, cb) {
        var command = new GetUsagePlanKeyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getUsagePlanKeys = function (args, optionsOrCb, cb) {
        var command = new GetUsagePlanKeysCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getUsagePlans = function (args, optionsOrCb, cb) {
        var command = new GetUsagePlansCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getVpcLink = function (args, optionsOrCb, cb) {
        var command = new GetVpcLinkCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.getVpcLinks = function (args, optionsOrCb, cb) {
        var command = new GetVpcLinksCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.importApiKeys = function (args, optionsOrCb, cb) {
        var command = new ImportApiKeysCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.importDocumentationParts = function (args, optionsOrCb, cb) {
        var command = new ImportDocumentationPartsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.importRestApi = function (args, optionsOrCb, cb) {
        var command = new ImportRestApiCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.putGatewayResponse = function (args, optionsOrCb, cb) {
        var command = new PutGatewayResponseCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.putIntegration = function (args, optionsOrCb, cb) {
        var command = new PutIntegrationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.putIntegrationResponse = function (args, optionsOrCb, cb) {
        var command = new PutIntegrationResponseCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.putMethod = function (args, optionsOrCb, cb) {
        var command = new PutMethodCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.putMethodResponse = function (args, optionsOrCb, cb) {
        var command = new PutMethodResponseCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.putRestApi = function (args, optionsOrCb, cb) {
        var command = new PutRestApiCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.tagResource = function (args, optionsOrCb, cb) {
        var command = new TagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.testInvokeAuthorizer = function (args, optionsOrCb, cb) {
        var command = new TestInvokeAuthorizerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.testInvokeMethod = function (args, optionsOrCb, cb) {
        var command = new TestInvokeMethodCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.untagResource = function (args, optionsOrCb, cb) {
        var command = new UntagResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateAccount = function (args, optionsOrCb, cb) {
        var command = new UpdateAccountCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateApiKey = function (args, optionsOrCb, cb) {
        var command = new UpdateApiKeyCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateAuthorizer = function (args, optionsOrCb, cb) {
        var command = new UpdateAuthorizerCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateBasePathMapping = function (args, optionsOrCb, cb) {
        var command = new UpdateBasePathMappingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateClientCertificate = function (args, optionsOrCb, cb) {
        var command = new UpdateClientCertificateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateDeployment = function (args, optionsOrCb, cb) {
        var command = new UpdateDeploymentCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateDocumentationPart = function (args, optionsOrCb, cb) {
        var command = new UpdateDocumentationPartCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateDocumentationVersion = function (args, optionsOrCb, cb) {
        var command = new UpdateDocumentationVersionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateDomainName = function (args, optionsOrCb, cb) {
        var command = new UpdateDomainNameCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateGatewayResponse = function (args, optionsOrCb, cb) {
        var command = new UpdateGatewayResponseCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateIntegration = function (args, optionsOrCb, cb) {
        var command = new UpdateIntegrationCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateIntegrationResponse = function (args, optionsOrCb, cb) {
        var command = new UpdateIntegrationResponseCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateMethod = function (args, optionsOrCb, cb) {
        var command = new UpdateMethodCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateMethodResponse = function (args, optionsOrCb, cb) {
        var command = new UpdateMethodResponseCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateModel = function (args, optionsOrCb, cb) {
        var command = new UpdateModelCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateRequestValidator = function (args, optionsOrCb, cb) {
        var command = new UpdateRequestValidatorCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateResource = function (args, optionsOrCb, cb) {
        var command = new UpdateResourceCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateRestApi = function (args, optionsOrCb, cb) {
        var command = new UpdateRestApiCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateStage = function (args, optionsOrCb, cb) {
        var command = new UpdateStageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateUsage = function (args, optionsOrCb, cb) {
        var command = new UpdateUsageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateUsagePlan = function (args, optionsOrCb, cb) {
        var command = new UpdateUsagePlanCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    APIGateway.prototype.updateVpcLink = function (args, optionsOrCb, cb) {
        var command = new UpdateVpcLinkCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get ".concat(typeof optionsOrCb));
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    return APIGateway;
}(APIGatewayClient));
export { APIGateway };
