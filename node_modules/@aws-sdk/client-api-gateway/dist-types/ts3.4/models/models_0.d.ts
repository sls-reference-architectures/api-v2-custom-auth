import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { APIGatewayServiceException as __BaseException } from "./APIGatewayServiceException";
export interface AccessLogSettings {
  format?: string;
  destinationArn?: string;
}
export interface ThrottleSettings {
  burstLimit?: number;
  rateLimit?: number;
}
export interface Account {
  cloudwatchRoleArn?: string;
  throttleSettings?: ThrottleSettings;
  features?: string[];
  apiKeyVersion?: string;
}
export interface ApiKey {
  id?: string;
  value?: string;
  name?: string;
  customerId?: string;
  description?: string;
  enabled?: boolean;
  createdDate?: Date;
  lastUpdatedDate?: Date;
  stageKeys?: string[];
  tags?: Record<string, string>;
}
export interface ApiKeyIds {
  ids?: string[];
  warnings?: string[];
}
export interface ApiKeys {
  warnings?: string[];
  items?: ApiKey[];
  position?: string;
}
export declare enum ApiKeysFormat {
  csv = "csv",
}
export declare enum ApiKeySourceType {
  AUTHORIZER = "AUTHORIZER",
  HEADER = "HEADER",
}
export interface ApiStage {
  apiId?: string;
  stage?: string;
  throttle?: Record<string, ThrottleSettings>;
}
export declare enum AuthorizerType {
  COGNITO_USER_POOLS = "COGNITO_USER_POOLS",
  REQUEST = "REQUEST",
  TOKEN = "TOKEN",
}
export interface Authorizer {
  id?: string;
  name?: string;
  type?: AuthorizerType | string;
  providerARNs?: string[];
  authType?: string;
  authorizerUri?: string;
  authorizerCredentials?: string;
  identitySource?: string;
  identityValidationExpression?: string;
  authorizerResultTtlInSeconds?: number;
}
export interface Authorizers {
  items?: Authorizer[];
  position?: string;
}
export declare class BadRequestException extends __BaseException {
  readonly name: "BadRequestException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<BadRequestException, __BaseException>
  );
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export interface StageKey {
  restApiId?: string;
  stageName?: string;
}
export interface CreateApiKeyRequest {
  name?: string;
  description?: string;
  enabled?: boolean;
  generateDistinctId?: boolean;
  value?: string;
  stageKeys?: StageKey[];
  customerId?: string;
  tags?: Record<string, string>;
}
export declare class LimitExceededException extends __BaseException {
  readonly name: "LimitExceededException";
  readonly $fault: "client";
  retryAfterSeconds?: string;
  constructor(
    opts: __ExceptionOptionType<LimitExceededException, __BaseException>
  );
}
export declare class NotFoundException extends __BaseException {
  readonly name: "NotFoundException";
  readonly $fault: "client";
  constructor(opts: __ExceptionOptionType<NotFoundException, __BaseException>);
}
export declare class TooManyRequestsException extends __BaseException {
  readonly name: "TooManyRequestsException";
  readonly $fault: "client";
  retryAfterSeconds?: string;
  constructor(
    opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>
  );
}
export declare class UnauthorizedException extends __BaseException {
  readonly name: "UnauthorizedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<UnauthorizedException, __BaseException>
  );
}
export interface CreateAuthorizerRequest {
  restApiId: string | undefined;
  name: string | undefined;
  type: AuthorizerType | string | undefined;
  providerARNs?: string[];
  authType?: string;
  authorizerUri?: string;
  authorizerCredentials?: string;
  identitySource?: string;
  identityValidationExpression?: string;
  authorizerResultTtlInSeconds?: number;
}
export interface BasePathMapping {
  basePath?: string;
  restApiId?: string;
  stage?: string;
}
export interface CreateBasePathMappingRequest {
  domainName: string | undefined;
  basePath?: string;
  restApiId: string | undefined;
  stage?: string;
}
export declare enum CacheClusterSize {
  SIZE_0_POINT_5_GB = "0.5",
  SIZE_118_GB = "118",
  SIZE_13_POINT_5_GB = "13.5",
  SIZE_1_POINT_6_GB = "1.6",
  SIZE_237_GB = "237",
  SIZE_28_POINT_4_GB = "28.4",
  SIZE_58_POINT_2_GB = "58.2",
  SIZE_6_POINT_1_GB = "6.1",
}
export interface DeploymentCanarySettings {
  percentTraffic?: number;
  stageVariableOverrides?: Record<string, string>;
  useStageCache?: boolean;
}
export interface CreateDeploymentRequest {
  restApiId: string | undefined;
  stageName?: string;
  stageDescription?: string;
  description?: string;
  cacheClusterEnabled?: boolean;
  cacheClusterSize?: CacheClusterSize | string;
  variables?: Record<string, string>;
  canarySettings?: DeploymentCanarySettings;
  tracingEnabled?: boolean;
}
export interface MethodSnapshot {
  authorizationType?: string;
  apiKeyRequired?: boolean;
}
export interface Deployment {
  id?: string;
  description?: string;
  createdDate?: Date;
  apiSummary?: Record<string, Record<string, MethodSnapshot>>;
}
export declare class ServiceUnavailableException extends __BaseException {
  readonly name: "ServiceUnavailableException";
  readonly $fault: "server";
  retryAfterSeconds?: string;
  constructor(
    opts: __ExceptionOptionType<ServiceUnavailableException, __BaseException>
  );
}
export declare enum DocumentationPartType {
  API = "API",
  AUTHORIZER = "AUTHORIZER",
  METHOD = "METHOD",
  MODEL = "MODEL",
  PATH_PARAMETER = "PATH_PARAMETER",
  QUERY_PARAMETER = "QUERY_PARAMETER",
  REQUEST_BODY = "REQUEST_BODY",
  REQUEST_HEADER = "REQUEST_HEADER",
  RESOURCE = "RESOURCE",
  RESPONSE = "RESPONSE",
  RESPONSE_BODY = "RESPONSE_BODY",
  RESPONSE_HEADER = "RESPONSE_HEADER",
}
export interface DocumentationPartLocation {
  type: DocumentationPartType | string | undefined;
  path?: string;
  method?: string;
  statusCode?: string;
  name?: string;
}
export interface CreateDocumentationPartRequest {
  restApiId: string | undefined;
  location: DocumentationPartLocation | undefined;
  properties: string | undefined;
}
export interface DocumentationPart {
  id?: string;
  location?: DocumentationPartLocation;
  properties?: string;
}
export interface CreateDocumentationVersionRequest {
  restApiId: string | undefined;
  documentationVersion: string | undefined;
  stageName?: string;
  description?: string;
}
export interface DocumentationVersion {
  version?: string;
  createdDate?: Date;
  description?: string;
}
export declare type EndpointType = "EDGE" | "PRIVATE" | "REGIONAL";
export interface EndpointConfiguration {
  types?: (EndpointType | string)[];
  vpcEndpointIds?: string[];
}
export interface MutualTlsAuthenticationInput {
  truststoreUri?: string;
  truststoreVersion?: string;
}
export declare type SecurityPolicy = "TLS_1_0" | "TLS_1_2";
export interface CreateDomainNameRequest {
  domainName: string | undefined;
  certificateName?: string;
  certificateBody?: string;
  certificatePrivateKey?: string;
  certificateChain?: string;
  certificateArn?: string;
  regionalCertificateName?: string;
  regionalCertificateArn?: string;
  endpointConfiguration?: EndpointConfiguration;
  tags?: Record<string, string>;
  securityPolicy?: SecurityPolicy | string;
  mutualTlsAuthentication?: MutualTlsAuthenticationInput;
  ownershipVerificationCertificateArn?: string;
}
export declare enum DomainNameStatus {
  AVAILABLE = "AVAILABLE",
  PENDING = "PENDING",
  PENDING_CERTIFICATE_REIMPORT = "PENDING_CERTIFICATE_REIMPORT",
  PENDING_OWNERSHIP_VERIFICATION = "PENDING_OWNERSHIP_VERIFICATION",
  UPDATING = "UPDATING",
}
export interface MutualTlsAuthentication {
  truststoreUri?: string;
  truststoreVersion?: string;
  truststoreWarnings?: string[];
}
export interface DomainName {
  domainName?: string;
  certificateName?: string;
  certificateArn?: string;
  certificateUploadDate?: Date;
  regionalDomainName?: string;
  regionalHostedZoneId?: string;
  regionalCertificateName?: string;
  regionalCertificateArn?: string;
  distributionDomainName?: string;
  distributionHostedZoneId?: string;
  endpointConfiguration?: EndpointConfiguration;
  domainNameStatus?: DomainNameStatus | string;
  domainNameStatusMessage?: string;
  securityPolicy?: SecurityPolicy | string;
  tags?: Record<string, string>;
  mutualTlsAuthentication?: MutualTlsAuthentication;
  ownershipVerificationCertificateArn?: string;
}
export interface CreateModelRequest {
  restApiId: string | undefined;
  name: string | undefined;
  description?: string;
  schema?: string;
  contentType: string | undefined;
}
export interface Model {
  id?: string;
  name?: string;
  description?: string;
  schema?: string;
  contentType?: string;
}
export interface CreateRequestValidatorRequest {
  restApiId: string | undefined;
  name?: string;
  validateRequestBody?: boolean;
  validateRequestParameters?: boolean;
}
export interface RequestValidator {
  id?: string;
  name?: string;
  validateRequestBody?: boolean;
  validateRequestParameters?: boolean;
}
export interface CreateResourceRequest {
  restApiId: string | undefined;
  parentId: string | undefined;
  pathPart: string | undefined;
}
export declare enum ConnectionType {
  INTERNET = "INTERNET",
  VPC_LINK = "VPC_LINK",
}
export declare enum ContentHandlingStrategy {
  CONVERT_TO_BINARY = "CONVERT_TO_BINARY",
  CONVERT_TO_TEXT = "CONVERT_TO_TEXT",
}
export interface IntegrationResponse {
  statusCode?: string;
  selectionPattern?: string;
  responseParameters?: Record<string, string>;
  responseTemplates?: Record<string, string>;
  contentHandling?: ContentHandlingStrategy | string;
}
export interface TlsConfig {
  insecureSkipVerification?: boolean;
}
export declare enum IntegrationType {
  AWS = "AWS",
  AWS_PROXY = "AWS_PROXY",
  HTTP = "HTTP",
  HTTP_PROXY = "HTTP_PROXY",
  MOCK = "MOCK",
}
export interface Integration {
  type?: IntegrationType | string;
  httpMethod?: string;
  uri?: string;
  connectionType?: ConnectionType | string;
  connectionId?: string;
  credentials?: string;
  requestParameters?: Record<string, string>;
  requestTemplates?: Record<string, string>;
  passthroughBehavior?: string;
  contentHandling?: ContentHandlingStrategy | string;
  timeoutInMillis?: number;
  cacheNamespace?: string;
  cacheKeyParameters?: string[];
  integrationResponses?: Record<string, IntegrationResponse>;
  tlsConfig?: TlsConfig;
}
export interface MethodResponse {
  statusCode?: string;
  responseParameters?: Record<string, boolean>;
  responseModels?: Record<string, string>;
}
export interface Method {
  httpMethod?: string;
  authorizationType?: string;
  authorizerId?: string;
  apiKeyRequired?: boolean;
  requestValidatorId?: string;
  operationName?: string;
  requestParameters?: Record<string, boolean>;
  requestModels?: Record<string, string>;
  methodResponses?: Record<string, MethodResponse>;
  methodIntegration?: Integration;
  authorizationScopes?: string[];
}
export interface Resource {
  id?: string;
  parentId?: string;
  pathPart?: string;
  path?: string;
  resourceMethods?: Record<string, Method>;
}
export interface CreateRestApiRequest {
  name: string | undefined;
  description?: string;
  version?: string;
  cloneFrom?: string;
  binaryMediaTypes?: string[];
  minimumCompressionSize?: number;
  apiKeySource?: ApiKeySourceType | string;
  endpointConfiguration?: EndpointConfiguration;
  policy?: string;
  tags?: Record<string, string>;
  disableExecuteApiEndpoint?: boolean;
}
export interface RestApi {
  id?: string;
  name?: string;
  description?: string;
  createdDate?: Date;
  version?: string;
  warnings?: string[];
  binaryMediaTypes?: string[];
  minimumCompressionSize?: number;
  apiKeySource?: ApiKeySourceType | string;
  endpointConfiguration?: EndpointConfiguration;
  policy?: string;
  tags?: Record<string, string>;
  disableExecuteApiEndpoint?: boolean;
}
export interface CanarySettings {
  percentTraffic?: number;
  deploymentId?: string;
  stageVariableOverrides?: Record<string, string>;
  useStageCache?: boolean;
}
export interface CreateStageRequest {
  restApiId: string | undefined;
  stageName: string | undefined;
  deploymentId: string | undefined;
  description?: string;
  cacheClusterEnabled?: boolean;
  cacheClusterSize?: CacheClusterSize | string;
  variables?: Record<string, string>;
  documentationVersion?: string;
  canarySettings?: CanarySettings;
  tracingEnabled?: boolean;
  tags?: Record<string, string>;
}
export declare enum CacheClusterStatus {
  AVAILABLE = "AVAILABLE",
  CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS",
  DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS",
  FLUSH_IN_PROGRESS = "FLUSH_IN_PROGRESS",
  NOT_AVAILABLE = "NOT_AVAILABLE",
}
export declare enum UnauthorizedCacheControlHeaderStrategy {
  FAIL_WITH_403 = "FAIL_WITH_403",
  SUCCEED_WITHOUT_RESPONSE_HEADER = "SUCCEED_WITHOUT_RESPONSE_HEADER",
  SUCCEED_WITH_RESPONSE_HEADER = "SUCCEED_WITH_RESPONSE_HEADER",
}
export interface MethodSetting {
  metricsEnabled?: boolean;
  loggingLevel?: string;
  dataTraceEnabled?: boolean;
  throttlingBurstLimit?: number;
  throttlingRateLimit?: number;
  cachingEnabled?: boolean;
  cacheTtlInSeconds?: number;
  cacheDataEncrypted?: boolean;
  requireAuthorizationForCacheControl?: boolean;
  unauthorizedCacheControlHeaderStrategy?:
    | UnauthorizedCacheControlHeaderStrategy
    | string;
}
export interface Stage {
  deploymentId?: string;
  clientCertificateId?: string;
  stageName?: string;
  description?: string;
  cacheClusterEnabled?: boolean;
  cacheClusterSize?: CacheClusterSize | string;
  cacheClusterStatus?: CacheClusterStatus | string;
  methodSettings?: Record<string, MethodSetting>;
  variables?: Record<string, string>;
  documentationVersion?: string;
  accessLogSettings?: AccessLogSettings;
  canarySettings?: CanarySettings;
  tracingEnabled?: boolean;
  webAclArn?: string;
  tags?: Record<string, string>;
  createdDate?: Date;
  lastUpdatedDate?: Date;
}
export declare enum QuotaPeriodType {
  DAY = "DAY",
  MONTH = "MONTH",
  WEEK = "WEEK",
}
export interface QuotaSettings {
  limit?: number;
  offset?: number;
  period?: QuotaPeriodType | string;
}
export interface CreateUsagePlanRequest {
  name: string | undefined;
  description?: string;
  apiStages?: ApiStage[];
  throttle?: ThrottleSettings;
  quota?: QuotaSettings;
  tags?: Record<string, string>;
}
export interface UsagePlan {
  id?: string;
  name?: string;
  description?: string;
  apiStages?: ApiStage[];
  throttle?: ThrottleSettings;
  quota?: QuotaSettings;
  productCode?: string;
  tags?: Record<string, string>;
}
export interface CreateUsagePlanKeyRequest {
  usagePlanId: string | undefined;
  keyId: string | undefined;
  keyType: string | undefined;
}
export interface UsagePlanKey {
  id?: string;
  type?: string;
  value?: string;
  name?: string;
}
export interface CreateVpcLinkRequest {
  name: string | undefined;
  description?: string;
  targetArns: string[] | undefined;
  tags?: Record<string, string>;
}
export declare enum VpcLinkStatus {
  AVAILABLE = "AVAILABLE",
  DELETING = "DELETING",
  FAILED = "FAILED",
  PENDING = "PENDING",
}
export interface VpcLink {
  id?: string;
  name?: string;
  description?: string;
  targetArns?: string[];
  status?: VpcLinkStatus | string;
  statusMessage?: string;
  tags?: Record<string, string>;
}
export interface DeleteApiKeyRequest {
  apiKey: string | undefined;
}
export interface DeleteAuthorizerRequest {
  restApiId: string | undefined;
  authorizerId: string | undefined;
}
export interface DeleteBasePathMappingRequest {
  domainName: string | undefined;
  basePath: string | undefined;
}
export interface DeleteClientCertificateRequest {
  clientCertificateId: string | undefined;
}
export interface DeleteDeploymentRequest {
  restApiId: string | undefined;
  deploymentId: string | undefined;
}
export interface DeleteDocumentationPartRequest {
  restApiId: string | undefined;
  documentationPartId: string | undefined;
}
export interface DeleteDocumentationVersionRequest {
  restApiId: string | undefined;
  documentationVersion: string | undefined;
}
export interface DeleteDomainNameRequest {
  domainName: string | undefined;
}
export declare enum GatewayResponseType {
  ACCESS_DENIED = "ACCESS_DENIED",
  API_CONFIGURATION_ERROR = "API_CONFIGURATION_ERROR",
  AUTHORIZER_CONFIGURATION_ERROR = "AUTHORIZER_CONFIGURATION_ERROR",
  AUTHORIZER_FAILURE = "AUTHORIZER_FAILURE",
  BAD_REQUEST_BODY = "BAD_REQUEST_BODY",
  BAD_REQUEST_PARAMETERS = "BAD_REQUEST_PARAMETERS",
  DEFAULT_4XX = "DEFAULT_4XX",
  DEFAULT_5XX = "DEFAULT_5XX",
  EXPIRED_TOKEN = "EXPIRED_TOKEN",
  INTEGRATION_FAILURE = "INTEGRATION_FAILURE",
  INTEGRATION_TIMEOUT = "INTEGRATION_TIMEOUT",
  INVALID_API_KEY = "INVALID_API_KEY",
  INVALID_SIGNATURE = "INVALID_SIGNATURE",
  MISSING_AUTHENTICATION_TOKEN = "MISSING_AUTHENTICATION_TOKEN",
  QUOTA_EXCEEDED = "QUOTA_EXCEEDED",
  REQUEST_TOO_LARGE = "REQUEST_TOO_LARGE",
  RESOURCE_NOT_FOUND = "RESOURCE_NOT_FOUND",
  THROTTLED = "THROTTLED",
  UNAUTHORIZED = "UNAUTHORIZED",
  UNSUPPORTED_MEDIA_TYPE = "UNSUPPORTED_MEDIA_TYPE",
  WAF_FILTERED = "WAF_FILTERED",
}
export interface DeleteGatewayResponseRequest {
  restApiId: string | undefined;
  responseType: GatewayResponseType | string | undefined;
}
export interface DeleteIntegrationRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
}
export interface DeleteIntegrationResponseRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  statusCode: string | undefined;
}
export interface DeleteMethodRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
}
export interface DeleteMethodResponseRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  statusCode: string | undefined;
}
export interface DeleteModelRequest {
  restApiId: string | undefined;
  modelName: string | undefined;
}
export interface DeleteRequestValidatorRequest {
  restApiId: string | undefined;
  requestValidatorId: string | undefined;
}
export interface DeleteResourceRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
}
export interface DeleteRestApiRequest {
  restApiId: string | undefined;
}
export interface DeleteStageRequest {
  restApiId: string | undefined;
  stageName: string | undefined;
}
export interface DeleteUsagePlanRequest {
  usagePlanId: string | undefined;
}
export interface DeleteUsagePlanKeyRequest {
  usagePlanId: string | undefined;
  keyId: string | undefined;
}
export interface DeleteVpcLinkRequest {
  vpcLinkId: string | undefined;
}
export interface FlushStageAuthorizersCacheRequest {
  restApiId: string | undefined;
  stageName: string | undefined;
}
export interface FlushStageCacheRequest {
  restApiId: string | undefined;
  stageName: string | undefined;
}
export interface ClientCertificate {
  clientCertificateId?: string;
  description?: string;
  pemEncodedCertificate?: string;
  createdDate?: Date;
  expirationDate?: Date;
  tags?: Record<string, string>;
}
export interface GenerateClientCertificateRequest {
  description?: string;
  tags?: Record<string, string>;
}
export interface GetAccountRequest {}
export interface GetApiKeyRequest {
  apiKey: string | undefined;
  includeValue?: boolean;
}
export interface GetApiKeysRequest {
  position?: string;
  limit?: number;
  nameQuery?: string;
  customerId?: string;
  includeValues?: boolean;
}
export interface GetAuthorizerRequest {
  restApiId: string | undefined;
  authorizerId: string | undefined;
}
export interface GetAuthorizersRequest {
  restApiId: string | undefined;
  position?: string;
  limit?: number;
}
export interface GetBasePathMappingRequest {
  domainName: string | undefined;
  basePath: string | undefined;
}
export interface BasePathMappings {
  items?: BasePathMapping[];
  position?: string;
}
export interface GetBasePathMappingsRequest {
  domainName: string | undefined;
  position?: string;
  limit?: number;
}
export interface GetClientCertificateRequest {
  clientCertificateId: string | undefined;
}
export interface ClientCertificates {
  items?: ClientCertificate[];
  position?: string;
}
export interface GetClientCertificatesRequest {
  position?: string;
  limit?: number;
}
export interface GetDeploymentRequest {
  restApiId: string | undefined;
  deploymentId: string | undefined;
  embed?: string[];
}
export interface Deployments {
  items?: Deployment[];
  position?: string;
}
export interface GetDeploymentsRequest {
  restApiId: string | undefined;
  position?: string;
  limit?: number;
}
export interface GetDocumentationPartRequest {
  restApiId: string | undefined;
  documentationPartId: string | undefined;
}
export interface DocumentationParts {
  items?: DocumentationPart[];
  position?: string;
}
export declare enum LocationStatusType {
  DOCUMENTED = "DOCUMENTED",
  UNDOCUMENTED = "UNDOCUMENTED",
}
export interface GetDocumentationPartsRequest {
  restApiId: string | undefined;
  type?: DocumentationPartType | string;
  nameQuery?: string;
  path?: string;
  position?: string;
  limit?: number;
  locationStatus?: LocationStatusType | string;
}
export interface GetDocumentationVersionRequest {
  restApiId: string | undefined;
  documentationVersion: string | undefined;
}
export interface DocumentationVersions {
  items?: DocumentationVersion[];
  position?: string;
}
export interface GetDocumentationVersionsRequest {
  restApiId: string | undefined;
  position?: string;
  limit?: number;
}
export interface GetDomainNameRequest {
  domainName: string | undefined;
}
export interface DomainNames {
  items?: DomainName[];
  position?: string;
}
export interface GetDomainNamesRequest {
  position?: string;
  limit?: number;
}
export interface ExportResponse {
  contentType?: string;
  contentDisposition?: string;
  body?: Uint8Array;
}
export interface GetExportRequest {
  restApiId: string | undefined;
  stageName: string | undefined;
  exportType: string | undefined;
  parameters?: Record<string, string>;
  accepts?: string;
}
export interface GatewayResponse {
  responseType?: GatewayResponseType | string;
  statusCode?: string;
  responseParameters?: Record<string, string>;
  responseTemplates?: Record<string, string>;
  defaultResponse?: boolean;
}
export interface GetGatewayResponseRequest {
  restApiId: string | undefined;
  responseType: GatewayResponseType | string | undefined;
}
export interface GatewayResponses {
  items?: GatewayResponse[];
  position?: string;
}
export interface GetGatewayResponsesRequest {
  restApiId: string | undefined;
  position?: string;
  limit?: number;
}
export interface GetIntegrationRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
}
export interface GetIntegrationResponseRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  statusCode: string | undefined;
}
export interface GetMethodRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
}
export interface GetMethodResponseRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  statusCode: string | undefined;
}
export interface GetModelRequest {
  restApiId: string | undefined;
  modelName: string | undefined;
  flatten?: boolean;
}
export interface GetModelsRequest {
  restApiId: string | undefined;
  position?: string;
  limit?: number;
}
export interface Models {
  items?: Model[];
  position?: string;
}
export interface GetModelTemplateRequest {
  restApiId: string | undefined;
  modelName: string | undefined;
}
export interface Template {
  value?: string;
}
export interface GetRequestValidatorRequest {
  restApiId: string | undefined;
  requestValidatorId: string | undefined;
}
export interface GetRequestValidatorsRequest {
  restApiId: string | undefined;
  position?: string;
  limit?: number;
}
export interface RequestValidators {
  items?: RequestValidator[];
  position?: string;
}
export interface GetResourceRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  embed?: string[];
}
export interface GetResourcesRequest {
  restApiId: string | undefined;
  position?: string;
  limit?: number;
  embed?: string[];
}
export interface Resources {
  items?: Resource[];
  position?: string;
}
export interface GetRestApiRequest {
  restApiId: string | undefined;
}
export interface GetRestApisRequest {
  position?: string;
  limit?: number;
}
export interface RestApis {
  items?: RestApi[];
  position?: string;
}
export interface GetSdkRequest {
  restApiId: string | undefined;
  stageName: string | undefined;
  sdkType: string | undefined;
  parameters?: Record<string, string>;
}
export interface SdkResponse {
  contentType?: string;
  contentDisposition?: string;
  body?: Uint8Array;
}
export interface GetSdkTypeRequest {
  id: string | undefined;
}
export interface SdkConfigurationProperty {
  name?: string;
  friendlyName?: string;
  description?: string;
  required?: boolean;
  defaultValue?: string;
}
export interface SdkType {
  id?: string;
  friendlyName?: string;
  description?: string;
  configurationProperties?: SdkConfigurationProperty[];
}
export interface GetSdkTypesRequest {
  position?: string;
  limit?: number;
}
export interface SdkTypes {
  items?: SdkType[];
}
export interface GetStageRequest {
  restApiId: string | undefined;
  stageName: string | undefined;
}
export interface GetStagesRequest {
  restApiId: string | undefined;
  deploymentId?: string;
}
export interface Stages {
  item?: Stage[];
}
export interface GetTagsRequest {
  resourceArn: string | undefined;
  position?: string;
  limit?: number;
}
export interface Tags {
  tags?: Record<string, string>;
}
export interface GetUsageRequest {
  usagePlanId: string | undefined;
  keyId?: string;
  startDate: string | undefined;
  endDate: string | undefined;
  position?: string;
  limit?: number;
}
export interface Usage {
  usagePlanId?: string;
  startDate?: string;
  endDate?: string;
  items?: Record<string, number[][]>;
  position?: string;
}
export interface GetUsagePlanRequest {
  usagePlanId: string | undefined;
}
export interface GetUsagePlanKeyRequest {
  usagePlanId: string | undefined;
  keyId: string | undefined;
}
export interface GetUsagePlanKeysRequest {
  usagePlanId: string | undefined;
  position?: string;
  limit?: number;
  nameQuery?: string;
}
export interface UsagePlanKeys {
  items?: UsagePlanKey[];
  position?: string;
}
export interface GetUsagePlansRequest {
  position?: string;
  keyId?: string;
  limit?: number;
}
export interface UsagePlans {
  items?: UsagePlan[];
  position?: string;
}
export interface GetVpcLinkRequest {
  vpcLinkId: string | undefined;
}
export interface GetVpcLinksRequest {
  position?: string;
  limit?: number;
}
export interface VpcLinks {
  items?: VpcLink[];
  position?: string;
}
export interface ImportApiKeysRequest {
  body: Uint8Array | undefined;
  format: ApiKeysFormat | string | undefined;
  failOnWarnings?: boolean;
}
export interface DocumentationPartIds {
  ids?: string[];
  warnings?: string[];
}
export declare enum PutMode {
  Merge = "merge",
  Overwrite = "overwrite",
}
export interface ImportDocumentationPartsRequest {
  restApiId: string | undefined;
  mode?: PutMode | string;
  failOnWarnings?: boolean;
  body: Uint8Array | undefined;
}
export interface ImportRestApiRequest {
  failOnWarnings?: boolean;
  parameters?: Record<string, string>;
  body: Uint8Array | undefined;
}
export interface PutGatewayResponseRequest {
  restApiId: string | undefined;
  responseType: GatewayResponseType | string | undefined;
  statusCode?: string;
  responseParameters?: Record<string, string>;
  responseTemplates?: Record<string, string>;
}
export interface PutIntegrationRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  type: IntegrationType | string | undefined;
  integrationHttpMethod?: string;
  uri?: string;
  connectionType?: ConnectionType | string;
  connectionId?: string;
  credentials?: string;
  requestParameters?: Record<string, string>;
  requestTemplates?: Record<string, string>;
  passthroughBehavior?: string;
  cacheNamespace?: string;
  cacheKeyParameters?: string[];
  contentHandling?: ContentHandlingStrategy | string;
  timeoutInMillis?: number;
  tlsConfig?: TlsConfig;
}
export interface PutIntegrationResponseRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  statusCode: string | undefined;
  selectionPattern?: string;
  responseParameters?: Record<string, string>;
  responseTemplates?: Record<string, string>;
  contentHandling?: ContentHandlingStrategy | string;
}
export interface PutMethodRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  authorizationType: string | undefined;
  authorizerId?: string;
  apiKeyRequired?: boolean;
  operationName?: string;
  requestParameters?: Record<string, boolean>;
  requestModels?: Record<string, string>;
  requestValidatorId?: string;
  authorizationScopes?: string[];
}
export interface PutMethodResponseRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  statusCode: string | undefined;
  responseParameters?: Record<string, boolean>;
  responseModels?: Record<string, string>;
}
export interface PutRestApiRequest {
  restApiId: string | undefined;
  mode?: PutMode | string;
  failOnWarnings?: boolean;
  parameters?: Record<string, string>;
  body: Uint8Array | undefined;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TestInvokeAuthorizerRequest {
  restApiId: string | undefined;
  authorizerId: string | undefined;
  headers?: Record<string, string>;
  multiValueHeaders?: Record<string, string[]>;
  pathWithQueryString?: string;
  body?: string;
  stageVariables?: Record<string, string>;
  additionalContext?: Record<string, string>;
}
export interface TestInvokeAuthorizerResponse {
  clientStatus?: number;
  log?: string;
  latency?: number;
  principalId?: string;
  policy?: string;
  authorization?: Record<string, string[]>;
  claims?: Record<string, string>;
}
export interface TestInvokeMethodRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  pathWithQueryString?: string;
  body?: string;
  headers?: Record<string, string>;
  multiValueHeaders?: Record<string, string[]>;
  clientCertificateId?: string;
  stageVariables?: Record<string, string>;
}
export interface TestInvokeMethodResponse {
  status?: number;
  body?: string;
  headers?: Record<string, string>;
  multiValueHeaders?: Record<string, string[]>;
  log?: string;
  latency?: number;
}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export declare type Op =
  | "add"
  | "copy"
  | "move"
  | "remove"
  | "replace"
  | "test";
export interface PatchOperation {
  op?: Op | string;
  path?: string;
  value?: string;
  from?: string;
}
export interface UpdateAccountRequest {
  patchOperations?: PatchOperation[];
}
export interface UpdateApiKeyRequest {
  apiKey: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateAuthorizerRequest {
  restApiId: string | undefined;
  authorizerId: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateBasePathMappingRequest {
  domainName: string | undefined;
  basePath: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateClientCertificateRequest {
  clientCertificateId: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateDeploymentRequest {
  restApiId: string | undefined;
  deploymentId: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateDocumentationPartRequest {
  restApiId: string | undefined;
  documentationPartId: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateDocumentationVersionRequest {
  restApiId: string | undefined;
  documentationVersion: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateDomainNameRequest {
  domainName: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateGatewayResponseRequest {
  restApiId: string | undefined;
  responseType: GatewayResponseType | string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateIntegrationRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateIntegrationResponseRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  statusCode: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateMethodRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateMethodResponseRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  httpMethod: string | undefined;
  statusCode: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateModelRequest {
  restApiId: string | undefined;
  modelName: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateRequestValidatorRequest {
  restApiId: string | undefined;
  requestValidatorId: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateResourceRequest {
  restApiId: string | undefined;
  resourceId: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateRestApiRequest {
  restApiId: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateStageRequest {
  restApiId: string | undefined;
  stageName: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateUsageRequest {
  usagePlanId: string | undefined;
  keyId: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateUsagePlanRequest {
  usagePlanId: string | undefined;
  patchOperations?: PatchOperation[];
}
export interface UpdateVpcLinkRequest {
  vpcLinkId: string | undefined;
  patchOperations?: PatchOperation[];
}
export declare const AccessLogSettingsFilterSensitiveLog: (
  obj: AccessLogSettings
) => any;
export declare const ThrottleSettingsFilterSensitiveLog: (
  obj: ThrottleSettings
) => any;
export declare const AccountFilterSensitiveLog: (obj: Account) => any;
export declare const ApiKeyFilterSensitiveLog: (obj: ApiKey) => any;
export declare const ApiKeyIdsFilterSensitiveLog: (obj: ApiKeyIds) => any;
export declare const ApiKeysFilterSensitiveLog: (obj: ApiKeys) => any;
export declare const ApiStageFilterSensitiveLog: (obj: ApiStage) => any;
export declare const AuthorizerFilterSensitiveLog: (obj: Authorizer) => any;
export declare const AuthorizersFilterSensitiveLog: (obj: Authorizers) => any;
export declare const StageKeyFilterSensitiveLog: (obj: StageKey) => any;
export declare const CreateApiKeyRequestFilterSensitiveLog: (
  obj: CreateApiKeyRequest
) => any;
export declare const CreateAuthorizerRequestFilterSensitiveLog: (
  obj: CreateAuthorizerRequest
) => any;
export declare const BasePathMappingFilterSensitiveLog: (
  obj: BasePathMapping
) => any;
export declare const CreateBasePathMappingRequestFilterSensitiveLog: (
  obj: CreateBasePathMappingRequest
) => any;
export declare const DeploymentCanarySettingsFilterSensitiveLog: (
  obj: DeploymentCanarySettings
) => any;
export declare const CreateDeploymentRequestFilterSensitiveLog: (
  obj: CreateDeploymentRequest
) => any;
export declare const MethodSnapshotFilterSensitiveLog: (
  obj: MethodSnapshot
) => any;
export declare const DeploymentFilterSensitiveLog: (obj: Deployment) => any;
export declare const DocumentationPartLocationFilterSensitiveLog: (
  obj: DocumentationPartLocation
) => any;
export declare const CreateDocumentationPartRequestFilterSensitiveLog: (
  obj: CreateDocumentationPartRequest
) => any;
export declare const DocumentationPartFilterSensitiveLog: (
  obj: DocumentationPart
) => any;
export declare const CreateDocumentationVersionRequestFilterSensitiveLog: (
  obj: CreateDocumentationVersionRequest
) => any;
export declare const DocumentationVersionFilterSensitiveLog: (
  obj: DocumentationVersion
) => any;
export declare const EndpointConfigurationFilterSensitiveLog: (
  obj: EndpointConfiguration
) => any;
export declare const MutualTlsAuthenticationInputFilterSensitiveLog: (
  obj: MutualTlsAuthenticationInput
) => any;
export declare const CreateDomainNameRequestFilterSensitiveLog: (
  obj: CreateDomainNameRequest
) => any;
export declare const MutualTlsAuthenticationFilterSensitiveLog: (
  obj: MutualTlsAuthentication
) => any;
export declare const DomainNameFilterSensitiveLog: (obj: DomainName) => any;
export declare const CreateModelRequestFilterSensitiveLog: (
  obj: CreateModelRequest
) => any;
export declare const ModelFilterSensitiveLog: (obj: Model) => any;
export declare const CreateRequestValidatorRequestFilterSensitiveLog: (
  obj: CreateRequestValidatorRequest
) => any;
export declare const RequestValidatorFilterSensitiveLog: (
  obj: RequestValidator
) => any;
export declare const CreateResourceRequestFilterSensitiveLog: (
  obj: CreateResourceRequest
) => any;
export declare const IntegrationResponseFilterSensitiveLog: (
  obj: IntegrationResponse
) => any;
export declare const TlsConfigFilterSensitiveLog: (obj: TlsConfig) => any;
export declare const IntegrationFilterSensitiveLog: (obj: Integration) => any;
export declare const MethodResponseFilterSensitiveLog: (
  obj: MethodResponse
) => any;
export declare const MethodFilterSensitiveLog: (obj: Method) => any;
export declare const ResourceFilterSensitiveLog: (obj: Resource) => any;
export declare const CreateRestApiRequestFilterSensitiveLog: (
  obj: CreateRestApiRequest
) => any;
export declare const RestApiFilterSensitiveLog: (obj: RestApi) => any;
export declare const CanarySettingsFilterSensitiveLog: (
  obj: CanarySettings
) => any;
export declare const CreateStageRequestFilterSensitiveLog: (
  obj: CreateStageRequest
) => any;
export declare const MethodSettingFilterSensitiveLog: (
  obj: MethodSetting
) => any;
export declare const StageFilterSensitiveLog: (obj: Stage) => any;
export declare const QuotaSettingsFilterSensitiveLog: (
  obj: QuotaSettings
) => any;
export declare const CreateUsagePlanRequestFilterSensitiveLog: (
  obj: CreateUsagePlanRequest
) => any;
export declare const UsagePlanFilterSensitiveLog: (obj: UsagePlan) => any;
export declare const CreateUsagePlanKeyRequestFilterSensitiveLog: (
  obj: CreateUsagePlanKeyRequest
) => any;
export declare const UsagePlanKeyFilterSensitiveLog: (obj: UsagePlanKey) => any;
export declare const CreateVpcLinkRequestFilterSensitiveLog: (
  obj: CreateVpcLinkRequest
) => any;
export declare const VpcLinkFilterSensitiveLog: (obj: VpcLink) => any;
export declare const DeleteApiKeyRequestFilterSensitiveLog: (
  obj: DeleteApiKeyRequest
) => any;
export declare const DeleteAuthorizerRequestFilterSensitiveLog: (
  obj: DeleteAuthorizerRequest
) => any;
export declare const DeleteBasePathMappingRequestFilterSensitiveLog: (
  obj: DeleteBasePathMappingRequest
) => any;
export declare const DeleteClientCertificateRequestFilterSensitiveLog: (
  obj: DeleteClientCertificateRequest
) => any;
export declare const DeleteDeploymentRequestFilterSensitiveLog: (
  obj: DeleteDeploymentRequest
) => any;
export declare const DeleteDocumentationPartRequestFilterSensitiveLog: (
  obj: DeleteDocumentationPartRequest
) => any;
export declare const DeleteDocumentationVersionRequestFilterSensitiveLog: (
  obj: DeleteDocumentationVersionRequest
) => any;
export declare const DeleteDomainNameRequestFilterSensitiveLog: (
  obj: DeleteDomainNameRequest
) => any;
export declare const DeleteGatewayResponseRequestFilterSensitiveLog: (
  obj: DeleteGatewayResponseRequest
) => any;
export declare const DeleteIntegrationRequestFilterSensitiveLog: (
  obj: DeleteIntegrationRequest
) => any;
export declare const DeleteIntegrationResponseRequestFilterSensitiveLog: (
  obj: DeleteIntegrationResponseRequest
) => any;
export declare const DeleteMethodRequestFilterSensitiveLog: (
  obj: DeleteMethodRequest
) => any;
export declare const DeleteMethodResponseRequestFilterSensitiveLog: (
  obj: DeleteMethodResponseRequest
) => any;
export declare const DeleteModelRequestFilterSensitiveLog: (
  obj: DeleteModelRequest
) => any;
export declare const DeleteRequestValidatorRequestFilterSensitiveLog: (
  obj: DeleteRequestValidatorRequest
) => any;
export declare const DeleteResourceRequestFilterSensitiveLog: (
  obj: DeleteResourceRequest
) => any;
export declare const DeleteRestApiRequestFilterSensitiveLog: (
  obj: DeleteRestApiRequest
) => any;
export declare const DeleteStageRequestFilterSensitiveLog: (
  obj: DeleteStageRequest
) => any;
export declare const DeleteUsagePlanRequestFilterSensitiveLog: (
  obj: DeleteUsagePlanRequest
) => any;
export declare const DeleteUsagePlanKeyRequestFilterSensitiveLog: (
  obj: DeleteUsagePlanKeyRequest
) => any;
export declare const DeleteVpcLinkRequestFilterSensitiveLog: (
  obj: DeleteVpcLinkRequest
) => any;
export declare const FlushStageAuthorizersCacheRequestFilterSensitiveLog: (
  obj: FlushStageAuthorizersCacheRequest
) => any;
export declare const FlushStageCacheRequestFilterSensitiveLog: (
  obj: FlushStageCacheRequest
) => any;
export declare const ClientCertificateFilterSensitiveLog: (
  obj: ClientCertificate
) => any;
export declare const GenerateClientCertificateRequestFilterSensitiveLog: (
  obj: GenerateClientCertificateRequest
) => any;
export declare const GetAccountRequestFilterSensitiveLog: (
  obj: GetAccountRequest
) => any;
export declare const GetApiKeyRequestFilterSensitiveLog: (
  obj: GetApiKeyRequest
) => any;
export declare const GetApiKeysRequestFilterSensitiveLog: (
  obj: GetApiKeysRequest
) => any;
export declare const GetAuthorizerRequestFilterSensitiveLog: (
  obj: GetAuthorizerRequest
) => any;
export declare const GetAuthorizersRequestFilterSensitiveLog: (
  obj: GetAuthorizersRequest
) => any;
export declare const GetBasePathMappingRequestFilterSensitiveLog: (
  obj: GetBasePathMappingRequest
) => any;
export declare const BasePathMappingsFilterSensitiveLog: (
  obj: BasePathMappings
) => any;
export declare const GetBasePathMappingsRequestFilterSensitiveLog: (
  obj: GetBasePathMappingsRequest
) => any;
export declare const GetClientCertificateRequestFilterSensitiveLog: (
  obj: GetClientCertificateRequest
) => any;
export declare const ClientCertificatesFilterSensitiveLog: (
  obj: ClientCertificates
) => any;
export declare const GetClientCertificatesRequestFilterSensitiveLog: (
  obj: GetClientCertificatesRequest
) => any;
export declare const GetDeploymentRequestFilterSensitiveLog: (
  obj: GetDeploymentRequest
) => any;
export declare const DeploymentsFilterSensitiveLog: (obj: Deployments) => any;
export declare const GetDeploymentsRequestFilterSensitiveLog: (
  obj: GetDeploymentsRequest
) => any;
export declare const GetDocumentationPartRequestFilterSensitiveLog: (
  obj: GetDocumentationPartRequest
) => any;
export declare const DocumentationPartsFilterSensitiveLog: (
  obj: DocumentationParts
) => any;
export declare const GetDocumentationPartsRequestFilterSensitiveLog: (
  obj: GetDocumentationPartsRequest
) => any;
export declare const GetDocumentationVersionRequestFilterSensitiveLog: (
  obj: GetDocumentationVersionRequest
) => any;
export declare const DocumentationVersionsFilterSensitiveLog: (
  obj: DocumentationVersions
) => any;
export declare const GetDocumentationVersionsRequestFilterSensitiveLog: (
  obj: GetDocumentationVersionsRequest
) => any;
export declare const GetDomainNameRequestFilterSensitiveLog: (
  obj: GetDomainNameRequest
) => any;
export declare const DomainNamesFilterSensitiveLog: (obj: DomainNames) => any;
export declare const GetDomainNamesRequestFilterSensitiveLog: (
  obj: GetDomainNamesRequest
) => any;
export declare const ExportResponseFilterSensitiveLog: (
  obj: ExportResponse
) => any;
export declare const GetExportRequestFilterSensitiveLog: (
  obj: GetExportRequest
) => any;
export declare const GatewayResponseFilterSensitiveLog: (
  obj: GatewayResponse
) => any;
export declare const GetGatewayResponseRequestFilterSensitiveLog: (
  obj: GetGatewayResponseRequest
) => any;
export declare const GatewayResponsesFilterSensitiveLog: (
  obj: GatewayResponses
) => any;
export declare const GetGatewayResponsesRequestFilterSensitiveLog: (
  obj: GetGatewayResponsesRequest
) => any;
export declare const GetIntegrationRequestFilterSensitiveLog: (
  obj: GetIntegrationRequest
) => any;
export declare const GetIntegrationResponseRequestFilterSensitiveLog: (
  obj: GetIntegrationResponseRequest
) => any;
export declare const GetMethodRequestFilterSensitiveLog: (
  obj: GetMethodRequest
) => any;
export declare const GetMethodResponseRequestFilterSensitiveLog: (
  obj: GetMethodResponseRequest
) => any;
export declare const GetModelRequestFilterSensitiveLog: (
  obj: GetModelRequest
) => any;
export declare const GetModelsRequestFilterSensitiveLog: (
  obj: GetModelsRequest
) => any;
export declare const ModelsFilterSensitiveLog: (obj: Models) => any;
export declare const GetModelTemplateRequestFilterSensitiveLog: (
  obj: GetModelTemplateRequest
) => any;
export declare const TemplateFilterSensitiveLog: (obj: Template) => any;
export declare const GetRequestValidatorRequestFilterSensitiveLog: (
  obj: GetRequestValidatorRequest
) => any;
export declare const GetRequestValidatorsRequestFilterSensitiveLog: (
  obj: GetRequestValidatorsRequest
) => any;
export declare const RequestValidatorsFilterSensitiveLog: (
  obj: RequestValidators
) => any;
export declare const GetResourceRequestFilterSensitiveLog: (
  obj: GetResourceRequest
) => any;
export declare const GetResourcesRequestFilterSensitiveLog: (
  obj: GetResourcesRequest
) => any;
export declare const ResourcesFilterSensitiveLog: (obj: Resources) => any;
export declare const GetRestApiRequestFilterSensitiveLog: (
  obj: GetRestApiRequest
) => any;
export declare const GetRestApisRequestFilterSensitiveLog: (
  obj: GetRestApisRequest
) => any;
export declare const RestApisFilterSensitiveLog: (obj: RestApis) => any;
export declare const GetSdkRequestFilterSensitiveLog: (
  obj: GetSdkRequest
) => any;
export declare const SdkResponseFilterSensitiveLog: (obj: SdkResponse) => any;
export declare const GetSdkTypeRequestFilterSensitiveLog: (
  obj: GetSdkTypeRequest
) => any;
export declare const SdkConfigurationPropertyFilterSensitiveLog: (
  obj: SdkConfigurationProperty
) => any;
export declare const SdkTypeFilterSensitiveLog: (obj: SdkType) => any;
export declare const GetSdkTypesRequestFilterSensitiveLog: (
  obj: GetSdkTypesRequest
) => any;
export declare const SdkTypesFilterSensitiveLog: (obj: SdkTypes) => any;
export declare const GetStageRequestFilterSensitiveLog: (
  obj: GetStageRequest
) => any;
export declare const GetStagesRequestFilterSensitiveLog: (
  obj: GetStagesRequest
) => any;
export declare const StagesFilterSensitiveLog: (obj: Stages) => any;
export declare const GetTagsRequestFilterSensitiveLog: (
  obj: GetTagsRequest
) => any;
export declare const TagsFilterSensitiveLog: (obj: Tags) => any;
export declare const GetUsageRequestFilterSensitiveLog: (
  obj: GetUsageRequest
) => any;
export declare const UsageFilterSensitiveLog: (obj: Usage) => any;
export declare const GetUsagePlanRequestFilterSensitiveLog: (
  obj: GetUsagePlanRequest
) => any;
export declare const GetUsagePlanKeyRequestFilterSensitiveLog: (
  obj: GetUsagePlanKeyRequest
) => any;
export declare const GetUsagePlanKeysRequestFilterSensitiveLog: (
  obj: GetUsagePlanKeysRequest
) => any;
export declare const UsagePlanKeysFilterSensitiveLog: (
  obj: UsagePlanKeys
) => any;
export declare const GetUsagePlansRequestFilterSensitiveLog: (
  obj: GetUsagePlansRequest
) => any;
export declare const UsagePlansFilterSensitiveLog: (obj: UsagePlans) => any;
export declare const GetVpcLinkRequestFilterSensitiveLog: (
  obj: GetVpcLinkRequest
) => any;
export declare const GetVpcLinksRequestFilterSensitiveLog: (
  obj: GetVpcLinksRequest
) => any;
export declare const VpcLinksFilterSensitiveLog: (obj: VpcLinks) => any;
export declare const ImportApiKeysRequestFilterSensitiveLog: (
  obj: ImportApiKeysRequest
) => any;
export declare const DocumentationPartIdsFilterSensitiveLog: (
  obj: DocumentationPartIds
) => any;
export declare const ImportDocumentationPartsRequestFilterSensitiveLog: (
  obj: ImportDocumentationPartsRequest
) => any;
export declare const ImportRestApiRequestFilterSensitiveLog: (
  obj: ImportRestApiRequest
) => any;
export declare const PutGatewayResponseRequestFilterSensitiveLog: (
  obj: PutGatewayResponseRequest
) => any;
export declare const PutIntegrationRequestFilterSensitiveLog: (
  obj: PutIntegrationRequest
) => any;
export declare const PutIntegrationResponseRequestFilterSensitiveLog: (
  obj: PutIntegrationResponseRequest
) => any;
export declare const PutMethodRequestFilterSensitiveLog: (
  obj: PutMethodRequest
) => any;
export declare const PutMethodResponseRequestFilterSensitiveLog: (
  obj: PutMethodResponseRequest
) => any;
export declare const PutRestApiRequestFilterSensitiveLog: (
  obj: PutRestApiRequest
) => any;
export declare const TagResourceRequestFilterSensitiveLog: (
  obj: TagResourceRequest
) => any;
export declare const TestInvokeAuthorizerRequestFilterSensitiveLog: (
  obj: TestInvokeAuthorizerRequest
) => any;
export declare const TestInvokeAuthorizerResponseFilterSensitiveLog: (
  obj: TestInvokeAuthorizerResponse
) => any;
export declare const TestInvokeMethodRequestFilterSensitiveLog: (
  obj: TestInvokeMethodRequest
) => any;
export declare const TestInvokeMethodResponseFilterSensitiveLog: (
  obj: TestInvokeMethodResponse
) => any;
export declare const UntagResourceRequestFilterSensitiveLog: (
  obj: UntagResourceRequest
) => any;
export declare const PatchOperationFilterSensitiveLog: (
  obj: PatchOperation
) => any;
export declare const UpdateAccountRequestFilterSensitiveLog: (
  obj: UpdateAccountRequest
) => any;
export declare const UpdateApiKeyRequestFilterSensitiveLog: (
  obj: UpdateApiKeyRequest
) => any;
export declare const UpdateAuthorizerRequestFilterSensitiveLog: (
  obj: UpdateAuthorizerRequest
) => any;
export declare const UpdateBasePathMappingRequestFilterSensitiveLog: (
  obj: UpdateBasePathMappingRequest
) => any;
export declare const UpdateClientCertificateRequestFilterSensitiveLog: (
  obj: UpdateClientCertificateRequest
) => any;
export declare const UpdateDeploymentRequestFilterSensitiveLog: (
  obj: UpdateDeploymentRequest
) => any;
export declare const UpdateDocumentationPartRequestFilterSensitiveLog: (
  obj: UpdateDocumentationPartRequest
) => any;
export declare const UpdateDocumentationVersionRequestFilterSensitiveLog: (
  obj: UpdateDocumentationVersionRequest
) => any;
export declare const UpdateDomainNameRequestFilterSensitiveLog: (
  obj: UpdateDomainNameRequest
) => any;
export declare const UpdateGatewayResponseRequestFilterSensitiveLog: (
  obj: UpdateGatewayResponseRequest
) => any;
export declare const UpdateIntegrationRequestFilterSensitiveLog: (
  obj: UpdateIntegrationRequest
) => any;
export declare const UpdateIntegrationResponseRequestFilterSensitiveLog: (
  obj: UpdateIntegrationResponseRequest
) => any;
export declare const UpdateMethodRequestFilterSensitiveLog: (
  obj: UpdateMethodRequest
) => any;
export declare const UpdateMethodResponseRequestFilterSensitiveLog: (
  obj: UpdateMethodResponseRequest
) => any;
export declare const UpdateModelRequestFilterSensitiveLog: (
  obj: UpdateModelRequest
) => any;
export declare const UpdateRequestValidatorRequestFilterSensitiveLog: (
  obj: UpdateRequestValidatorRequest
) => any;
export declare const UpdateResourceRequestFilterSensitiveLog: (
  obj: UpdateResourceRequest
) => any;
export declare const UpdateRestApiRequestFilterSensitiveLog: (
  obj: UpdateRestApiRequest
) => any;
export declare const UpdateStageRequestFilterSensitiveLog: (
  obj: UpdateStageRequest
) => any;
export declare const UpdateUsageRequestFilterSensitiveLog: (
  obj: UpdateUsageRequest
) => any;
export declare const UpdateUsagePlanRequestFilterSensitiveLog: (
  obj: UpdateUsagePlanRequest
) => any;
export declare const UpdateVpcLinkRequestFilterSensitiveLog: (
  obj: UpdateVpcLinkRequest
) => any;
