"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeAws_restJson1GetDeploymentsCommand = exports.serializeAws_restJson1GetDeploymentCommand = exports.serializeAws_restJson1GetClientCertificatesCommand = exports.serializeAws_restJson1GetClientCertificateCommand = exports.serializeAws_restJson1GetBasePathMappingsCommand = exports.serializeAws_restJson1GetBasePathMappingCommand = exports.serializeAws_restJson1GetAuthorizersCommand = exports.serializeAws_restJson1GetAuthorizerCommand = exports.serializeAws_restJson1GetApiKeysCommand = exports.serializeAws_restJson1GetApiKeyCommand = exports.serializeAws_restJson1GetAccountCommand = exports.serializeAws_restJson1GenerateClientCertificateCommand = exports.serializeAws_restJson1FlushStageCacheCommand = exports.serializeAws_restJson1FlushStageAuthorizersCacheCommand = exports.serializeAws_restJson1DeleteVpcLinkCommand = exports.serializeAws_restJson1DeleteUsagePlanKeyCommand = exports.serializeAws_restJson1DeleteUsagePlanCommand = exports.serializeAws_restJson1DeleteStageCommand = exports.serializeAws_restJson1DeleteRestApiCommand = exports.serializeAws_restJson1DeleteResourceCommand = exports.serializeAws_restJson1DeleteRequestValidatorCommand = exports.serializeAws_restJson1DeleteModelCommand = exports.serializeAws_restJson1DeleteMethodResponseCommand = exports.serializeAws_restJson1DeleteMethodCommand = exports.serializeAws_restJson1DeleteIntegrationResponseCommand = exports.serializeAws_restJson1DeleteIntegrationCommand = exports.serializeAws_restJson1DeleteGatewayResponseCommand = exports.serializeAws_restJson1DeleteDomainNameCommand = exports.serializeAws_restJson1DeleteDocumentationVersionCommand = exports.serializeAws_restJson1DeleteDocumentationPartCommand = exports.serializeAws_restJson1DeleteDeploymentCommand = exports.serializeAws_restJson1DeleteClientCertificateCommand = exports.serializeAws_restJson1DeleteBasePathMappingCommand = exports.serializeAws_restJson1DeleteAuthorizerCommand = exports.serializeAws_restJson1DeleteApiKeyCommand = exports.serializeAws_restJson1CreateVpcLinkCommand = exports.serializeAws_restJson1CreateUsagePlanKeyCommand = exports.serializeAws_restJson1CreateUsagePlanCommand = exports.serializeAws_restJson1CreateStageCommand = exports.serializeAws_restJson1CreateRestApiCommand = exports.serializeAws_restJson1CreateResourceCommand = exports.serializeAws_restJson1CreateRequestValidatorCommand = exports.serializeAws_restJson1CreateModelCommand = exports.serializeAws_restJson1CreateDomainNameCommand = exports.serializeAws_restJson1CreateDocumentationVersionCommand = exports.serializeAws_restJson1CreateDocumentationPartCommand = exports.serializeAws_restJson1CreateDeploymentCommand = exports.serializeAws_restJson1CreateBasePathMappingCommand = exports.serializeAws_restJson1CreateAuthorizerCommand = exports.serializeAws_restJson1CreateApiKeyCommand = void 0;
exports.serializeAws_restJson1UpdateApiKeyCommand = exports.serializeAws_restJson1UpdateAccountCommand = exports.serializeAws_restJson1UntagResourceCommand = exports.serializeAws_restJson1TestInvokeMethodCommand = exports.serializeAws_restJson1TestInvokeAuthorizerCommand = exports.serializeAws_restJson1TagResourceCommand = exports.serializeAws_restJson1PutRestApiCommand = exports.serializeAws_restJson1PutMethodResponseCommand = exports.serializeAws_restJson1PutMethodCommand = exports.serializeAws_restJson1PutIntegrationResponseCommand = exports.serializeAws_restJson1PutIntegrationCommand = exports.serializeAws_restJson1PutGatewayResponseCommand = exports.serializeAws_restJson1ImportRestApiCommand = exports.serializeAws_restJson1ImportDocumentationPartsCommand = exports.serializeAws_restJson1ImportApiKeysCommand = exports.serializeAws_restJson1GetVpcLinksCommand = exports.serializeAws_restJson1GetVpcLinkCommand = exports.serializeAws_restJson1GetUsagePlansCommand = exports.serializeAws_restJson1GetUsagePlanKeysCommand = exports.serializeAws_restJson1GetUsagePlanKeyCommand = exports.serializeAws_restJson1GetUsagePlanCommand = exports.serializeAws_restJson1GetUsageCommand = exports.serializeAws_restJson1GetTagsCommand = exports.serializeAws_restJson1GetStagesCommand = exports.serializeAws_restJson1GetStageCommand = exports.serializeAws_restJson1GetSdkTypesCommand = exports.serializeAws_restJson1GetSdkTypeCommand = exports.serializeAws_restJson1GetSdkCommand = exports.serializeAws_restJson1GetRestApisCommand = exports.serializeAws_restJson1GetRestApiCommand = exports.serializeAws_restJson1GetResourcesCommand = exports.serializeAws_restJson1GetResourceCommand = exports.serializeAws_restJson1GetRequestValidatorsCommand = exports.serializeAws_restJson1GetRequestValidatorCommand = exports.serializeAws_restJson1GetModelTemplateCommand = exports.serializeAws_restJson1GetModelsCommand = exports.serializeAws_restJson1GetModelCommand = exports.serializeAws_restJson1GetMethodResponseCommand = exports.serializeAws_restJson1GetMethodCommand = exports.serializeAws_restJson1GetIntegrationResponseCommand = exports.serializeAws_restJson1GetIntegrationCommand = exports.serializeAws_restJson1GetGatewayResponsesCommand = exports.serializeAws_restJson1GetGatewayResponseCommand = exports.serializeAws_restJson1GetExportCommand = exports.serializeAws_restJson1GetDomainNamesCommand = exports.serializeAws_restJson1GetDomainNameCommand = exports.serializeAws_restJson1GetDocumentationVersionsCommand = exports.serializeAws_restJson1GetDocumentationVersionCommand = exports.serializeAws_restJson1GetDocumentationPartsCommand = exports.serializeAws_restJson1GetDocumentationPartCommand = void 0;
exports.deserializeAws_restJson1DeleteRequestValidatorCommand = exports.deserializeAws_restJson1DeleteModelCommand = exports.deserializeAws_restJson1DeleteMethodResponseCommand = exports.deserializeAws_restJson1DeleteMethodCommand = exports.deserializeAws_restJson1DeleteIntegrationResponseCommand = exports.deserializeAws_restJson1DeleteIntegrationCommand = exports.deserializeAws_restJson1DeleteGatewayResponseCommand = exports.deserializeAws_restJson1DeleteDomainNameCommand = exports.deserializeAws_restJson1DeleteDocumentationVersionCommand = exports.deserializeAws_restJson1DeleteDocumentationPartCommand = exports.deserializeAws_restJson1DeleteDeploymentCommand = exports.deserializeAws_restJson1DeleteClientCertificateCommand = exports.deserializeAws_restJson1DeleteBasePathMappingCommand = exports.deserializeAws_restJson1DeleteAuthorizerCommand = exports.deserializeAws_restJson1DeleteApiKeyCommand = exports.deserializeAws_restJson1CreateVpcLinkCommand = exports.deserializeAws_restJson1CreateUsagePlanKeyCommand = exports.deserializeAws_restJson1CreateUsagePlanCommand = exports.deserializeAws_restJson1CreateStageCommand = exports.deserializeAws_restJson1CreateRestApiCommand = exports.deserializeAws_restJson1CreateResourceCommand = exports.deserializeAws_restJson1CreateRequestValidatorCommand = exports.deserializeAws_restJson1CreateModelCommand = exports.deserializeAws_restJson1CreateDomainNameCommand = exports.deserializeAws_restJson1CreateDocumentationVersionCommand = exports.deserializeAws_restJson1CreateDocumentationPartCommand = exports.deserializeAws_restJson1CreateDeploymentCommand = exports.deserializeAws_restJson1CreateBasePathMappingCommand = exports.deserializeAws_restJson1CreateAuthorizerCommand = exports.deserializeAws_restJson1CreateApiKeyCommand = exports.serializeAws_restJson1UpdateVpcLinkCommand = exports.serializeAws_restJson1UpdateUsagePlanCommand = exports.serializeAws_restJson1UpdateUsageCommand = exports.serializeAws_restJson1UpdateStageCommand = exports.serializeAws_restJson1UpdateRestApiCommand = exports.serializeAws_restJson1UpdateResourceCommand = exports.serializeAws_restJson1UpdateRequestValidatorCommand = exports.serializeAws_restJson1UpdateModelCommand = exports.serializeAws_restJson1UpdateMethodResponseCommand = exports.serializeAws_restJson1UpdateMethodCommand = exports.serializeAws_restJson1UpdateIntegrationResponseCommand = exports.serializeAws_restJson1UpdateIntegrationCommand = exports.serializeAws_restJson1UpdateGatewayResponseCommand = exports.serializeAws_restJson1UpdateDomainNameCommand = exports.serializeAws_restJson1UpdateDocumentationVersionCommand = exports.serializeAws_restJson1UpdateDocumentationPartCommand = exports.serializeAws_restJson1UpdateDeploymentCommand = exports.serializeAws_restJson1UpdateClientCertificateCommand = exports.serializeAws_restJson1UpdateBasePathMappingCommand = exports.serializeAws_restJson1UpdateAuthorizerCommand = void 0;
exports.deserializeAws_restJson1GetUsagePlanCommand = exports.deserializeAws_restJson1GetUsageCommand = exports.deserializeAws_restJson1GetTagsCommand = exports.deserializeAws_restJson1GetStagesCommand = exports.deserializeAws_restJson1GetStageCommand = exports.deserializeAws_restJson1GetSdkTypesCommand = exports.deserializeAws_restJson1GetSdkTypeCommand = exports.deserializeAws_restJson1GetSdkCommand = exports.deserializeAws_restJson1GetRestApisCommand = exports.deserializeAws_restJson1GetRestApiCommand = exports.deserializeAws_restJson1GetResourcesCommand = exports.deserializeAws_restJson1GetResourceCommand = exports.deserializeAws_restJson1GetRequestValidatorsCommand = exports.deserializeAws_restJson1GetRequestValidatorCommand = exports.deserializeAws_restJson1GetModelTemplateCommand = exports.deserializeAws_restJson1GetModelsCommand = exports.deserializeAws_restJson1GetModelCommand = exports.deserializeAws_restJson1GetMethodResponseCommand = exports.deserializeAws_restJson1GetMethodCommand = exports.deserializeAws_restJson1GetIntegrationResponseCommand = exports.deserializeAws_restJson1GetIntegrationCommand = exports.deserializeAws_restJson1GetGatewayResponsesCommand = exports.deserializeAws_restJson1GetGatewayResponseCommand = exports.deserializeAws_restJson1GetExportCommand = exports.deserializeAws_restJson1GetDomainNamesCommand = exports.deserializeAws_restJson1GetDomainNameCommand = exports.deserializeAws_restJson1GetDocumentationVersionsCommand = exports.deserializeAws_restJson1GetDocumentationVersionCommand = exports.deserializeAws_restJson1GetDocumentationPartsCommand = exports.deserializeAws_restJson1GetDocumentationPartCommand = exports.deserializeAws_restJson1GetDeploymentsCommand = exports.deserializeAws_restJson1GetDeploymentCommand = exports.deserializeAws_restJson1GetClientCertificatesCommand = exports.deserializeAws_restJson1GetClientCertificateCommand = exports.deserializeAws_restJson1GetBasePathMappingsCommand = exports.deserializeAws_restJson1GetBasePathMappingCommand = exports.deserializeAws_restJson1GetAuthorizersCommand = exports.deserializeAws_restJson1GetAuthorizerCommand = exports.deserializeAws_restJson1GetApiKeysCommand = exports.deserializeAws_restJson1GetApiKeyCommand = exports.deserializeAws_restJson1GetAccountCommand = exports.deserializeAws_restJson1GenerateClientCertificateCommand = exports.deserializeAws_restJson1FlushStageCacheCommand = exports.deserializeAws_restJson1FlushStageAuthorizersCacheCommand = exports.deserializeAws_restJson1DeleteVpcLinkCommand = exports.deserializeAws_restJson1DeleteUsagePlanKeyCommand = exports.deserializeAws_restJson1DeleteUsagePlanCommand = exports.deserializeAws_restJson1DeleteStageCommand = exports.deserializeAws_restJson1DeleteRestApiCommand = exports.deserializeAws_restJson1DeleteResourceCommand = void 0;
exports.deserializeAws_restJson1UpdateVpcLinkCommand = exports.deserializeAws_restJson1UpdateUsagePlanCommand = exports.deserializeAws_restJson1UpdateUsageCommand = exports.deserializeAws_restJson1UpdateStageCommand = exports.deserializeAws_restJson1UpdateRestApiCommand = exports.deserializeAws_restJson1UpdateResourceCommand = exports.deserializeAws_restJson1UpdateRequestValidatorCommand = exports.deserializeAws_restJson1UpdateModelCommand = exports.deserializeAws_restJson1UpdateMethodResponseCommand = exports.deserializeAws_restJson1UpdateMethodCommand = exports.deserializeAws_restJson1UpdateIntegrationResponseCommand = exports.deserializeAws_restJson1UpdateIntegrationCommand = exports.deserializeAws_restJson1UpdateGatewayResponseCommand = exports.deserializeAws_restJson1UpdateDomainNameCommand = exports.deserializeAws_restJson1UpdateDocumentationVersionCommand = exports.deserializeAws_restJson1UpdateDocumentationPartCommand = exports.deserializeAws_restJson1UpdateDeploymentCommand = exports.deserializeAws_restJson1UpdateClientCertificateCommand = exports.deserializeAws_restJson1UpdateBasePathMappingCommand = exports.deserializeAws_restJson1UpdateAuthorizerCommand = exports.deserializeAws_restJson1UpdateApiKeyCommand = exports.deserializeAws_restJson1UpdateAccountCommand = exports.deserializeAws_restJson1UntagResourceCommand = exports.deserializeAws_restJson1TestInvokeMethodCommand = exports.deserializeAws_restJson1TestInvokeAuthorizerCommand = exports.deserializeAws_restJson1TagResourceCommand = exports.deserializeAws_restJson1PutRestApiCommand = exports.deserializeAws_restJson1PutMethodResponseCommand = exports.deserializeAws_restJson1PutMethodCommand = exports.deserializeAws_restJson1PutIntegrationResponseCommand = exports.deserializeAws_restJson1PutIntegrationCommand = exports.deserializeAws_restJson1PutGatewayResponseCommand = exports.deserializeAws_restJson1ImportRestApiCommand = exports.deserializeAws_restJson1ImportDocumentationPartsCommand = exports.deserializeAws_restJson1ImportApiKeysCommand = exports.deserializeAws_restJson1GetVpcLinksCommand = exports.deserializeAws_restJson1GetVpcLinkCommand = exports.deserializeAws_restJson1GetUsagePlansCommand = exports.deserializeAws_restJson1GetUsagePlanKeysCommand = exports.deserializeAws_restJson1GetUsagePlanKeyCommand = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
const smithy_client_1 = require("@aws-sdk/smithy-client");
const APIGatewayServiceException_1 = require("../models/APIGatewayServiceException");
const models_0_1 = require("../models/models_0");
const serializeAws_restJson1CreateApiKeyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/apikeys";
    let body;
    body = JSON.stringify({
        ...(input.customerId != null && { customerId: input.customerId }),
        ...(input.description != null && { description: input.description }),
        ...(input.enabled != null && { enabled: input.enabled }),
        ...(input.generateDistinctId != null && { generateDistinctId: input.generateDistinctId }),
        ...(input.name != null && { name: input.name }),
        ...(input.stageKeys != null && { stageKeys: serializeAws_restJson1ListOfStageKeys(input.stageKeys, context) }),
        ...(input.tags != null && { tags: serializeAws_restJson1MapOfStringToString(input.tags, context) }),
        ...(input.value != null && { value: input.value }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateApiKeyCommand = serializeAws_restJson1CreateApiKeyCommand;
const serializeAws_restJson1CreateAuthorizerCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/authorizers";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    body = JSON.stringify({
        ...(input.authType != null && { authType: input.authType }),
        ...(input.authorizerCredentials != null && { authorizerCredentials: input.authorizerCredentials }),
        ...(input.authorizerResultTtlInSeconds != null && {
            authorizerResultTtlInSeconds: input.authorizerResultTtlInSeconds,
        }),
        ...(input.authorizerUri != null && { authorizerUri: input.authorizerUri }),
        ...(input.identitySource != null && { identitySource: input.identitySource }),
        ...(input.identityValidationExpression != null && {
            identityValidationExpression: input.identityValidationExpression,
        }),
        ...(input.name != null && { name: input.name }),
        ...(input.providerARNs != null && { providerARNs: serializeAws_restJson1ListOfARNs(input.providerARNs, context) }),
        ...(input.type != null && { type: input.type }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateAuthorizerCommand = serializeAws_restJson1CreateAuthorizerCommand;
const serializeAws_restJson1CreateBasePathMappingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/domainnames/{domainName}/basepathmappings";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "domainName", () => input.domainName, "{domainName}", false);
    let body;
    body = JSON.stringify({
        ...(input.basePath != null && { basePath: input.basePath }),
        ...(input.restApiId != null && { restApiId: input.restApiId }),
        ...(input.stage != null && { stage: input.stage }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateBasePathMappingCommand = serializeAws_restJson1CreateBasePathMappingCommand;
const serializeAws_restJson1CreateDeploymentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/deployments";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    body = JSON.stringify({
        ...(input.cacheClusterEnabled != null && { cacheClusterEnabled: input.cacheClusterEnabled }),
        ...(input.cacheClusterSize != null && { cacheClusterSize: input.cacheClusterSize }),
        ...(input.canarySettings != null && {
            canarySettings: serializeAws_restJson1DeploymentCanarySettings(input.canarySettings, context),
        }),
        ...(input.description != null && { description: input.description }),
        ...(input.stageDescription != null && { stageDescription: input.stageDescription }),
        ...(input.stageName != null && { stageName: input.stageName }),
        ...(input.tracingEnabled != null && { tracingEnabled: input.tracingEnabled }),
        ...(input.variables != null && { variables: serializeAws_restJson1MapOfStringToString(input.variables, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateDeploymentCommand = serializeAws_restJson1CreateDeploymentCommand;
const serializeAws_restJson1CreateDocumentationPartCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/documentation/parts";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    body = JSON.stringify({
        ...(input.location != null && {
            location: serializeAws_restJson1DocumentationPartLocation(input.location, context),
        }),
        ...(input.properties != null && { properties: input.properties }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateDocumentationPartCommand = serializeAws_restJson1CreateDocumentationPartCommand;
const serializeAws_restJson1CreateDocumentationVersionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/documentation/versions";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    body = JSON.stringify({
        ...(input.description != null && { description: input.description }),
        ...(input.documentationVersion != null && { documentationVersion: input.documentationVersion }),
        ...(input.stageName != null && { stageName: input.stageName }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateDocumentationVersionCommand = serializeAws_restJson1CreateDocumentationVersionCommand;
const serializeAws_restJson1CreateDomainNameCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/domainnames";
    let body;
    body = JSON.stringify({
        ...(input.certificateArn != null && { certificateArn: input.certificateArn }),
        ...(input.certificateBody != null && { certificateBody: input.certificateBody }),
        ...(input.certificateChain != null && { certificateChain: input.certificateChain }),
        ...(input.certificateName != null && { certificateName: input.certificateName }),
        ...(input.certificatePrivateKey != null && { certificatePrivateKey: input.certificatePrivateKey }),
        ...(input.domainName != null && { domainName: input.domainName }),
        ...(input.endpointConfiguration != null && {
            endpointConfiguration: serializeAws_restJson1EndpointConfiguration(input.endpointConfiguration, context),
        }),
        ...(input.mutualTlsAuthentication != null && {
            mutualTlsAuthentication: serializeAws_restJson1MutualTlsAuthenticationInput(input.mutualTlsAuthentication, context),
        }),
        ...(input.ownershipVerificationCertificateArn != null && {
            ownershipVerificationCertificateArn: input.ownershipVerificationCertificateArn,
        }),
        ...(input.regionalCertificateArn != null && { regionalCertificateArn: input.regionalCertificateArn }),
        ...(input.regionalCertificateName != null && { regionalCertificateName: input.regionalCertificateName }),
        ...(input.securityPolicy != null && { securityPolicy: input.securityPolicy }),
        ...(input.tags != null && { tags: serializeAws_restJson1MapOfStringToString(input.tags, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateDomainNameCommand = serializeAws_restJson1CreateDomainNameCommand;
const serializeAws_restJson1CreateModelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/models";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    body = JSON.stringify({
        ...(input.contentType != null && { contentType: input.contentType }),
        ...(input.description != null && { description: input.description }),
        ...(input.name != null && { name: input.name }),
        ...(input.schema != null && { schema: input.schema }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateModelCommand = serializeAws_restJson1CreateModelCommand;
const serializeAws_restJson1CreateRequestValidatorCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/requestvalidators";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    body = JSON.stringify({
        ...(input.name != null && { name: input.name }),
        ...(input.validateRequestBody != null && { validateRequestBody: input.validateRequestBody }),
        ...(input.validateRequestParameters != null && { validateRequestParameters: input.validateRequestParameters }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateRequestValidatorCommand = serializeAws_restJson1CreateRequestValidatorCommand;
const serializeAws_restJson1CreateResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{parentId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "parentId", () => input.parentId, "{parentId}", false);
    let body;
    body = JSON.stringify({
        ...(input.pathPart != null && { pathPart: input.pathPart }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateResourceCommand = serializeAws_restJson1CreateResourceCommand;
const serializeAws_restJson1CreateRestApiCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis";
    let body;
    body = JSON.stringify({
        ...(input.apiKeySource != null && { apiKeySource: input.apiKeySource }),
        ...(input.binaryMediaTypes != null && {
            binaryMediaTypes: serializeAws_restJson1ListOfString(input.binaryMediaTypes, context),
        }),
        ...(input.cloneFrom != null && { cloneFrom: input.cloneFrom }),
        ...(input.description != null && { description: input.description }),
        ...(input.disableExecuteApiEndpoint != null && { disableExecuteApiEndpoint: input.disableExecuteApiEndpoint }),
        ...(input.endpointConfiguration != null && {
            endpointConfiguration: serializeAws_restJson1EndpointConfiguration(input.endpointConfiguration, context),
        }),
        ...(input.minimumCompressionSize != null && { minimumCompressionSize: input.minimumCompressionSize }),
        ...(input.name != null && { name: input.name }),
        ...(input.policy != null && { policy: input.policy }),
        ...(input.tags != null && { tags: serializeAws_restJson1MapOfStringToString(input.tags, context) }),
        ...(input.version != null && { version: input.version }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateRestApiCommand = serializeAws_restJson1CreateRestApiCommand;
const serializeAws_restJson1CreateStageCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/stages";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    body = JSON.stringify({
        ...(input.cacheClusterEnabled != null && { cacheClusterEnabled: input.cacheClusterEnabled }),
        ...(input.cacheClusterSize != null && { cacheClusterSize: input.cacheClusterSize }),
        ...(input.canarySettings != null && {
            canarySettings: serializeAws_restJson1CanarySettings(input.canarySettings, context),
        }),
        ...(input.deploymentId != null && { deploymentId: input.deploymentId }),
        ...(input.description != null && { description: input.description }),
        ...(input.documentationVersion != null && { documentationVersion: input.documentationVersion }),
        ...(input.stageName != null && { stageName: input.stageName }),
        ...(input.tags != null && { tags: serializeAws_restJson1MapOfStringToString(input.tags, context) }),
        ...(input.tracingEnabled != null && { tracingEnabled: input.tracingEnabled }),
        ...(input.variables != null && { variables: serializeAws_restJson1MapOfStringToString(input.variables, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateStageCommand = serializeAws_restJson1CreateStageCommand;
const serializeAws_restJson1CreateUsagePlanCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/usageplans";
    let body;
    body = JSON.stringify({
        ...(input.apiStages != null && { apiStages: serializeAws_restJson1ListOfApiStage(input.apiStages, context) }),
        ...(input.description != null && { description: input.description }),
        ...(input.name != null && { name: input.name }),
        ...(input.quota != null && { quota: serializeAws_restJson1QuotaSettings(input.quota, context) }),
        ...(input.tags != null && { tags: serializeAws_restJson1MapOfStringToString(input.tags, context) }),
        ...(input.throttle != null && { throttle: serializeAws_restJson1ThrottleSettings(input.throttle, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateUsagePlanCommand = serializeAws_restJson1CreateUsagePlanCommand;
const serializeAws_restJson1CreateUsagePlanKeyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/usageplans/{usagePlanId}/keys";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "usagePlanId", () => input.usagePlanId, "{usagePlanId}", false);
    let body;
    body = JSON.stringify({
        ...(input.keyId != null && { keyId: input.keyId }),
        ...(input.keyType != null && { keyType: input.keyType }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateUsagePlanKeyCommand = serializeAws_restJson1CreateUsagePlanKeyCommand;
const serializeAws_restJson1CreateVpcLinkCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/vpclinks";
    let body;
    body = JSON.stringify({
        ...(input.description != null && { description: input.description }),
        ...(input.name != null && { name: input.name }),
        ...(input.tags != null && { tags: serializeAws_restJson1MapOfStringToString(input.tags, context) }),
        ...(input.targetArns != null && { targetArns: serializeAws_restJson1ListOfString(input.targetArns, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1CreateVpcLinkCommand = serializeAws_restJson1CreateVpcLinkCommand;
const serializeAws_restJson1DeleteApiKeyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/apikeys/{apiKey}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "apiKey", () => input.apiKey, "{apiKey}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteApiKeyCommand = serializeAws_restJson1DeleteApiKeyCommand;
const serializeAws_restJson1DeleteAuthorizerCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/authorizers/{authorizerId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "authorizerId", () => input.authorizerId, "{authorizerId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteAuthorizerCommand = serializeAws_restJson1DeleteAuthorizerCommand;
const serializeAws_restJson1DeleteBasePathMappingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/domainnames/{domainName}/basepathmappings/{basePath}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "domainName", () => input.domainName, "{domainName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "basePath", () => input.basePath, "{basePath}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteBasePathMappingCommand = serializeAws_restJson1DeleteBasePathMappingCommand;
const serializeAws_restJson1DeleteClientCertificateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/clientcertificates/{clientCertificateId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "clientCertificateId", () => input.clientCertificateId, "{clientCertificateId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteClientCertificateCommand = serializeAws_restJson1DeleteClientCertificateCommand;
const serializeAws_restJson1DeleteDeploymentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/deployments/{deploymentId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "deploymentId", () => input.deploymentId, "{deploymentId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteDeploymentCommand = serializeAws_restJson1DeleteDeploymentCommand;
const serializeAws_restJson1DeleteDocumentationPartCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/documentation/parts/{documentationPartId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "documentationPartId", () => input.documentationPartId, "{documentationPartId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteDocumentationPartCommand = serializeAws_restJson1DeleteDocumentationPartCommand;
const serializeAws_restJson1DeleteDocumentationVersionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/documentation/versions/{documentationVersion}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "documentationVersion", () => input.documentationVersion, "{documentationVersion}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteDocumentationVersionCommand = serializeAws_restJson1DeleteDocumentationVersionCommand;
const serializeAws_restJson1DeleteDomainNameCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/domainnames/{domainName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "domainName", () => input.domainName, "{domainName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteDomainNameCommand = serializeAws_restJson1DeleteDomainNameCommand;
const serializeAws_restJson1DeleteGatewayResponseCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/gatewayresponses/{responseType}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "responseType", () => input.responseType, "{responseType}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteGatewayResponseCommand = serializeAws_restJson1DeleteGatewayResponseCommand;
const serializeAws_restJson1DeleteIntegrationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/integration";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "httpMethod", () => input.httpMethod, "{httpMethod}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteIntegrationCommand = serializeAws_restJson1DeleteIntegrationCommand;
const serializeAws_restJson1DeleteIntegrationResponseCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/integration/responses/{statusCode}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "httpMethod", () => input.httpMethod, "{httpMethod}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "statusCode", () => input.statusCode, "{statusCode}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteIntegrationResponseCommand = serializeAws_restJson1DeleteIntegrationResponseCommand;
const serializeAws_restJson1DeleteMethodCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "httpMethod", () => input.httpMethod, "{httpMethod}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteMethodCommand = serializeAws_restJson1DeleteMethodCommand;
const serializeAws_restJson1DeleteMethodResponseCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/responses/{statusCode}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "httpMethod", () => input.httpMethod, "{httpMethod}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "statusCode", () => input.statusCode, "{statusCode}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteMethodResponseCommand = serializeAws_restJson1DeleteMethodResponseCommand;
const serializeAws_restJson1DeleteModelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/models/{modelName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "modelName", () => input.modelName, "{modelName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteModelCommand = serializeAws_restJson1DeleteModelCommand;
const serializeAws_restJson1DeleteRequestValidatorCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/requestvalidators/{requestValidatorId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "requestValidatorId", () => input.requestValidatorId, "{requestValidatorId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteRequestValidatorCommand = serializeAws_restJson1DeleteRequestValidatorCommand;
const serializeAws_restJson1DeleteResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteResourceCommand = serializeAws_restJson1DeleteResourceCommand;
const serializeAws_restJson1DeleteRestApiCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteRestApiCommand = serializeAws_restJson1DeleteRestApiCommand;
const serializeAws_restJson1DeleteStageCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/stages/{stageName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "stageName", () => input.stageName, "{stageName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteStageCommand = serializeAws_restJson1DeleteStageCommand;
const serializeAws_restJson1DeleteUsagePlanCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/usageplans/{usagePlanId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "usagePlanId", () => input.usagePlanId, "{usagePlanId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteUsagePlanCommand = serializeAws_restJson1DeleteUsagePlanCommand;
const serializeAws_restJson1DeleteUsagePlanKeyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/usageplans/{usagePlanId}/keys/{keyId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "usagePlanId", () => input.usagePlanId, "{usagePlanId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "keyId", () => input.keyId, "{keyId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteUsagePlanKeyCommand = serializeAws_restJson1DeleteUsagePlanKeyCommand;
const serializeAws_restJson1DeleteVpcLinkCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/vpclinks/{vpcLinkId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "vpcLinkId", () => input.vpcLinkId, "{vpcLinkId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1DeleteVpcLinkCommand = serializeAws_restJson1DeleteVpcLinkCommand;
const serializeAws_restJson1FlushStageAuthorizersCacheCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/stages/{stageName}/cache/authorizers";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "stageName", () => input.stageName, "{stageName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1FlushStageAuthorizersCacheCommand = serializeAws_restJson1FlushStageAuthorizersCacheCommand;
const serializeAws_restJson1FlushStageCacheCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/stages/{stageName}/cache/data";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "stageName", () => input.stageName, "{stageName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1FlushStageCacheCommand = serializeAws_restJson1FlushStageCacheCommand;
const serializeAws_restJson1GenerateClientCertificateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/clientcertificates";
    let body;
    body = JSON.stringify({
        ...(input.description != null && { description: input.description }),
        ...(input.tags != null && { tags: serializeAws_restJson1MapOfStringToString(input.tags, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GenerateClientCertificateCommand = serializeAws_restJson1GenerateClientCertificateCommand;
const serializeAws_restJson1GetAccountCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/account";
    let body;
    body = "";
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetAccountCommand = serializeAws_restJson1GetAccountCommand;
const serializeAws_restJson1GetApiKeyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/apikeys/{apiKey}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "apiKey", () => input.apiKey, "{apiKey}", false);
    const query = map({
        includeValue: [() => input.includeValue !== void 0, () => input.includeValue.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetApiKeyCommand = serializeAws_restJson1GetApiKeyCommand;
const serializeAws_restJson1GetApiKeysCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/apikeys";
    const query = map({
        position: [, input.position],
        limit: [() => input.limit !== void 0, () => input.limit.toString()],
        name: [, input.nameQuery],
        customerId: [, input.customerId],
        includeValues: [() => input.includeValues !== void 0, () => input.includeValues.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetApiKeysCommand = serializeAws_restJson1GetApiKeysCommand;
const serializeAws_restJson1GetAuthorizerCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/authorizers/{authorizerId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "authorizerId", () => input.authorizerId, "{authorizerId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetAuthorizerCommand = serializeAws_restJson1GetAuthorizerCommand;
const serializeAws_restJson1GetAuthorizersCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/authorizers";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    const query = map({
        position: [, input.position],
        limit: [() => input.limit !== void 0, () => input.limit.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetAuthorizersCommand = serializeAws_restJson1GetAuthorizersCommand;
const serializeAws_restJson1GetBasePathMappingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/domainnames/{domainName}/basepathmappings/{basePath}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "domainName", () => input.domainName, "{domainName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "basePath", () => input.basePath, "{basePath}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetBasePathMappingCommand = serializeAws_restJson1GetBasePathMappingCommand;
const serializeAws_restJson1GetBasePathMappingsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/domainnames/{domainName}/basepathmappings";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "domainName", () => input.domainName, "{domainName}", false);
    const query = map({
        position: [, input.position],
        limit: [() => input.limit !== void 0, () => input.limit.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetBasePathMappingsCommand = serializeAws_restJson1GetBasePathMappingsCommand;
const serializeAws_restJson1GetClientCertificateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/clientcertificates/{clientCertificateId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "clientCertificateId", () => input.clientCertificateId, "{clientCertificateId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetClientCertificateCommand = serializeAws_restJson1GetClientCertificateCommand;
const serializeAws_restJson1GetClientCertificatesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/clientcertificates";
    const query = map({
        position: [, input.position],
        limit: [() => input.limit !== void 0, () => input.limit.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetClientCertificatesCommand = serializeAws_restJson1GetClientCertificatesCommand;
const serializeAws_restJson1GetDeploymentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/deployments/{deploymentId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "deploymentId", () => input.deploymentId, "{deploymentId}", false);
    const query = map({
        embed: [() => input.embed !== void 0, () => (input.embed || []).map((_entry) => _entry)],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetDeploymentCommand = serializeAws_restJson1GetDeploymentCommand;
const serializeAws_restJson1GetDeploymentsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/deployments";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    const query = map({
        position: [, input.position],
        limit: [() => input.limit !== void 0, () => input.limit.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetDeploymentsCommand = serializeAws_restJson1GetDeploymentsCommand;
const serializeAws_restJson1GetDocumentationPartCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/documentation/parts/{documentationPartId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "documentationPartId", () => input.documentationPartId, "{documentationPartId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetDocumentationPartCommand = serializeAws_restJson1GetDocumentationPartCommand;
const serializeAws_restJson1GetDocumentationPartsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/documentation/parts";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    const query = map({
        type: [, input.type],
        name: [, input.nameQuery],
        path: [, input.path],
        position: [, input.position],
        limit: [() => input.limit !== void 0, () => input.limit.toString()],
        locationStatus: [, input.locationStatus],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetDocumentationPartsCommand = serializeAws_restJson1GetDocumentationPartsCommand;
const serializeAws_restJson1GetDocumentationVersionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/documentation/versions/{documentationVersion}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "documentationVersion", () => input.documentationVersion, "{documentationVersion}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetDocumentationVersionCommand = serializeAws_restJson1GetDocumentationVersionCommand;
const serializeAws_restJson1GetDocumentationVersionsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/documentation/versions";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    const query = map({
        position: [, input.position],
        limit: [() => input.limit !== void 0, () => input.limit.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetDocumentationVersionsCommand = serializeAws_restJson1GetDocumentationVersionsCommand;
const serializeAws_restJson1GetDomainNameCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/domainnames/{domainName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "domainName", () => input.domainName, "{domainName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetDomainNameCommand = serializeAws_restJson1GetDomainNameCommand;
const serializeAws_restJson1GetDomainNamesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/domainnames";
    const query = map({
        position: [, input.position],
        limit: [() => input.limit !== void 0, () => input.limit.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetDomainNamesCommand = serializeAws_restJson1GetDomainNamesCommand;
const serializeAws_restJson1GetExportCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = map({}, isSerializableHeaderValue, {
        accept: input.accepts,
    });
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/stages/{stageName}/exports/{exportType}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "stageName", () => input.stageName, "{stageName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "exportType", () => input.exportType, "{exportType}", false);
    const query = map({
        ...(0, smithy_client_1.convertMap)(input.parameters),
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetExportCommand = serializeAws_restJson1GetExportCommand;
const serializeAws_restJson1GetGatewayResponseCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/gatewayresponses/{responseType}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "responseType", () => input.responseType, "{responseType}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetGatewayResponseCommand = serializeAws_restJson1GetGatewayResponseCommand;
const serializeAws_restJson1GetGatewayResponsesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/gatewayresponses";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    const query = map({
        position: [, input.position],
        limit: [() => input.limit !== void 0, () => input.limit.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetGatewayResponsesCommand = serializeAws_restJson1GetGatewayResponsesCommand;
const serializeAws_restJson1GetIntegrationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/integration";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "httpMethod", () => input.httpMethod, "{httpMethod}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetIntegrationCommand = serializeAws_restJson1GetIntegrationCommand;
const serializeAws_restJson1GetIntegrationResponseCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/integration/responses/{statusCode}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "httpMethod", () => input.httpMethod, "{httpMethod}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "statusCode", () => input.statusCode, "{statusCode}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetIntegrationResponseCommand = serializeAws_restJson1GetIntegrationResponseCommand;
const serializeAws_restJson1GetMethodCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "httpMethod", () => input.httpMethod, "{httpMethod}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetMethodCommand = serializeAws_restJson1GetMethodCommand;
const serializeAws_restJson1GetMethodResponseCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/responses/{statusCode}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "httpMethod", () => input.httpMethod, "{httpMethod}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "statusCode", () => input.statusCode, "{statusCode}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetMethodResponseCommand = serializeAws_restJson1GetMethodResponseCommand;
const serializeAws_restJson1GetModelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/models/{modelName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "modelName", () => input.modelName, "{modelName}", false);
    const query = map({
        flatten: [() => input.flatten !== void 0, () => input.flatten.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetModelCommand = serializeAws_restJson1GetModelCommand;
const serializeAws_restJson1GetModelsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/models";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    const query = map({
        position: [, input.position],
        limit: [() => input.limit !== void 0, () => input.limit.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetModelsCommand = serializeAws_restJson1GetModelsCommand;
const serializeAws_restJson1GetModelTemplateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/models/{modelName}/default_template";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "modelName", () => input.modelName, "{modelName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetModelTemplateCommand = serializeAws_restJson1GetModelTemplateCommand;
const serializeAws_restJson1GetRequestValidatorCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/requestvalidators/{requestValidatorId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "requestValidatorId", () => input.requestValidatorId, "{requestValidatorId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetRequestValidatorCommand = serializeAws_restJson1GetRequestValidatorCommand;
const serializeAws_restJson1GetRequestValidatorsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/requestvalidators";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    const query = map({
        position: [, input.position],
        limit: [() => input.limit !== void 0, () => input.limit.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetRequestValidatorsCommand = serializeAws_restJson1GetRequestValidatorsCommand;
const serializeAws_restJson1GetResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    const query = map({
        embed: [() => input.embed !== void 0, () => (input.embed || []).map((_entry) => _entry)],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetResourceCommand = serializeAws_restJson1GetResourceCommand;
const serializeAws_restJson1GetResourcesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/resources";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    const query = map({
        position: [, input.position],
        limit: [() => input.limit !== void 0, () => input.limit.toString()],
        embed: [() => input.embed !== void 0, () => (input.embed || []).map((_entry) => _entry)],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetResourcesCommand = serializeAws_restJson1GetResourcesCommand;
const serializeAws_restJson1GetRestApiCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetRestApiCommand = serializeAws_restJson1GetRestApiCommand;
const serializeAws_restJson1GetRestApisCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis";
    const query = map({
        position: [, input.position],
        limit: [() => input.limit !== void 0, () => input.limit.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetRestApisCommand = serializeAws_restJson1GetRestApisCommand;
const serializeAws_restJson1GetSdkCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/stages/{stageName}/sdks/{sdkType}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "stageName", () => input.stageName, "{stageName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "sdkType", () => input.sdkType, "{sdkType}", false);
    const query = map({
        ...(0, smithy_client_1.convertMap)(input.parameters),
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetSdkCommand = serializeAws_restJson1GetSdkCommand;
const serializeAws_restJson1GetSdkTypeCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/sdktypes/{id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "id", () => input.id, "{id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetSdkTypeCommand = serializeAws_restJson1GetSdkTypeCommand;
const serializeAws_restJson1GetSdkTypesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/sdktypes";
    const query = map({
        position: [, input.position],
        limit: [() => input.limit !== void 0, () => input.limit.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetSdkTypesCommand = serializeAws_restJson1GetSdkTypesCommand;
const serializeAws_restJson1GetStageCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/stages/{stageName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "stageName", () => input.stageName, "{stageName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetStageCommand = serializeAws_restJson1GetStageCommand;
const serializeAws_restJson1GetStagesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/stages";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    const query = map({
        deploymentId: [, input.deploymentId],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetStagesCommand = serializeAws_restJson1GetStagesCommand;
const serializeAws_restJson1GetTagsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/tags/{resourceArn}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        position: [, input.position],
        limit: [() => input.limit !== void 0, () => input.limit.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetTagsCommand = serializeAws_restJson1GetTagsCommand;
const serializeAws_restJson1GetUsageCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/usageplans/{usagePlanId}/usage";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "usagePlanId", () => input.usagePlanId, "{usagePlanId}", false);
    const query = map({
        keyId: [, input.keyId],
        startDate: [, input.startDate],
        endDate: [, input.endDate],
        position: [, input.position],
        limit: [() => input.limit !== void 0, () => input.limit.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetUsageCommand = serializeAws_restJson1GetUsageCommand;
const serializeAws_restJson1GetUsagePlanCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/usageplans/{usagePlanId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "usagePlanId", () => input.usagePlanId, "{usagePlanId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetUsagePlanCommand = serializeAws_restJson1GetUsagePlanCommand;
const serializeAws_restJson1GetUsagePlanKeyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/usageplans/{usagePlanId}/keys/{keyId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "usagePlanId", () => input.usagePlanId, "{usagePlanId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "keyId", () => input.keyId, "{keyId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetUsagePlanKeyCommand = serializeAws_restJson1GetUsagePlanKeyCommand;
const serializeAws_restJson1GetUsagePlanKeysCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/usageplans/{usagePlanId}/keys";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "usagePlanId", () => input.usagePlanId, "{usagePlanId}", false);
    const query = map({
        position: [, input.position],
        limit: [() => input.limit !== void 0, () => input.limit.toString()],
        name: [, input.nameQuery],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetUsagePlanKeysCommand = serializeAws_restJson1GetUsagePlanKeysCommand;
const serializeAws_restJson1GetUsagePlansCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/usageplans";
    const query = map({
        position: [, input.position],
        keyId: [, input.keyId],
        limit: [() => input.limit !== void 0, () => input.limit.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetUsagePlansCommand = serializeAws_restJson1GetUsagePlansCommand;
const serializeAws_restJson1GetVpcLinkCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/vpclinks/{vpcLinkId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "vpcLinkId", () => input.vpcLinkId, "{vpcLinkId}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1GetVpcLinkCommand = serializeAws_restJson1GetVpcLinkCommand;
const serializeAws_restJson1GetVpcLinksCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/vpclinks";
    const query = map({
        position: [, input.position],
        limit: [() => input.limit !== void 0, () => input.limit.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1GetVpcLinksCommand = serializeAws_restJson1GetVpcLinksCommand;
const serializeAws_restJson1ImportApiKeysCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/octet-stream",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/apikeys";
    const query = map({
        mode: [, "import"],
        format: [, input.format],
        failonwarnings: [() => input.failOnWarnings !== void 0, () => input.failOnWarnings.toString()],
    });
    let body;
    if (input.body !== undefined) {
        body = input.body;
    }
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ImportApiKeysCommand = serializeAws_restJson1ImportApiKeysCommand;
const serializeAws_restJson1ImportDocumentationPartsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/octet-stream",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/documentation/parts";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    const query = map({
        mode: [, input.mode],
        failonwarnings: [() => input.failOnWarnings !== void 0, () => input.failOnWarnings.toString()],
    });
    let body;
    if (input.body !== undefined) {
        body = input.body;
    }
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ImportDocumentationPartsCommand = serializeAws_restJson1ImportDocumentationPartsCommand;
const serializeAws_restJson1ImportRestApiCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/octet-stream",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis";
    const query = map({
        mode: [, "import"],
        ...(0, smithy_client_1.convertMap)(input.parameters),
        failonwarnings: [() => input.failOnWarnings !== void 0, () => input.failOnWarnings.toString()],
    });
    let body;
    if (input.body !== undefined) {
        body = input.body;
    }
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1ImportRestApiCommand = serializeAws_restJson1ImportRestApiCommand;
const serializeAws_restJson1PutGatewayResponseCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/gatewayresponses/{responseType}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "responseType", () => input.responseType, "{responseType}", false);
    let body;
    body = JSON.stringify({
        ...(input.responseParameters != null && {
            responseParameters: serializeAws_restJson1MapOfStringToString(input.responseParameters, context),
        }),
        ...(input.responseTemplates != null && {
            responseTemplates: serializeAws_restJson1MapOfStringToString(input.responseTemplates, context),
        }),
        ...(input.statusCode != null && { statusCode: input.statusCode }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutGatewayResponseCommand = serializeAws_restJson1PutGatewayResponseCommand;
const serializeAws_restJson1PutIntegrationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/integration";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "httpMethod", () => input.httpMethod, "{httpMethod}", false);
    let body;
    body = JSON.stringify({
        ...(input.cacheKeyParameters != null && {
            cacheKeyParameters: serializeAws_restJson1ListOfString(input.cacheKeyParameters, context),
        }),
        ...(input.cacheNamespace != null && { cacheNamespace: input.cacheNamespace }),
        ...(input.connectionId != null && { connectionId: input.connectionId }),
        ...(input.connectionType != null && { connectionType: input.connectionType }),
        ...(input.contentHandling != null && { contentHandling: input.contentHandling }),
        ...(input.credentials != null && { credentials: input.credentials }),
        ...(input.integrationHttpMethod != null && { httpMethod: input.integrationHttpMethod }),
        ...(input.passthroughBehavior != null && { passthroughBehavior: input.passthroughBehavior }),
        ...(input.requestParameters != null && {
            requestParameters: serializeAws_restJson1MapOfStringToString(input.requestParameters, context),
        }),
        ...(input.requestTemplates != null && {
            requestTemplates: serializeAws_restJson1MapOfStringToString(input.requestTemplates, context),
        }),
        ...(input.timeoutInMillis != null && { timeoutInMillis: input.timeoutInMillis }),
        ...(input.tlsConfig != null && { tlsConfig: serializeAws_restJson1TlsConfig(input.tlsConfig, context) }),
        ...(input.type != null && { type: input.type }),
        ...(input.uri != null && { uri: input.uri }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutIntegrationCommand = serializeAws_restJson1PutIntegrationCommand;
const serializeAws_restJson1PutIntegrationResponseCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/integration/responses/{statusCode}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "httpMethod", () => input.httpMethod, "{httpMethod}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "statusCode", () => input.statusCode, "{statusCode}", false);
    let body;
    body = JSON.stringify({
        ...(input.contentHandling != null && { contentHandling: input.contentHandling }),
        ...(input.responseParameters != null && {
            responseParameters: serializeAws_restJson1MapOfStringToString(input.responseParameters, context),
        }),
        ...(input.responseTemplates != null && {
            responseTemplates: serializeAws_restJson1MapOfStringToString(input.responseTemplates, context),
        }),
        ...(input.selectionPattern != null && { selectionPattern: input.selectionPattern }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutIntegrationResponseCommand = serializeAws_restJson1PutIntegrationResponseCommand;
const serializeAws_restJson1PutMethodCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "httpMethod", () => input.httpMethod, "{httpMethod}", false);
    let body;
    body = JSON.stringify({
        ...(input.apiKeyRequired != null && { apiKeyRequired: input.apiKeyRequired }),
        ...(input.authorizationScopes != null && {
            authorizationScopes: serializeAws_restJson1ListOfString(input.authorizationScopes, context),
        }),
        ...(input.authorizationType != null && { authorizationType: input.authorizationType }),
        ...(input.authorizerId != null && { authorizerId: input.authorizerId }),
        ...(input.operationName != null && { operationName: input.operationName }),
        ...(input.requestModels != null && {
            requestModels: serializeAws_restJson1MapOfStringToString(input.requestModels, context),
        }),
        ...(input.requestParameters != null && {
            requestParameters: serializeAws_restJson1MapOfStringToBoolean(input.requestParameters, context),
        }),
        ...(input.requestValidatorId != null && { requestValidatorId: input.requestValidatorId }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutMethodCommand = serializeAws_restJson1PutMethodCommand;
const serializeAws_restJson1PutMethodResponseCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/responses/{statusCode}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "httpMethod", () => input.httpMethod, "{httpMethod}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "statusCode", () => input.statusCode, "{statusCode}", false);
    let body;
    body = JSON.stringify({
        ...(input.responseModels != null && {
            responseModels: serializeAws_restJson1MapOfStringToString(input.responseModels, context),
        }),
        ...(input.responseParameters != null && {
            responseParameters: serializeAws_restJson1MapOfStringToBoolean(input.responseParameters, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1PutMethodResponseCommand = serializeAws_restJson1PutMethodResponseCommand;
const serializeAws_restJson1PutRestApiCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/octet-stream",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    const query = map({
        ...(0, smithy_client_1.convertMap)(input.parameters),
        mode: [, input.mode],
        failonwarnings: [() => input.failOnWarnings !== void 0, () => input.failOnWarnings.toString()],
    });
    let body;
    if (input.body !== undefined) {
        body = input.body;
    }
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1PutRestApiCommand = serializeAws_restJson1PutRestApiCommand;
const serializeAws_restJson1TagResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/tags/{resourceArn}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify({
        ...(input.tags != null && { tags: serializeAws_restJson1MapOfStringToString(input.tags, context) }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1TagResourceCommand = serializeAws_restJson1TagResourceCommand;
const serializeAws_restJson1TestInvokeAuthorizerCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/authorizers/{authorizerId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "authorizerId", () => input.authorizerId, "{authorizerId}", false);
    let body;
    body = JSON.stringify({
        ...(input.additionalContext != null && {
            additionalContext: serializeAws_restJson1MapOfStringToString(input.additionalContext, context),
        }),
        ...(input.body != null && { body: input.body }),
        ...(input.headers != null && { headers: serializeAws_restJson1MapOfStringToString(input.headers, context) }),
        ...(input.multiValueHeaders != null && {
            multiValueHeaders: serializeAws_restJson1MapOfStringToList(input.multiValueHeaders, context),
        }),
        ...(input.pathWithQueryString != null && { pathWithQueryString: input.pathWithQueryString }),
        ...(input.stageVariables != null && {
            stageVariables: serializeAws_restJson1MapOfStringToString(input.stageVariables, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1TestInvokeAuthorizerCommand = serializeAws_restJson1TestInvokeAuthorizerCommand;
const serializeAws_restJson1TestInvokeMethodCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "httpMethod", () => input.httpMethod, "{httpMethod}", false);
    let body;
    body = JSON.stringify({
        ...(input.body != null && { body: input.body }),
        ...(input.clientCertificateId != null && { clientCertificateId: input.clientCertificateId }),
        ...(input.headers != null && { headers: serializeAws_restJson1MapOfStringToString(input.headers, context) }),
        ...(input.multiValueHeaders != null && {
            multiValueHeaders: serializeAws_restJson1MapOfStringToList(input.multiValueHeaders, context),
        }),
        ...(input.pathWithQueryString != null && { pathWithQueryString: input.pathWithQueryString }),
        ...(input.stageVariables != null && {
            stageVariables: serializeAws_restJson1MapOfStringToString(input.stageVariables, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1TestInvokeMethodCommand = serializeAws_restJson1TestInvokeMethodCommand;
const serializeAws_restJson1UntagResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/tags/{resourceArn}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        tagKeys: [() => input.tagKeys !== void 0, () => (input.tagKeys || []).map((_entry) => _entry)],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.serializeAws_restJson1UntagResourceCommand = serializeAws_restJson1UntagResourceCommand;
const serializeAws_restJson1UpdateAccountCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    const resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/account";
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateAccountCommand = serializeAws_restJson1UpdateAccountCommand;
const serializeAws_restJson1UpdateApiKeyCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/apikeys/{apiKey}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "apiKey", () => input.apiKey, "{apiKey}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateApiKeyCommand = serializeAws_restJson1UpdateApiKeyCommand;
const serializeAws_restJson1UpdateAuthorizerCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/authorizers/{authorizerId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "authorizerId", () => input.authorizerId, "{authorizerId}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateAuthorizerCommand = serializeAws_restJson1UpdateAuthorizerCommand;
const serializeAws_restJson1UpdateBasePathMappingCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/domainnames/{domainName}/basepathmappings/{basePath}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "domainName", () => input.domainName, "{domainName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "basePath", () => input.basePath, "{basePath}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateBasePathMappingCommand = serializeAws_restJson1UpdateBasePathMappingCommand;
const serializeAws_restJson1UpdateClientCertificateCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/clientcertificates/{clientCertificateId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "clientCertificateId", () => input.clientCertificateId, "{clientCertificateId}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateClientCertificateCommand = serializeAws_restJson1UpdateClientCertificateCommand;
const serializeAws_restJson1UpdateDeploymentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/deployments/{deploymentId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "deploymentId", () => input.deploymentId, "{deploymentId}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateDeploymentCommand = serializeAws_restJson1UpdateDeploymentCommand;
const serializeAws_restJson1UpdateDocumentationPartCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/documentation/parts/{documentationPartId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "documentationPartId", () => input.documentationPartId, "{documentationPartId}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateDocumentationPartCommand = serializeAws_restJson1UpdateDocumentationPartCommand;
const serializeAws_restJson1UpdateDocumentationVersionCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/documentation/versions/{documentationVersion}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "documentationVersion", () => input.documentationVersion, "{documentationVersion}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateDocumentationVersionCommand = serializeAws_restJson1UpdateDocumentationVersionCommand;
const serializeAws_restJson1UpdateDomainNameCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/domainnames/{domainName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "domainName", () => input.domainName, "{domainName}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateDomainNameCommand = serializeAws_restJson1UpdateDomainNameCommand;
const serializeAws_restJson1UpdateGatewayResponseCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/gatewayresponses/{responseType}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "responseType", () => input.responseType, "{responseType}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateGatewayResponseCommand = serializeAws_restJson1UpdateGatewayResponseCommand;
const serializeAws_restJson1UpdateIntegrationCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/integration";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "httpMethod", () => input.httpMethod, "{httpMethod}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateIntegrationCommand = serializeAws_restJson1UpdateIntegrationCommand;
const serializeAws_restJson1UpdateIntegrationResponseCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/integration/responses/{statusCode}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "httpMethod", () => input.httpMethod, "{httpMethod}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "statusCode", () => input.statusCode, "{statusCode}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateIntegrationResponseCommand = serializeAws_restJson1UpdateIntegrationResponseCommand;
const serializeAws_restJson1UpdateMethodCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "httpMethod", () => input.httpMethod, "{httpMethod}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateMethodCommand = serializeAws_restJson1UpdateMethodCommand;
const serializeAws_restJson1UpdateMethodResponseCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}/methods/{httpMethod}/responses/{statusCode}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "httpMethod", () => input.httpMethod, "{httpMethod}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "statusCode", () => input.statusCode, "{statusCode}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateMethodResponseCommand = serializeAws_restJson1UpdateMethodResponseCommand;
const serializeAws_restJson1UpdateModelCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/models/{modelName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "modelName", () => input.modelName, "{modelName}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateModelCommand = serializeAws_restJson1UpdateModelCommand;
const serializeAws_restJson1UpdateRequestValidatorCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/requestvalidators/{requestValidatorId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "requestValidatorId", () => input.requestValidatorId, "{requestValidatorId}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateRequestValidatorCommand = serializeAws_restJson1UpdateRequestValidatorCommand;
const serializeAws_restJson1UpdateResourceCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/restapis/{restApiId}/resources/{resourceId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "resourceId", () => input.resourceId, "{resourceId}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateResourceCommand = serializeAws_restJson1UpdateResourceCommand;
const serializeAws_restJson1UpdateRestApiCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateRestApiCommand = serializeAws_restJson1UpdateRestApiCommand;
const serializeAws_restJson1UpdateStageCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/restapis/{restApiId}/stages/{stageName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "restApiId", () => input.restApiId, "{restApiId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "stageName", () => input.stageName, "{stageName}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateStageCommand = serializeAws_restJson1UpdateStageCommand;
const serializeAws_restJson1UpdateUsageCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` +
        "/usageplans/{usagePlanId}/keys/{keyId}/usage";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "usagePlanId", () => input.usagePlanId, "{usagePlanId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "keyId", () => input.keyId, "{keyId}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateUsageCommand = serializeAws_restJson1UpdateUsageCommand;
const serializeAws_restJson1UpdateUsagePlanCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/usageplans/{usagePlanId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "usagePlanId", () => input.usagePlanId, "{usagePlanId}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateUsagePlanCommand = serializeAws_restJson1UpdateUsagePlanCommand;
const serializeAws_restJson1UpdateVpcLinkCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${(basePath === null || basePath === void 0 ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}` + "/vpclinks/{vpcLinkId}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "vpcLinkId", () => input.vpcLinkId, "{vpcLinkId}", false);
    let body;
    body = JSON.stringify({
        ...(input.patchOperations != null && {
            patchOperations: serializeAws_restJson1ListOfPatchOperation(input.patchOperations, context),
        }),
    });
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.serializeAws_restJson1UpdateVpcLinkCommand = serializeAws_restJson1UpdateVpcLinkCommand;
const deserializeAws_restJson1CreateApiKeyCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateApiKeyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.customerId != null) {
        contents.customerId = (0, smithy_client_1.expectString)(data.customerId);
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.enabled != null) {
        contents.enabled = (0, smithy_client_1.expectBoolean)(data.enabled);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.lastUpdatedDate != null) {
        contents.lastUpdatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.lastUpdatedDate)));
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.stageKeys != null) {
        contents.stageKeys = deserializeAws_restJson1ListOfString(data.stageKeys, context);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    if (data.value != null) {
        contents.value = (0, smithy_client_1.expectString)(data.value);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateApiKeyCommand = deserializeAws_restJson1CreateApiKeyCommand;
const deserializeAws_restJson1CreateApiKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateAuthorizerCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateAuthorizerCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.authType != null) {
        contents.authType = (0, smithy_client_1.expectString)(data.authType);
    }
    if (data.authorizerCredentials != null) {
        contents.authorizerCredentials = (0, smithy_client_1.expectString)(data.authorizerCredentials);
    }
    if (data.authorizerResultTtlInSeconds != null) {
        contents.authorizerResultTtlInSeconds = (0, smithy_client_1.expectInt32)(data.authorizerResultTtlInSeconds);
    }
    if (data.authorizerUri != null) {
        contents.authorizerUri = (0, smithy_client_1.expectString)(data.authorizerUri);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.identitySource != null) {
        contents.identitySource = (0, smithy_client_1.expectString)(data.identitySource);
    }
    if (data.identityValidationExpression != null) {
        contents.identityValidationExpression = (0, smithy_client_1.expectString)(data.identityValidationExpression);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.providerARNs != null) {
        contents.providerARNs = deserializeAws_restJson1ListOfARNs(data.providerARNs, context);
    }
    if (data.type != null) {
        contents.type = (0, smithy_client_1.expectString)(data.type);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateAuthorizerCommand = deserializeAws_restJson1CreateAuthorizerCommand;
const deserializeAws_restJson1CreateAuthorizerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateBasePathMappingCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateBasePathMappingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.basePath != null) {
        contents.basePath = (0, smithy_client_1.expectString)(data.basePath);
    }
    if (data.restApiId != null) {
        contents.restApiId = (0, smithy_client_1.expectString)(data.restApiId);
    }
    if (data.stage != null) {
        contents.stage = (0, smithy_client_1.expectString)(data.stage);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateBasePathMappingCommand = deserializeAws_restJson1CreateBasePathMappingCommand;
const deserializeAws_restJson1CreateBasePathMappingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateDeploymentCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.apiSummary != null) {
        contents.apiSummary = deserializeAws_restJson1PathToMapOfMethodSnapshot(data.apiSummary, context);
    }
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateDeploymentCommand = deserializeAws_restJson1CreateDeploymentCommand;
const deserializeAws_restJson1CreateDeploymentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.apigateway#ServiceUnavailableException":
            throw await deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateDocumentationPartCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateDocumentationPartCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.location != null) {
        contents.location = deserializeAws_restJson1DocumentationPartLocation(data.location, context);
    }
    if (data.properties != null) {
        contents.properties = (0, smithy_client_1.expectString)(data.properties);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateDocumentationPartCommand = deserializeAws_restJson1CreateDocumentationPartCommand;
const deserializeAws_restJson1CreateDocumentationPartCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateDocumentationVersionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateDocumentationVersionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.version != null) {
        contents.version = (0, smithy_client_1.expectString)(data.version);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateDocumentationVersionCommand = deserializeAws_restJson1CreateDocumentationVersionCommand;
const deserializeAws_restJson1CreateDocumentationVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateDomainNameCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateDomainNameCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.certificateArn != null) {
        contents.certificateArn = (0, smithy_client_1.expectString)(data.certificateArn);
    }
    if (data.certificateName != null) {
        contents.certificateName = (0, smithy_client_1.expectString)(data.certificateName);
    }
    if (data.certificateUploadDate != null) {
        contents.certificateUploadDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.certificateUploadDate)));
    }
    if (data.distributionDomainName != null) {
        contents.distributionDomainName = (0, smithy_client_1.expectString)(data.distributionDomainName);
    }
    if (data.distributionHostedZoneId != null) {
        contents.distributionHostedZoneId = (0, smithy_client_1.expectString)(data.distributionHostedZoneId);
    }
    if (data.domainName != null) {
        contents.domainName = (0, smithy_client_1.expectString)(data.domainName);
    }
    if (data.domainNameStatus != null) {
        contents.domainNameStatus = (0, smithy_client_1.expectString)(data.domainNameStatus);
    }
    if (data.domainNameStatusMessage != null) {
        contents.domainNameStatusMessage = (0, smithy_client_1.expectString)(data.domainNameStatusMessage);
    }
    if (data.endpointConfiguration != null) {
        contents.endpointConfiguration = deserializeAws_restJson1EndpointConfiguration(data.endpointConfiguration, context);
    }
    if (data.mutualTlsAuthentication != null) {
        contents.mutualTlsAuthentication = deserializeAws_restJson1MutualTlsAuthentication(data.mutualTlsAuthentication, context);
    }
    if (data.ownershipVerificationCertificateArn != null) {
        contents.ownershipVerificationCertificateArn = (0, smithy_client_1.expectString)(data.ownershipVerificationCertificateArn);
    }
    if (data.regionalCertificateArn != null) {
        contents.regionalCertificateArn = (0, smithy_client_1.expectString)(data.regionalCertificateArn);
    }
    if (data.regionalCertificateName != null) {
        contents.regionalCertificateName = (0, smithy_client_1.expectString)(data.regionalCertificateName);
    }
    if (data.regionalDomainName != null) {
        contents.regionalDomainName = (0, smithy_client_1.expectString)(data.regionalDomainName);
    }
    if (data.regionalHostedZoneId != null) {
        contents.regionalHostedZoneId = (0, smithy_client_1.expectString)(data.regionalHostedZoneId);
    }
    if (data.securityPolicy != null) {
        contents.securityPolicy = (0, smithy_client_1.expectString)(data.securityPolicy);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateDomainNameCommand = deserializeAws_restJson1CreateDomainNameCommand;
const deserializeAws_restJson1CreateDomainNameCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateModelCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateModelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.contentType != null) {
        contents.contentType = (0, smithy_client_1.expectString)(data.contentType);
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.schema != null) {
        contents.schema = (0, smithy_client_1.expectString)(data.schema);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateModelCommand = deserializeAws_restJson1CreateModelCommand;
const deserializeAws_restJson1CreateModelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateRequestValidatorCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateRequestValidatorCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.validateRequestBody != null) {
        contents.validateRequestBody = (0, smithy_client_1.expectBoolean)(data.validateRequestBody);
    }
    if (data.validateRequestParameters != null) {
        contents.validateRequestParameters = (0, smithy_client_1.expectBoolean)(data.validateRequestParameters);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateRequestValidatorCommand = deserializeAws_restJson1CreateRequestValidatorCommand;
const deserializeAws_restJson1CreateRequestValidatorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateResourceCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.parentId != null) {
        contents.parentId = (0, smithy_client_1.expectString)(data.parentId);
    }
    if (data.path != null) {
        contents.path = (0, smithy_client_1.expectString)(data.path);
    }
    if (data.pathPart != null) {
        contents.pathPart = (0, smithy_client_1.expectString)(data.pathPart);
    }
    if (data.resourceMethods != null) {
        contents.resourceMethods = deserializeAws_restJson1MapOfMethod(data.resourceMethods, context);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateResourceCommand = deserializeAws_restJson1CreateResourceCommand;
const deserializeAws_restJson1CreateResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateRestApiCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateRestApiCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.apiKeySource != null) {
        contents.apiKeySource = (0, smithy_client_1.expectString)(data.apiKeySource);
    }
    if (data.binaryMediaTypes != null) {
        contents.binaryMediaTypes = deserializeAws_restJson1ListOfString(data.binaryMediaTypes, context);
    }
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.disableExecuteApiEndpoint != null) {
        contents.disableExecuteApiEndpoint = (0, smithy_client_1.expectBoolean)(data.disableExecuteApiEndpoint);
    }
    if (data.endpointConfiguration != null) {
        contents.endpointConfiguration = deserializeAws_restJson1EndpointConfiguration(data.endpointConfiguration, context);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.minimumCompressionSize != null) {
        contents.minimumCompressionSize = (0, smithy_client_1.expectInt32)(data.minimumCompressionSize);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.policy != null) {
        contents.policy = (0, smithy_client_1.expectString)(data.policy);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    if (data.version != null) {
        contents.version = (0, smithy_client_1.expectString)(data.version);
    }
    if (data.warnings != null) {
        contents.warnings = deserializeAws_restJson1ListOfString(data.warnings, context);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateRestApiCommand = deserializeAws_restJson1CreateRestApiCommand;
const deserializeAws_restJson1CreateRestApiCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateStageCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateStageCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.accessLogSettings != null) {
        contents.accessLogSettings = deserializeAws_restJson1AccessLogSettings(data.accessLogSettings, context);
    }
    if (data.cacheClusterEnabled != null) {
        contents.cacheClusterEnabled = (0, smithy_client_1.expectBoolean)(data.cacheClusterEnabled);
    }
    if (data.cacheClusterSize != null) {
        contents.cacheClusterSize = (0, smithy_client_1.expectString)(data.cacheClusterSize);
    }
    if (data.cacheClusterStatus != null) {
        contents.cacheClusterStatus = (0, smithy_client_1.expectString)(data.cacheClusterStatus);
    }
    if (data.canarySettings != null) {
        contents.canarySettings = deserializeAws_restJson1CanarySettings(data.canarySettings, context);
    }
    if (data.clientCertificateId != null) {
        contents.clientCertificateId = (0, smithy_client_1.expectString)(data.clientCertificateId);
    }
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.deploymentId != null) {
        contents.deploymentId = (0, smithy_client_1.expectString)(data.deploymentId);
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.documentationVersion != null) {
        contents.documentationVersion = (0, smithy_client_1.expectString)(data.documentationVersion);
    }
    if (data.lastUpdatedDate != null) {
        contents.lastUpdatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.lastUpdatedDate)));
    }
    if (data.methodSettings != null) {
        contents.methodSettings = deserializeAws_restJson1MapOfMethodSettings(data.methodSettings, context);
    }
    if (data.stageName != null) {
        contents.stageName = (0, smithy_client_1.expectString)(data.stageName);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    if (data.tracingEnabled != null) {
        contents.tracingEnabled = (0, smithy_client_1.expectBoolean)(data.tracingEnabled);
    }
    if (data.variables != null) {
        contents.variables = deserializeAws_restJson1MapOfStringToString(data.variables, context);
    }
    if (data.webAclArn != null) {
        contents.webAclArn = (0, smithy_client_1.expectString)(data.webAclArn);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateStageCommand = deserializeAws_restJson1CreateStageCommand;
const deserializeAws_restJson1CreateStageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateUsagePlanCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateUsagePlanCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.apiStages != null) {
        contents.apiStages = deserializeAws_restJson1ListOfApiStage(data.apiStages, context);
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.productCode != null) {
        contents.productCode = (0, smithy_client_1.expectString)(data.productCode);
    }
    if (data.quota != null) {
        contents.quota = deserializeAws_restJson1QuotaSettings(data.quota, context);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    if (data.throttle != null) {
        contents.throttle = deserializeAws_restJson1ThrottleSettings(data.throttle, context);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateUsagePlanCommand = deserializeAws_restJson1CreateUsagePlanCommand;
const deserializeAws_restJson1CreateUsagePlanCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateUsagePlanKeyCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateUsagePlanKeyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.type != null) {
        contents.type = (0, smithy_client_1.expectString)(data.type);
    }
    if (data.value != null) {
        contents.value = (0, smithy_client_1.expectString)(data.value);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateUsagePlanKeyCommand = deserializeAws_restJson1CreateUsagePlanKeyCommand;
const deserializeAws_restJson1CreateUsagePlanKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1CreateVpcLinkCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateVpcLinkCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.status != null) {
        contents.status = (0, smithy_client_1.expectString)(data.status);
    }
    if (data.statusMessage != null) {
        contents.statusMessage = (0, smithy_client_1.expectString)(data.statusMessage);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    if (data.targetArns != null) {
        contents.targetArns = deserializeAws_restJson1ListOfString(data.targetArns, context);
    }
    return contents;
};
exports.deserializeAws_restJson1CreateVpcLinkCommand = deserializeAws_restJson1CreateVpcLinkCommand;
const deserializeAws_restJson1CreateVpcLinkCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteApiKeyCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteApiKeyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteApiKeyCommand = deserializeAws_restJson1DeleteApiKeyCommand;
const deserializeAws_restJson1DeleteApiKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteAuthorizerCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteAuthorizerCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteAuthorizerCommand = deserializeAws_restJson1DeleteAuthorizerCommand;
const deserializeAws_restJson1DeleteAuthorizerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteBasePathMappingCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteBasePathMappingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteBasePathMappingCommand = deserializeAws_restJson1DeleteBasePathMappingCommand;
const deserializeAws_restJson1DeleteBasePathMappingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteClientCertificateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteClientCertificateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteClientCertificateCommand = deserializeAws_restJson1DeleteClientCertificateCommand;
const deserializeAws_restJson1DeleteClientCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteDeploymentCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteDeploymentCommand = deserializeAws_restJson1DeleteDeploymentCommand;
const deserializeAws_restJson1DeleteDeploymentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteDocumentationPartCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteDocumentationPartCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteDocumentationPartCommand = deserializeAws_restJson1DeleteDocumentationPartCommand;
const deserializeAws_restJson1DeleteDocumentationPartCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteDocumentationVersionCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteDocumentationVersionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteDocumentationVersionCommand = deserializeAws_restJson1DeleteDocumentationVersionCommand;
const deserializeAws_restJson1DeleteDocumentationVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteDomainNameCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteDomainNameCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteDomainNameCommand = deserializeAws_restJson1DeleteDomainNameCommand;
const deserializeAws_restJson1DeleteDomainNameCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteGatewayResponseCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteGatewayResponseCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteGatewayResponseCommand = deserializeAws_restJson1DeleteGatewayResponseCommand;
const deserializeAws_restJson1DeleteGatewayResponseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteIntegrationCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteIntegrationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteIntegrationCommand = deserializeAws_restJson1DeleteIntegrationCommand;
const deserializeAws_restJson1DeleteIntegrationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteIntegrationResponseCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteIntegrationResponseCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteIntegrationResponseCommand = deserializeAws_restJson1DeleteIntegrationResponseCommand;
const deserializeAws_restJson1DeleteIntegrationResponseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteMethodCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteMethodCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteMethodCommand = deserializeAws_restJson1DeleteMethodCommand;
const deserializeAws_restJson1DeleteMethodCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteMethodResponseCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteMethodResponseCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteMethodResponseCommand = deserializeAws_restJson1DeleteMethodResponseCommand;
const deserializeAws_restJson1DeleteMethodResponseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteModelCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteModelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteModelCommand = deserializeAws_restJson1DeleteModelCommand;
const deserializeAws_restJson1DeleteModelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteRequestValidatorCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteRequestValidatorCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteRequestValidatorCommand = deserializeAws_restJson1DeleteRequestValidatorCommand;
const deserializeAws_restJson1DeleteRequestValidatorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteResourceCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteResourceCommand = deserializeAws_restJson1DeleteResourceCommand;
const deserializeAws_restJson1DeleteResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteRestApiCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteRestApiCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteRestApiCommand = deserializeAws_restJson1DeleteRestApiCommand;
const deserializeAws_restJson1DeleteRestApiCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteStageCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteStageCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteStageCommand = deserializeAws_restJson1DeleteStageCommand;
const deserializeAws_restJson1DeleteStageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteUsagePlanCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteUsagePlanCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteUsagePlanCommand = deserializeAws_restJson1DeleteUsagePlanCommand;
const deserializeAws_restJson1DeleteUsagePlanCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteUsagePlanKeyCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteUsagePlanKeyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteUsagePlanKeyCommand = deserializeAws_restJson1DeleteUsagePlanKeyCommand;
const deserializeAws_restJson1DeleteUsagePlanKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1DeleteVpcLinkCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1DeleteVpcLinkCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1DeleteVpcLinkCommand = deserializeAws_restJson1DeleteVpcLinkCommand;
const deserializeAws_restJson1DeleteVpcLinkCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1FlushStageAuthorizersCacheCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1FlushStageAuthorizersCacheCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1FlushStageAuthorizersCacheCommand = deserializeAws_restJson1FlushStageAuthorizersCacheCommand;
const deserializeAws_restJson1FlushStageAuthorizersCacheCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1FlushStageCacheCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return deserializeAws_restJson1FlushStageCacheCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1FlushStageCacheCommand = deserializeAws_restJson1FlushStageCacheCommand;
const deserializeAws_restJson1FlushStageCacheCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GenerateClientCertificateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1GenerateClientCertificateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.clientCertificateId != null) {
        contents.clientCertificateId = (0, smithy_client_1.expectString)(data.clientCertificateId);
    }
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.expirationDate != null) {
        contents.expirationDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.expirationDate)));
    }
    if (data.pemEncodedCertificate != null) {
        contents.pemEncodedCertificate = (0, smithy_client_1.expectString)(data.pemEncodedCertificate);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GenerateClientCertificateCommand = deserializeAws_restJson1GenerateClientCertificateCommand;
const deserializeAws_restJson1GenerateClientCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetAccountCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.apiKeyVersion != null) {
        contents.apiKeyVersion = (0, smithy_client_1.expectString)(data.apiKeyVersion);
    }
    if (data.cloudwatchRoleArn != null) {
        contents.cloudwatchRoleArn = (0, smithy_client_1.expectString)(data.cloudwatchRoleArn);
    }
    if (data.features != null) {
        contents.features = deserializeAws_restJson1ListOfString(data.features, context);
    }
    if (data.throttleSettings != null) {
        contents.throttleSettings = deserializeAws_restJson1ThrottleSettings(data.throttleSettings, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetAccountCommand = deserializeAws_restJson1GetAccountCommand;
const deserializeAws_restJson1GetAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetApiKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetApiKeyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.customerId != null) {
        contents.customerId = (0, smithy_client_1.expectString)(data.customerId);
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.enabled != null) {
        contents.enabled = (0, smithy_client_1.expectBoolean)(data.enabled);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.lastUpdatedDate != null) {
        contents.lastUpdatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.lastUpdatedDate)));
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.stageKeys != null) {
        contents.stageKeys = deserializeAws_restJson1ListOfString(data.stageKeys, context);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    if (data.value != null) {
        contents.value = (0, smithy_client_1.expectString)(data.value);
    }
    return contents;
};
exports.deserializeAws_restJson1GetApiKeyCommand = deserializeAws_restJson1GetApiKeyCommand;
const deserializeAws_restJson1GetApiKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetApiKeysCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetApiKeysCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.item != null) {
        contents.items = deserializeAws_restJson1ListOfApiKey(data.item, context);
    }
    if (data.position != null) {
        contents.position = (0, smithy_client_1.expectString)(data.position);
    }
    if (data.warnings != null) {
        contents.warnings = deserializeAws_restJson1ListOfString(data.warnings, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetApiKeysCommand = deserializeAws_restJson1GetApiKeysCommand;
const deserializeAws_restJson1GetApiKeysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetAuthorizerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetAuthorizerCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.authType != null) {
        contents.authType = (0, smithy_client_1.expectString)(data.authType);
    }
    if (data.authorizerCredentials != null) {
        contents.authorizerCredentials = (0, smithy_client_1.expectString)(data.authorizerCredentials);
    }
    if (data.authorizerResultTtlInSeconds != null) {
        contents.authorizerResultTtlInSeconds = (0, smithy_client_1.expectInt32)(data.authorizerResultTtlInSeconds);
    }
    if (data.authorizerUri != null) {
        contents.authorizerUri = (0, smithy_client_1.expectString)(data.authorizerUri);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.identitySource != null) {
        contents.identitySource = (0, smithy_client_1.expectString)(data.identitySource);
    }
    if (data.identityValidationExpression != null) {
        contents.identityValidationExpression = (0, smithy_client_1.expectString)(data.identityValidationExpression);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.providerARNs != null) {
        contents.providerARNs = deserializeAws_restJson1ListOfARNs(data.providerARNs, context);
    }
    if (data.type != null) {
        contents.type = (0, smithy_client_1.expectString)(data.type);
    }
    return contents;
};
exports.deserializeAws_restJson1GetAuthorizerCommand = deserializeAws_restJson1GetAuthorizerCommand;
const deserializeAws_restJson1GetAuthorizerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetAuthorizersCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetAuthorizersCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.item != null) {
        contents.items = deserializeAws_restJson1ListOfAuthorizer(data.item, context);
    }
    if (data.position != null) {
        contents.position = (0, smithy_client_1.expectString)(data.position);
    }
    return contents;
};
exports.deserializeAws_restJson1GetAuthorizersCommand = deserializeAws_restJson1GetAuthorizersCommand;
const deserializeAws_restJson1GetAuthorizersCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetBasePathMappingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetBasePathMappingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.basePath != null) {
        contents.basePath = (0, smithy_client_1.expectString)(data.basePath);
    }
    if (data.restApiId != null) {
        contents.restApiId = (0, smithy_client_1.expectString)(data.restApiId);
    }
    if (data.stage != null) {
        contents.stage = (0, smithy_client_1.expectString)(data.stage);
    }
    return contents;
};
exports.deserializeAws_restJson1GetBasePathMappingCommand = deserializeAws_restJson1GetBasePathMappingCommand;
const deserializeAws_restJson1GetBasePathMappingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetBasePathMappingsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetBasePathMappingsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.item != null) {
        contents.items = deserializeAws_restJson1ListOfBasePathMapping(data.item, context);
    }
    if (data.position != null) {
        contents.position = (0, smithy_client_1.expectString)(data.position);
    }
    return contents;
};
exports.deserializeAws_restJson1GetBasePathMappingsCommand = deserializeAws_restJson1GetBasePathMappingsCommand;
const deserializeAws_restJson1GetBasePathMappingsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetClientCertificateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetClientCertificateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.clientCertificateId != null) {
        contents.clientCertificateId = (0, smithy_client_1.expectString)(data.clientCertificateId);
    }
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.expirationDate != null) {
        contents.expirationDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.expirationDate)));
    }
    if (data.pemEncodedCertificate != null) {
        contents.pemEncodedCertificate = (0, smithy_client_1.expectString)(data.pemEncodedCertificate);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetClientCertificateCommand = deserializeAws_restJson1GetClientCertificateCommand;
const deserializeAws_restJson1GetClientCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetClientCertificatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetClientCertificatesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.item != null) {
        contents.items = deserializeAws_restJson1ListOfClientCertificate(data.item, context);
    }
    if (data.position != null) {
        contents.position = (0, smithy_client_1.expectString)(data.position);
    }
    return contents;
};
exports.deserializeAws_restJson1GetClientCertificatesCommand = deserializeAws_restJson1GetClientCertificatesCommand;
const deserializeAws_restJson1GetClientCertificatesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetDeploymentCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.apiSummary != null) {
        contents.apiSummary = deserializeAws_restJson1PathToMapOfMethodSnapshot(data.apiSummary, context);
    }
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    return contents;
};
exports.deserializeAws_restJson1GetDeploymentCommand = deserializeAws_restJson1GetDeploymentCommand;
const deserializeAws_restJson1GetDeploymentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.apigateway#ServiceUnavailableException":
            throw await deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetDeploymentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetDeploymentsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.item != null) {
        contents.items = deserializeAws_restJson1ListOfDeployment(data.item, context);
    }
    if (data.position != null) {
        contents.position = (0, smithy_client_1.expectString)(data.position);
    }
    return contents;
};
exports.deserializeAws_restJson1GetDeploymentsCommand = deserializeAws_restJson1GetDeploymentsCommand;
const deserializeAws_restJson1GetDeploymentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.apigateway#ServiceUnavailableException":
            throw await deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetDocumentationPartCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetDocumentationPartCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.location != null) {
        contents.location = deserializeAws_restJson1DocumentationPartLocation(data.location, context);
    }
    if (data.properties != null) {
        contents.properties = (0, smithy_client_1.expectString)(data.properties);
    }
    return contents;
};
exports.deserializeAws_restJson1GetDocumentationPartCommand = deserializeAws_restJson1GetDocumentationPartCommand;
const deserializeAws_restJson1GetDocumentationPartCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetDocumentationPartsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetDocumentationPartsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.item != null) {
        contents.items = deserializeAws_restJson1ListOfDocumentationPart(data.item, context);
    }
    if (data.position != null) {
        contents.position = (0, smithy_client_1.expectString)(data.position);
    }
    return contents;
};
exports.deserializeAws_restJson1GetDocumentationPartsCommand = deserializeAws_restJson1GetDocumentationPartsCommand;
const deserializeAws_restJson1GetDocumentationPartsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetDocumentationVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetDocumentationVersionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.version != null) {
        contents.version = (0, smithy_client_1.expectString)(data.version);
    }
    return contents;
};
exports.deserializeAws_restJson1GetDocumentationVersionCommand = deserializeAws_restJson1GetDocumentationVersionCommand;
const deserializeAws_restJson1GetDocumentationVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetDocumentationVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetDocumentationVersionsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.item != null) {
        contents.items = deserializeAws_restJson1ListOfDocumentationVersion(data.item, context);
    }
    if (data.position != null) {
        contents.position = (0, smithy_client_1.expectString)(data.position);
    }
    return contents;
};
exports.deserializeAws_restJson1GetDocumentationVersionsCommand = deserializeAws_restJson1GetDocumentationVersionsCommand;
const deserializeAws_restJson1GetDocumentationVersionsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetDomainNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetDomainNameCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.certificateArn != null) {
        contents.certificateArn = (0, smithy_client_1.expectString)(data.certificateArn);
    }
    if (data.certificateName != null) {
        contents.certificateName = (0, smithy_client_1.expectString)(data.certificateName);
    }
    if (data.certificateUploadDate != null) {
        contents.certificateUploadDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.certificateUploadDate)));
    }
    if (data.distributionDomainName != null) {
        contents.distributionDomainName = (0, smithy_client_1.expectString)(data.distributionDomainName);
    }
    if (data.distributionHostedZoneId != null) {
        contents.distributionHostedZoneId = (0, smithy_client_1.expectString)(data.distributionHostedZoneId);
    }
    if (data.domainName != null) {
        contents.domainName = (0, smithy_client_1.expectString)(data.domainName);
    }
    if (data.domainNameStatus != null) {
        contents.domainNameStatus = (0, smithy_client_1.expectString)(data.domainNameStatus);
    }
    if (data.domainNameStatusMessage != null) {
        contents.domainNameStatusMessage = (0, smithy_client_1.expectString)(data.domainNameStatusMessage);
    }
    if (data.endpointConfiguration != null) {
        contents.endpointConfiguration = deserializeAws_restJson1EndpointConfiguration(data.endpointConfiguration, context);
    }
    if (data.mutualTlsAuthentication != null) {
        contents.mutualTlsAuthentication = deserializeAws_restJson1MutualTlsAuthentication(data.mutualTlsAuthentication, context);
    }
    if (data.ownershipVerificationCertificateArn != null) {
        contents.ownershipVerificationCertificateArn = (0, smithy_client_1.expectString)(data.ownershipVerificationCertificateArn);
    }
    if (data.regionalCertificateArn != null) {
        contents.regionalCertificateArn = (0, smithy_client_1.expectString)(data.regionalCertificateArn);
    }
    if (data.regionalCertificateName != null) {
        contents.regionalCertificateName = (0, smithy_client_1.expectString)(data.regionalCertificateName);
    }
    if (data.regionalDomainName != null) {
        contents.regionalDomainName = (0, smithy_client_1.expectString)(data.regionalDomainName);
    }
    if (data.regionalHostedZoneId != null) {
        contents.regionalHostedZoneId = (0, smithy_client_1.expectString)(data.regionalHostedZoneId);
    }
    if (data.securityPolicy != null) {
        contents.securityPolicy = (0, smithy_client_1.expectString)(data.securityPolicy);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetDomainNameCommand = deserializeAws_restJson1GetDomainNameCommand;
const deserializeAws_restJson1GetDomainNameCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetDomainNamesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetDomainNamesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.item != null) {
        contents.items = deserializeAws_restJson1ListOfDomainName(data.item, context);
    }
    if (data.position != null) {
        contents.position = (0, smithy_client_1.expectString)(data.position);
    }
    return contents;
};
exports.deserializeAws_restJson1GetDomainNamesCommand = deserializeAws_restJson1GetDomainNamesCommand;
const deserializeAws_restJson1GetDomainNamesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetExportCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetExportCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        contentType: [, output.headers["content-type"]],
        contentDisposition: [, output.headers["content-disposition"]],
    });
    const data = await collectBody(output.body, context);
    contents.body = data;
    return contents;
};
exports.deserializeAws_restJson1GetExportCommand = deserializeAws_restJson1GetExportCommand;
const deserializeAws_restJson1GetExportCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetGatewayResponseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetGatewayResponseCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.defaultResponse != null) {
        contents.defaultResponse = (0, smithy_client_1.expectBoolean)(data.defaultResponse);
    }
    if (data.responseParameters != null) {
        contents.responseParameters = deserializeAws_restJson1MapOfStringToString(data.responseParameters, context);
    }
    if (data.responseTemplates != null) {
        contents.responseTemplates = deserializeAws_restJson1MapOfStringToString(data.responseTemplates, context);
    }
    if (data.responseType != null) {
        contents.responseType = (0, smithy_client_1.expectString)(data.responseType);
    }
    if (data.statusCode != null) {
        contents.statusCode = (0, smithy_client_1.expectString)(data.statusCode);
    }
    return contents;
};
exports.deserializeAws_restJson1GetGatewayResponseCommand = deserializeAws_restJson1GetGatewayResponseCommand;
const deserializeAws_restJson1GetGatewayResponseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetGatewayResponsesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetGatewayResponsesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.item != null) {
        contents.items = deserializeAws_restJson1ListOfGatewayResponse(data.item, context);
    }
    if (data.position != null) {
        contents.position = (0, smithy_client_1.expectString)(data.position);
    }
    return contents;
};
exports.deserializeAws_restJson1GetGatewayResponsesCommand = deserializeAws_restJson1GetGatewayResponsesCommand;
const deserializeAws_restJson1GetGatewayResponsesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetIntegrationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetIntegrationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.cacheKeyParameters != null) {
        contents.cacheKeyParameters = deserializeAws_restJson1ListOfString(data.cacheKeyParameters, context);
    }
    if (data.cacheNamespace != null) {
        contents.cacheNamespace = (0, smithy_client_1.expectString)(data.cacheNamespace);
    }
    if (data.connectionId != null) {
        contents.connectionId = (0, smithy_client_1.expectString)(data.connectionId);
    }
    if (data.connectionType != null) {
        contents.connectionType = (0, smithy_client_1.expectString)(data.connectionType);
    }
    if (data.contentHandling != null) {
        contents.contentHandling = (0, smithy_client_1.expectString)(data.contentHandling);
    }
    if (data.credentials != null) {
        contents.credentials = (0, smithy_client_1.expectString)(data.credentials);
    }
    if (data.httpMethod != null) {
        contents.httpMethod = (0, smithy_client_1.expectString)(data.httpMethod);
    }
    if (data.integrationResponses != null) {
        contents.integrationResponses = deserializeAws_restJson1MapOfIntegrationResponse(data.integrationResponses, context);
    }
    if (data.passthroughBehavior != null) {
        contents.passthroughBehavior = (0, smithy_client_1.expectString)(data.passthroughBehavior);
    }
    if (data.requestParameters != null) {
        contents.requestParameters = deserializeAws_restJson1MapOfStringToString(data.requestParameters, context);
    }
    if (data.requestTemplates != null) {
        contents.requestTemplates = deserializeAws_restJson1MapOfStringToString(data.requestTemplates, context);
    }
    if (data.timeoutInMillis != null) {
        contents.timeoutInMillis = (0, smithy_client_1.expectInt32)(data.timeoutInMillis);
    }
    if (data.tlsConfig != null) {
        contents.tlsConfig = deserializeAws_restJson1TlsConfig(data.tlsConfig, context);
    }
    if (data.type != null) {
        contents.type = (0, smithy_client_1.expectString)(data.type);
    }
    if (data.uri != null) {
        contents.uri = (0, smithy_client_1.expectString)(data.uri);
    }
    return contents;
};
exports.deserializeAws_restJson1GetIntegrationCommand = deserializeAws_restJson1GetIntegrationCommand;
const deserializeAws_restJson1GetIntegrationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetIntegrationResponseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetIntegrationResponseCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.contentHandling != null) {
        contents.contentHandling = (0, smithy_client_1.expectString)(data.contentHandling);
    }
    if (data.responseParameters != null) {
        contents.responseParameters = deserializeAws_restJson1MapOfStringToString(data.responseParameters, context);
    }
    if (data.responseTemplates != null) {
        contents.responseTemplates = deserializeAws_restJson1MapOfStringToString(data.responseTemplates, context);
    }
    if (data.selectionPattern != null) {
        contents.selectionPattern = (0, smithy_client_1.expectString)(data.selectionPattern);
    }
    if (data.statusCode != null) {
        contents.statusCode = (0, smithy_client_1.expectString)(data.statusCode);
    }
    return contents;
};
exports.deserializeAws_restJson1GetIntegrationResponseCommand = deserializeAws_restJson1GetIntegrationResponseCommand;
const deserializeAws_restJson1GetIntegrationResponseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetMethodCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetMethodCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.apiKeyRequired != null) {
        contents.apiKeyRequired = (0, smithy_client_1.expectBoolean)(data.apiKeyRequired);
    }
    if (data.authorizationScopes != null) {
        contents.authorizationScopes = deserializeAws_restJson1ListOfString(data.authorizationScopes, context);
    }
    if (data.authorizationType != null) {
        contents.authorizationType = (0, smithy_client_1.expectString)(data.authorizationType);
    }
    if (data.authorizerId != null) {
        contents.authorizerId = (0, smithy_client_1.expectString)(data.authorizerId);
    }
    if (data.httpMethod != null) {
        contents.httpMethod = (0, smithy_client_1.expectString)(data.httpMethod);
    }
    if (data.methodIntegration != null) {
        contents.methodIntegration = deserializeAws_restJson1Integration(data.methodIntegration, context);
    }
    if (data.methodResponses != null) {
        contents.methodResponses = deserializeAws_restJson1MapOfMethodResponse(data.methodResponses, context);
    }
    if (data.operationName != null) {
        contents.operationName = (0, smithy_client_1.expectString)(data.operationName);
    }
    if (data.requestModels != null) {
        contents.requestModels = deserializeAws_restJson1MapOfStringToString(data.requestModels, context);
    }
    if (data.requestParameters != null) {
        contents.requestParameters = deserializeAws_restJson1MapOfStringToBoolean(data.requestParameters, context);
    }
    if (data.requestValidatorId != null) {
        contents.requestValidatorId = (0, smithy_client_1.expectString)(data.requestValidatorId);
    }
    return contents;
};
exports.deserializeAws_restJson1GetMethodCommand = deserializeAws_restJson1GetMethodCommand;
const deserializeAws_restJson1GetMethodCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetMethodResponseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetMethodResponseCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.responseModels != null) {
        contents.responseModels = deserializeAws_restJson1MapOfStringToString(data.responseModels, context);
    }
    if (data.responseParameters != null) {
        contents.responseParameters = deserializeAws_restJson1MapOfStringToBoolean(data.responseParameters, context);
    }
    if (data.statusCode != null) {
        contents.statusCode = (0, smithy_client_1.expectString)(data.statusCode);
    }
    return contents;
};
exports.deserializeAws_restJson1GetMethodResponseCommand = deserializeAws_restJson1GetMethodResponseCommand;
const deserializeAws_restJson1GetMethodResponseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetModelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetModelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.contentType != null) {
        contents.contentType = (0, smithy_client_1.expectString)(data.contentType);
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.schema != null) {
        contents.schema = (0, smithy_client_1.expectString)(data.schema);
    }
    return contents;
};
exports.deserializeAws_restJson1GetModelCommand = deserializeAws_restJson1GetModelCommand;
const deserializeAws_restJson1GetModelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetModelsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetModelsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.item != null) {
        contents.items = deserializeAws_restJson1ListOfModel(data.item, context);
    }
    if (data.position != null) {
        contents.position = (0, smithy_client_1.expectString)(data.position);
    }
    return contents;
};
exports.deserializeAws_restJson1GetModelsCommand = deserializeAws_restJson1GetModelsCommand;
const deserializeAws_restJson1GetModelsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetModelTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetModelTemplateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.value != null) {
        contents.value = (0, smithy_client_1.expectString)(data.value);
    }
    return contents;
};
exports.deserializeAws_restJson1GetModelTemplateCommand = deserializeAws_restJson1GetModelTemplateCommand;
const deserializeAws_restJson1GetModelTemplateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetRequestValidatorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRequestValidatorCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.validateRequestBody != null) {
        contents.validateRequestBody = (0, smithy_client_1.expectBoolean)(data.validateRequestBody);
    }
    if (data.validateRequestParameters != null) {
        contents.validateRequestParameters = (0, smithy_client_1.expectBoolean)(data.validateRequestParameters);
    }
    return contents;
};
exports.deserializeAws_restJson1GetRequestValidatorCommand = deserializeAws_restJson1GetRequestValidatorCommand;
const deserializeAws_restJson1GetRequestValidatorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetRequestValidatorsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRequestValidatorsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.item != null) {
        contents.items = deserializeAws_restJson1ListOfRequestValidator(data.item, context);
    }
    if (data.position != null) {
        contents.position = (0, smithy_client_1.expectString)(data.position);
    }
    return contents;
};
exports.deserializeAws_restJson1GetRequestValidatorsCommand = deserializeAws_restJson1GetRequestValidatorsCommand;
const deserializeAws_restJson1GetRequestValidatorsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.parentId != null) {
        contents.parentId = (0, smithy_client_1.expectString)(data.parentId);
    }
    if (data.path != null) {
        contents.path = (0, smithy_client_1.expectString)(data.path);
    }
    if (data.pathPart != null) {
        contents.pathPart = (0, smithy_client_1.expectString)(data.pathPart);
    }
    if (data.resourceMethods != null) {
        contents.resourceMethods = deserializeAws_restJson1MapOfMethod(data.resourceMethods, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetResourceCommand = deserializeAws_restJson1GetResourceCommand;
const deserializeAws_restJson1GetResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetResourcesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetResourcesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.item != null) {
        contents.items = deserializeAws_restJson1ListOfResource(data.item, context);
    }
    if (data.position != null) {
        contents.position = (0, smithy_client_1.expectString)(data.position);
    }
    return contents;
};
exports.deserializeAws_restJson1GetResourcesCommand = deserializeAws_restJson1GetResourcesCommand;
const deserializeAws_restJson1GetResourcesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetRestApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRestApiCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.apiKeySource != null) {
        contents.apiKeySource = (0, smithy_client_1.expectString)(data.apiKeySource);
    }
    if (data.binaryMediaTypes != null) {
        contents.binaryMediaTypes = deserializeAws_restJson1ListOfString(data.binaryMediaTypes, context);
    }
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.disableExecuteApiEndpoint != null) {
        contents.disableExecuteApiEndpoint = (0, smithy_client_1.expectBoolean)(data.disableExecuteApiEndpoint);
    }
    if (data.endpointConfiguration != null) {
        contents.endpointConfiguration = deserializeAws_restJson1EndpointConfiguration(data.endpointConfiguration, context);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.minimumCompressionSize != null) {
        contents.minimumCompressionSize = (0, smithy_client_1.expectInt32)(data.minimumCompressionSize);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.policy != null) {
        contents.policy = (0, smithy_client_1.expectString)(data.policy);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    if (data.version != null) {
        contents.version = (0, smithy_client_1.expectString)(data.version);
    }
    if (data.warnings != null) {
        contents.warnings = deserializeAws_restJson1ListOfString(data.warnings, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetRestApiCommand = deserializeAws_restJson1GetRestApiCommand;
const deserializeAws_restJson1GetRestApiCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetRestApisCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRestApisCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.item != null) {
        contents.items = deserializeAws_restJson1ListOfRestApi(data.item, context);
    }
    if (data.position != null) {
        contents.position = (0, smithy_client_1.expectString)(data.position);
    }
    return contents;
};
exports.deserializeAws_restJson1GetRestApisCommand = deserializeAws_restJson1GetRestApisCommand;
const deserializeAws_restJson1GetRestApisCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetSdkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetSdkCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
        contentType: [, output.headers["content-type"]],
        contentDisposition: [, output.headers["content-disposition"]],
    });
    const data = await collectBody(output.body, context);
    contents.body = data;
    return contents;
};
exports.deserializeAws_restJson1GetSdkCommand = deserializeAws_restJson1GetSdkCommand;
const deserializeAws_restJson1GetSdkCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetSdkTypeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetSdkTypeCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.configurationProperties != null) {
        contents.configurationProperties = deserializeAws_restJson1ListOfSdkConfigurationProperty(data.configurationProperties, context);
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.friendlyName != null) {
        contents.friendlyName = (0, smithy_client_1.expectString)(data.friendlyName);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    return contents;
};
exports.deserializeAws_restJson1GetSdkTypeCommand = deserializeAws_restJson1GetSdkTypeCommand;
const deserializeAws_restJson1GetSdkTypeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetSdkTypesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetSdkTypesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.item != null) {
        contents.items = deserializeAws_restJson1ListOfSdkType(data.item, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetSdkTypesCommand = deserializeAws_restJson1GetSdkTypesCommand;
const deserializeAws_restJson1GetSdkTypesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetStageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetStageCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.accessLogSettings != null) {
        contents.accessLogSettings = deserializeAws_restJson1AccessLogSettings(data.accessLogSettings, context);
    }
    if (data.cacheClusterEnabled != null) {
        contents.cacheClusterEnabled = (0, smithy_client_1.expectBoolean)(data.cacheClusterEnabled);
    }
    if (data.cacheClusterSize != null) {
        contents.cacheClusterSize = (0, smithy_client_1.expectString)(data.cacheClusterSize);
    }
    if (data.cacheClusterStatus != null) {
        contents.cacheClusterStatus = (0, smithy_client_1.expectString)(data.cacheClusterStatus);
    }
    if (data.canarySettings != null) {
        contents.canarySettings = deserializeAws_restJson1CanarySettings(data.canarySettings, context);
    }
    if (data.clientCertificateId != null) {
        contents.clientCertificateId = (0, smithy_client_1.expectString)(data.clientCertificateId);
    }
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.deploymentId != null) {
        contents.deploymentId = (0, smithy_client_1.expectString)(data.deploymentId);
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.documentationVersion != null) {
        contents.documentationVersion = (0, smithy_client_1.expectString)(data.documentationVersion);
    }
    if (data.lastUpdatedDate != null) {
        contents.lastUpdatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.lastUpdatedDate)));
    }
    if (data.methodSettings != null) {
        contents.methodSettings = deserializeAws_restJson1MapOfMethodSettings(data.methodSettings, context);
    }
    if (data.stageName != null) {
        contents.stageName = (0, smithy_client_1.expectString)(data.stageName);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    if (data.tracingEnabled != null) {
        contents.tracingEnabled = (0, smithy_client_1.expectBoolean)(data.tracingEnabled);
    }
    if (data.variables != null) {
        contents.variables = deserializeAws_restJson1MapOfStringToString(data.variables, context);
    }
    if (data.webAclArn != null) {
        contents.webAclArn = (0, smithy_client_1.expectString)(data.webAclArn);
    }
    return contents;
};
exports.deserializeAws_restJson1GetStageCommand = deserializeAws_restJson1GetStageCommand;
const deserializeAws_restJson1GetStageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetStagesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetStagesCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.item != null) {
        contents.item = deserializeAws_restJson1ListOfStage(data.item, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetStagesCommand = deserializeAws_restJson1GetStagesCommand;
const deserializeAws_restJson1GetStagesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetTagsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetTagsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetTagsCommand = deserializeAws_restJson1GetTagsCommand;
const deserializeAws_restJson1GetTagsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetUsageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetUsageCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.endDate != null) {
        contents.endDate = (0, smithy_client_1.expectString)(data.endDate);
    }
    if (data.values != null) {
        contents.items = deserializeAws_restJson1MapOfKeyUsages(data.values, context);
    }
    if (data.position != null) {
        contents.position = (0, smithy_client_1.expectString)(data.position);
    }
    if (data.startDate != null) {
        contents.startDate = (0, smithy_client_1.expectString)(data.startDate);
    }
    if (data.usagePlanId != null) {
        contents.usagePlanId = (0, smithy_client_1.expectString)(data.usagePlanId);
    }
    return contents;
};
exports.deserializeAws_restJson1GetUsageCommand = deserializeAws_restJson1GetUsageCommand;
const deserializeAws_restJson1GetUsageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetUsagePlanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetUsagePlanCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.apiStages != null) {
        contents.apiStages = deserializeAws_restJson1ListOfApiStage(data.apiStages, context);
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.productCode != null) {
        contents.productCode = (0, smithy_client_1.expectString)(data.productCode);
    }
    if (data.quota != null) {
        contents.quota = deserializeAws_restJson1QuotaSettings(data.quota, context);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    if (data.throttle != null) {
        contents.throttle = deserializeAws_restJson1ThrottleSettings(data.throttle, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetUsagePlanCommand = deserializeAws_restJson1GetUsagePlanCommand;
const deserializeAws_restJson1GetUsagePlanCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetUsagePlanKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetUsagePlanKeyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.type != null) {
        contents.type = (0, smithy_client_1.expectString)(data.type);
    }
    if (data.value != null) {
        contents.value = (0, smithy_client_1.expectString)(data.value);
    }
    return contents;
};
exports.deserializeAws_restJson1GetUsagePlanKeyCommand = deserializeAws_restJson1GetUsagePlanKeyCommand;
const deserializeAws_restJson1GetUsagePlanKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetUsagePlanKeysCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetUsagePlanKeysCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.item != null) {
        contents.items = deserializeAws_restJson1ListOfUsagePlanKey(data.item, context);
    }
    if (data.position != null) {
        contents.position = (0, smithy_client_1.expectString)(data.position);
    }
    return contents;
};
exports.deserializeAws_restJson1GetUsagePlanKeysCommand = deserializeAws_restJson1GetUsagePlanKeysCommand;
const deserializeAws_restJson1GetUsagePlanKeysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetUsagePlansCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetUsagePlansCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.item != null) {
        contents.items = deserializeAws_restJson1ListOfUsagePlan(data.item, context);
    }
    if (data.position != null) {
        contents.position = (0, smithy_client_1.expectString)(data.position);
    }
    return contents;
};
exports.deserializeAws_restJson1GetUsagePlansCommand = deserializeAws_restJson1GetUsagePlansCommand;
const deserializeAws_restJson1GetUsagePlansCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetVpcLinkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetVpcLinkCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.status != null) {
        contents.status = (0, smithy_client_1.expectString)(data.status);
    }
    if (data.statusMessage != null) {
        contents.statusMessage = (0, smithy_client_1.expectString)(data.statusMessage);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    if (data.targetArns != null) {
        contents.targetArns = deserializeAws_restJson1ListOfString(data.targetArns, context);
    }
    return contents;
};
exports.deserializeAws_restJson1GetVpcLinkCommand = deserializeAws_restJson1GetVpcLinkCommand;
const deserializeAws_restJson1GetVpcLinkCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1GetVpcLinksCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetVpcLinksCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.item != null) {
        contents.items = deserializeAws_restJson1ListOfVpcLink(data.item, context);
    }
    if (data.position != null) {
        contents.position = (0, smithy_client_1.expectString)(data.position);
    }
    return contents;
};
exports.deserializeAws_restJson1GetVpcLinksCommand = deserializeAws_restJson1GetVpcLinksCommand;
const deserializeAws_restJson1GetVpcLinksCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ImportApiKeysCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1ImportApiKeysCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.ids != null) {
        contents.ids = deserializeAws_restJson1ListOfString(data.ids, context);
    }
    if (data.warnings != null) {
        contents.warnings = deserializeAws_restJson1ListOfString(data.warnings, context);
    }
    return contents;
};
exports.deserializeAws_restJson1ImportApiKeysCommand = deserializeAws_restJson1ImportApiKeysCommand;
const deserializeAws_restJson1ImportApiKeysCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ImportDocumentationPartsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ImportDocumentationPartsCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.ids != null) {
        contents.ids = deserializeAws_restJson1ListOfString(data.ids, context);
    }
    if (data.warnings != null) {
        contents.warnings = deserializeAws_restJson1ListOfString(data.warnings, context);
    }
    return contents;
};
exports.deserializeAws_restJson1ImportDocumentationPartsCommand = deserializeAws_restJson1ImportDocumentationPartsCommand;
const deserializeAws_restJson1ImportDocumentationPartsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1ImportRestApiCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1ImportRestApiCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.apiKeySource != null) {
        contents.apiKeySource = (0, smithy_client_1.expectString)(data.apiKeySource);
    }
    if (data.binaryMediaTypes != null) {
        contents.binaryMediaTypes = deserializeAws_restJson1ListOfString(data.binaryMediaTypes, context);
    }
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.disableExecuteApiEndpoint != null) {
        contents.disableExecuteApiEndpoint = (0, smithy_client_1.expectBoolean)(data.disableExecuteApiEndpoint);
    }
    if (data.endpointConfiguration != null) {
        contents.endpointConfiguration = deserializeAws_restJson1EndpointConfiguration(data.endpointConfiguration, context);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.minimumCompressionSize != null) {
        contents.minimumCompressionSize = (0, smithy_client_1.expectInt32)(data.minimumCompressionSize);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.policy != null) {
        contents.policy = (0, smithy_client_1.expectString)(data.policy);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    if (data.version != null) {
        contents.version = (0, smithy_client_1.expectString)(data.version);
    }
    if (data.warnings != null) {
        contents.warnings = deserializeAws_restJson1ListOfString(data.warnings, context);
    }
    return contents;
};
exports.deserializeAws_restJson1ImportRestApiCommand = deserializeAws_restJson1ImportRestApiCommand;
const deserializeAws_restJson1ImportRestApiCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutGatewayResponseCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutGatewayResponseCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.defaultResponse != null) {
        contents.defaultResponse = (0, smithy_client_1.expectBoolean)(data.defaultResponse);
    }
    if (data.responseParameters != null) {
        contents.responseParameters = deserializeAws_restJson1MapOfStringToString(data.responseParameters, context);
    }
    if (data.responseTemplates != null) {
        contents.responseTemplates = deserializeAws_restJson1MapOfStringToString(data.responseTemplates, context);
    }
    if (data.responseType != null) {
        contents.responseType = (0, smithy_client_1.expectString)(data.responseType);
    }
    if (data.statusCode != null) {
        contents.statusCode = (0, smithy_client_1.expectString)(data.statusCode);
    }
    return contents;
};
exports.deserializeAws_restJson1PutGatewayResponseCommand = deserializeAws_restJson1PutGatewayResponseCommand;
const deserializeAws_restJson1PutGatewayResponseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutIntegrationCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutIntegrationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.cacheKeyParameters != null) {
        contents.cacheKeyParameters = deserializeAws_restJson1ListOfString(data.cacheKeyParameters, context);
    }
    if (data.cacheNamespace != null) {
        contents.cacheNamespace = (0, smithy_client_1.expectString)(data.cacheNamespace);
    }
    if (data.connectionId != null) {
        contents.connectionId = (0, smithy_client_1.expectString)(data.connectionId);
    }
    if (data.connectionType != null) {
        contents.connectionType = (0, smithy_client_1.expectString)(data.connectionType);
    }
    if (data.contentHandling != null) {
        contents.contentHandling = (0, smithy_client_1.expectString)(data.contentHandling);
    }
    if (data.credentials != null) {
        contents.credentials = (0, smithy_client_1.expectString)(data.credentials);
    }
    if (data.httpMethod != null) {
        contents.httpMethod = (0, smithy_client_1.expectString)(data.httpMethod);
    }
    if (data.integrationResponses != null) {
        contents.integrationResponses = deserializeAws_restJson1MapOfIntegrationResponse(data.integrationResponses, context);
    }
    if (data.passthroughBehavior != null) {
        contents.passthroughBehavior = (0, smithy_client_1.expectString)(data.passthroughBehavior);
    }
    if (data.requestParameters != null) {
        contents.requestParameters = deserializeAws_restJson1MapOfStringToString(data.requestParameters, context);
    }
    if (data.requestTemplates != null) {
        contents.requestTemplates = deserializeAws_restJson1MapOfStringToString(data.requestTemplates, context);
    }
    if (data.timeoutInMillis != null) {
        contents.timeoutInMillis = (0, smithy_client_1.expectInt32)(data.timeoutInMillis);
    }
    if (data.tlsConfig != null) {
        contents.tlsConfig = deserializeAws_restJson1TlsConfig(data.tlsConfig, context);
    }
    if (data.type != null) {
        contents.type = (0, smithy_client_1.expectString)(data.type);
    }
    if (data.uri != null) {
        contents.uri = (0, smithy_client_1.expectString)(data.uri);
    }
    return contents;
};
exports.deserializeAws_restJson1PutIntegrationCommand = deserializeAws_restJson1PutIntegrationCommand;
const deserializeAws_restJson1PutIntegrationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutIntegrationResponseCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutIntegrationResponseCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.contentHandling != null) {
        contents.contentHandling = (0, smithy_client_1.expectString)(data.contentHandling);
    }
    if (data.responseParameters != null) {
        contents.responseParameters = deserializeAws_restJson1MapOfStringToString(data.responseParameters, context);
    }
    if (data.responseTemplates != null) {
        contents.responseTemplates = deserializeAws_restJson1MapOfStringToString(data.responseTemplates, context);
    }
    if (data.selectionPattern != null) {
        contents.selectionPattern = (0, smithy_client_1.expectString)(data.selectionPattern);
    }
    if (data.statusCode != null) {
        contents.statusCode = (0, smithy_client_1.expectString)(data.statusCode);
    }
    return contents;
};
exports.deserializeAws_restJson1PutIntegrationResponseCommand = deserializeAws_restJson1PutIntegrationResponseCommand;
const deserializeAws_restJson1PutIntegrationResponseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutMethodCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutMethodCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.apiKeyRequired != null) {
        contents.apiKeyRequired = (0, smithy_client_1.expectBoolean)(data.apiKeyRequired);
    }
    if (data.authorizationScopes != null) {
        contents.authorizationScopes = deserializeAws_restJson1ListOfString(data.authorizationScopes, context);
    }
    if (data.authorizationType != null) {
        contents.authorizationType = (0, smithy_client_1.expectString)(data.authorizationType);
    }
    if (data.authorizerId != null) {
        contents.authorizerId = (0, smithy_client_1.expectString)(data.authorizerId);
    }
    if (data.httpMethod != null) {
        contents.httpMethod = (0, smithy_client_1.expectString)(data.httpMethod);
    }
    if (data.methodIntegration != null) {
        contents.methodIntegration = deserializeAws_restJson1Integration(data.methodIntegration, context);
    }
    if (data.methodResponses != null) {
        contents.methodResponses = deserializeAws_restJson1MapOfMethodResponse(data.methodResponses, context);
    }
    if (data.operationName != null) {
        contents.operationName = (0, smithy_client_1.expectString)(data.operationName);
    }
    if (data.requestModels != null) {
        contents.requestModels = deserializeAws_restJson1MapOfStringToString(data.requestModels, context);
    }
    if (data.requestParameters != null) {
        contents.requestParameters = deserializeAws_restJson1MapOfStringToBoolean(data.requestParameters, context);
    }
    if (data.requestValidatorId != null) {
        contents.requestValidatorId = (0, smithy_client_1.expectString)(data.requestValidatorId);
    }
    return contents;
};
exports.deserializeAws_restJson1PutMethodCommand = deserializeAws_restJson1PutMethodCommand;
const deserializeAws_restJson1PutMethodCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutMethodResponseCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutMethodResponseCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.responseModels != null) {
        contents.responseModels = deserializeAws_restJson1MapOfStringToString(data.responseModels, context);
    }
    if (data.responseParameters != null) {
        contents.responseParameters = deserializeAws_restJson1MapOfStringToBoolean(data.responseParameters, context);
    }
    if (data.statusCode != null) {
        contents.statusCode = (0, smithy_client_1.expectString)(data.statusCode);
    }
    return contents;
};
exports.deserializeAws_restJson1PutMethodResponseCommand = deserializeAws_restJson1PutMethodResponseCommand;
const deserializeAws_restJson1PutMethodResponseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1PutRestApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1PutRestApiCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.apiKeySource != null) {
        contents.apiKeySource = (0, smithy_client_1.expectString)(data.apiKeySource);
    }
    if (data.binaryMediaTypes != null) {
        contents.binaryMediaTypes = deserializeAws_restJson1ListOfString(data.binaryMediaTypes, context);
    }
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.disableExecuteApiEndpoint != null) {
        contents.disableExecuteApiEndpoint = (0, smithy_client_1.expectBoolean)(data.disableExecuteApiEndpoint);
    }
    if (data.endpointConfiguration != null) {
        contents.endpointConfiguration = deserializeAws_restJson1EndpointConfiguration(data.endpointConfiguration, context);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.minimumCompressionSize != null) {
        contents.minimumCompressionSize = (0, smithy_client_1.expectInt32)(data.minimumCompressionSize);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.policy != null) {
        contents.policy = (0, smithy_client_1.expectString)(data.policy);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    if (data.version != null) {
        contents.version = (0, smithy_client_1.expectString)(data.version);
    }
    if (data.warnings != null) {
        contents.warnings = deserializeAws_restJson1ListOfString(data.warnings, context);
    }
    return contents;
};
exports.deserializeAws_restJson1PutRestApiCommand = deserializeAws_restJson1PutRestApiCommand;
const deserializeAws_restJson1PutRestApiCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1TagResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1TagResourceCommand = deserializeAws_restJson1TagResourceCommand;
const deserializeAws_restJson1TagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1TestInvokeAuthorizerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1TestInvokeAuthorizerCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.authorization != null) {
        contents.authorization = deserializeAws_restJson1MapOfStringToList(data.authorization, context);
    }
    if (data.claims != null) {
        contents.claims = deserializeAws_restJson1MapOfStringToString(data.claims, context);
    }
    if (data.clientStatus != null) {
        contents.clientStatus = (0, smithy_client_1.expectInt32)(data.clientStatus);
    }
    if (data.latency != null) {
        contents.latency = (0, smithy_client_1.expectLong)(data.latency);
    }
    if (data.log != null) {
        contents.log = (0, smithy_client_1.expectString)(data.log);
    }
    if (data.policy != null) {
        contents.policy = (0, smithy_client_1.expectString)(data.policy);
    }
    if (data.principalId != null) {
        contents.principalId = (0, smithy_client_1.expectString)(data.principalId);
    }
    return contents;
};
exports.deserializeAws_restJson1TestInvokeAuthorizerCommand = deserializeAws_restJson1TestInvokeAuthorizerCommand;
const deserializeAws_restJson1TestInvokeAuthorizerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1TestInvokeMethodCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1TestInvokeMethodCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.body != null) {
        contents.body = (0, smithy_client_1.expectString)(data.body);
    }
    if (data.headers != null) {
        contents.headers = deserializeAws_restJson1MapOfStringToString(data.headers, context);
    }
    if (data.latency != null) {
        contents.latency = (0, smithy_client_1.expectLong)(data.latency);
    }
    if (data.log != null) {
        contents.log = (0, smithy_client_1.expectString)(data.log);
    }
    if (data.multiValueHeaders != null) {
        contents.multiValueHeaders = deserializeAws_restJson1MapOfStringToList(data.multiValueHeaders, context);
    }
    if (data.status != null) {
        contents.status = (0, smithy_client_1.expectInt32)(data.status);
    }
    return contents;
};
exports.deserializeAws_restJson1TestInvokeMethodCommand = deserializeAws_restJson1TestInvokeMethodCommand;
const deserializeAws_restJson1TestInvokeMethodCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restJson1UntagResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
exports.deserializeAws_restJson1UntagResourceCommand = deserializeAws_restJson1UntagResourceCommand;
const deserializeAws_restJson1UntagResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateAccountCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.apiKeyVersion != null) {
        contents.apiKeyVersion = (0, smithy_client_1.expectString)(data.apiKeyVersion);
    }
    if (data.cloudwatchRoleArn != null) {
        contents.cloudwatchRoleArn = (0, smithy_client_1.expectString)(data.cloudwatchRoleArn);
    }
    if (data.features != null) {
        contents.features = deserializeAws_restJson1ListOfString(data.features, context);
    }
    if (data.throttleSettings != null) {
        contents.throttleSettings = deserializeAws_restJson1ThrottleSettings(data.throttleSettings, context);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateAccountCommand = deserializeAws_restJson1UpdateAccountCommand;
const deserializeAws_restJson1UpdateAccountCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateApiKeyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateApiKeyCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.customerId != null) {
        contents.customerId = (0, smithy_client_1.expectString)(data.customerId);
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.enabled != null) {
        contents.enabled = (0, smithy_client_1.expectBoolean)(data.enabled);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.lastUpdatedDate != null) {
        contents.lastUpdatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.lastUpdatedDate)));
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.stageKeys != null) {
        contents.stageKeys = deserializeAws_restJson1ListOfString(data.stageKeys, context);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    if (data.value != null) {
        contents.value = (0, smithy_client_1.expectString)(data.value);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateApiKeyCommand = deserializeAws_restJson1UpdateApiKeyCommand;
const deserializeAws_restJson1UpdateApiKeyCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateAuthorizerCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateAuthorizerCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.authType != null) {
        contents.authType = (0, smithy_client_1.expectString)(data.authType);
    }
    if (data.authorizerCredentials != null) {
        contents.authorizerCredentials = (0, smithy_client_1.expectString)(data.authorizerCredentials);
    }
    if (data.authorizerResultTtlInSeconds != null) {
        contents.authorizerResultTtlInSeconds = (0, smithy_client_1.expectInt32)(data.authorizerResultTtlInSeconds);
    }
    if (data.authorizerUri != null) {
        contents.authorizerUri = (0, smithy_client_1.expectString)(data.authorizerUri);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.identitySource != null) {
        contents.identitySource = (0, smithy_client_1.expectString)(data.identitySource);
    }
    if (data.identityValidationExpression != null) {
        contents.identityValidationExpression = (0, smithy_client_1.expectString)(data.identityValidationExpression);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.providerARNs != null) {
        contents.providerARNs = deserializeAws_restJson1ListOfARNs(data.providerARNs, context);
    }
    if (data.type != null) {
        contents.type = (0, smithy_client_1.expectString)(data.type);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateAuthorizerCommand = deserializeAws_restJson1UpdateAuthorizerCommand;
const deserializeAws_restJson1UpdateAuthorizerCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateBasePathMappingCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateBasePathMappingCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.basePath != null) {
        contents.basePath = (0, smithy_client_1.expectString)(data.basePath);
    }
    if (data.restApiId != null) {
        contents.restApiId = (0, smithy_client_1.expectString)(data.restApiId);
    }
    if (data.stage != null) {
        contents.stage = (0, smithy_client_1.expectString)(data.stage);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateBasePathMappingCommand = deserializeAws_restJson1UpdateBasePathMappingCommand;
const deserializeAws_restJson1UpdateBasePathMappingCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateClientCertificateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateClientCertificateCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.clientCertificateId != null) {
        contents.clientCertificateId = (0, smithy_client_1.expectString)(data.clientCertificateId);
    }
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.expirationDate != null) {
        contents.expirationDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.expirationDate)));
    }
    if (data.pemEncodedCertificate != null) {
        contents.pemEncodedCertificate = (0, smithy_client_1.expectString)(data.pemEncodedCertificate);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateClientCertificateCommand = deserializeAws_restJson1UpdateClientCertificateCommand;
const deserializeAws_restJson1UpdateClientCertificateCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateDeploymentCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.apiSummary != null) {
        contents.apiSummary = deserializeAws_restJson1PathToMapOfMethodSnapshot(data.apiSummary, context);
    }
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateDeploymentCommand = deserializeAws_restJson1UpdateDeploymentCommand;
const deserializeAws_restJson1UpdateDeploymentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "ServiceUnavailableException":
        case "com.amazonaws.apigateway#ServiceUnavailableException":
            throw await deserializeAws_restJson1ServiceUnavailableExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateDocumentationPartCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateDocumentationPartCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.location != null) {
        contents.location = deserializeAws_restJson1DocumentationPartLocation(data.location, context);
    }
    if (data.properties != null) {
        contents.properties = (0, smithy_client_1.expectString)(data.properties);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateDocumentationPartCommand = deserializeAws_restJson1UpdateDocumentationPartCommand;
const deserializeAws_restJson1UpdateDocumentationPartCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateDocumentationVersionCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateDocumentationVersionCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.version != null) {
        contents.version = (0, smithy_client_1.expectString)(data.version);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateDocumentationVersionCommand = deserializeAws_restJson1UpdateDocumentationVersionCommand;
const deserializeAws_restJson1UpdateDocumentationVersionCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateDomainNameCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateDomainNameCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.certificateArn != null) {
        contents.certificateArn = (0, smithy_client_1.expectString)(data.certificateArn);
    }
    if (data.certificateName != null) {
        contents.certificateName = (0, smithy_client_1.expectString)(data.certificateName);
    }
    if (data.certificateUploadDate != null) {
        contents.certificateUploadDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.certificateUploadDate)));
    }
    if (data.distributionDomainName != null) {
        contents.distributionDomainName = (0, smithy_client_1.expectString)(data.distributionDomainName);
    }
    if (data.distributionHostedZoneId != null) {
        contents.distributionHostedZoneId = (0, smithy_client_1.expectString)(data.distributionHostedZoneId);
    }
    if (data.domainName != null) {
        contents.domainName = (0, smithy_client_1.expectString)(data.domainName);
    }
    if (data.domainNameStatus != null) {
        contents.domainNameStatus = (0, smithy_client_1.expectString)(data.domainNameStatus);
    }
    if (data.domainNameStatusMessage != null) {
        contents.domainNameStatusMessage = (0, smithy_client_1.expectString)(data.domainNameStatusMessage);
    }
    if (data.endpointConfiguration != null) {
        contents.endpointConfiguration = deserializeAws_restJson1EndpointConfiguration(data.endpointConfiguration, context);
    }
    if (data.mutualTlsAuthentication != null) {
        contents.mutualTlsAuthentication = deserializeAws_restJson1MutualTlsAuthentication(data.mutualTlsAuthentication, context);
    }
    if (data.ownershipVerificationCertificateArn != null) {
        contents.ownershipVerificationCertificateArn = (0, smithy_client_1.expectString)(data.ownershipVerificationCertificateArn);
    }
    if (data.regionalCertificateArn != null) {
        contents.regionalCertificateArn = (0, smithy_client_1.expectString)(data.regionalCertificateArn);
    }
    if (data.regionalCertificateName != null) {
        contents.regionalCertificateName = (0, smithy_client_1.expectString)(data.regionalCertificateName);
    }
    if (data.regionalDomainName != null) {
        contents.regionalDomainName = (0, smithy_client_1.expectString)(data.regionalDomainName);
    }
    if (data.regionalHostedZoneId != null) {
        contents.regionalHostedZoneId = (0, smithy_client_1.expectString)(data.regionalHostedZoneId);
    }
    if (data.securityPolicy != null) {
        contents.securityPolicy = (0, smithy_client_1.expectString)(data.securityPolicy);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateDomainNameCommand = deserializeAws_restJson1UpdateDomainNameCommand;
const deserializeAws_restJson1UpdateDomainNameCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateGatewayResponseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateGatewayResponseCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.defaultResponse != null) {
        contents.defaultResponse = (0, smithy_client_1.expectBoolean)(data.defaultResponse);
    }
    if (data.responseParameters != null) {
        contents.responseParameters = deserializeAws_restJson1MapOfStringToString(data.responseParameters, context);
    }
    if (data.responseTemplates != null) {
        contents.responseTemplates = deserializeAws_restJson1MapOfStringToString(data.responseTemplates, context);
    }
    if (data.responseType != null) {
        contents.responseType = (0, smithy_client_1.expectString)(data.responseType);
    }
    if (data.statusCode != null) {
        contents.statusCode = (0, smithy_client_1.expectString)(data.statusCode);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateGatewayResponseCommand = deserializeAws_restJson1UpdateGatewayResponseCommand;
const deserializeAws_restJson1UpdateGatewayResponseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateIntegrationCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateIntegrationCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.cacheKeyParameters != null) {
        contents.cacheKeyParameters = deserializeAws_restJson1ListOfString(data.cacheKeyParameters, context);
    }
    if (data.cacheNamespace != null) {
        contents.cacheNamespace = (0, smithy_client_1.expectString)(data.cacheNamespace);
    }
    if (data.connectionId != null) {
        contents.connectionId = (0, smithy_client_1.expectString)(data.connectionId);
    }
    if (data.connectionType != null) {
        contents.connectionType = (0, smithy_client_1.expectString)(data.connectionType);
    }
    if (data.contentHandling != null) {
        contents.contentHandling = (0, smithy_client_1.expectString)(data.contentHandling);
    }
    if (data.credentials != null) {
        contents.credentials = (0, smithy_client_1.expectString)(data.credentials);
    }
    if (data.httpMethod != null) {
        contents.httpMethod = (0, smithy_client_1.expectString)(data.httpMethod);
    }
    if (data.integrationResponses != null) {
        contents.integrationResponses = deserializeAws_restJson1MapOfIntegrationResponse(data.integrationResponses, context);
    }
    if (data.passthroughBehavior != null) {
        contents.passthroughBehavior = (0, smithy_client_1.expectString)(data.passthroughBehavior);
    }
    if (data.requestParameters != null) {
        contents.requestParameters = deserializeAws_restJson1MapOfStringToString(data.requestParameters, context);
    }
    if (data.requestTemplates != null) {
        contents.requestTemplates = deserializeAws_restJson1MapOfStringToString(data.requestTemplates, context);
    }
    if (data.timeoutInMillis != null) {
        contents.timeoutInMillis = (0, smithy_client_1.expectInt32)(data.timeoutInMillis);
    }
    if (data.tlsConfig != null) {
        contents.tlsConfig = deserializeAws_restJson1TlsConfig(data.tlsConfig, context);
    }
    if (data.type != null) {
        contents.type = (0, smithy_client_1.expectString)(data.type);
    }
    if (data.uri != null) {
        contents.uri = (0, smithy_client_1.expectString)(data.uri);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateIntegrationCommand = deserializeAws_restJson1UpdateIntegrationCommand;
const deserializeAws_restJson1UpdateIntegrationCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateIntegrationResponseCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateIntegrationResponseCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.contentHandling != null) {
        contents.contentHandling = (0, smithy_client_1.expectString)(data.contentHandling);
    }
    if (data.responseParameters != null) {
        contents.responseParameters = deserializeAws_restJson1MapOfStringToString(data.responseParameters, context);
    }
    if (data.responseTemplates != null) {
        contents.responseTemplates = deserializeAws_restJson1MapOfStringToString(data.responseTemplates, context);
    }
    if (data.selectionPattern != null) {
        contents.selectionPattern = (0, smithy_client_1.expectString)(data.selectionPattern);
    }
    if (data.statusCode != null) {
        contents.statusCode = (0, smithy_client_1.expectString)(data.statusCode);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateIntegrationResponseCommand = deserializeAws_restJson1UpdateIntegrationResponseCommand;
const deserializeAws_restJson1UpdateIntegrationResponseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateMethodCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateMethodCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.apiKeyRequired != null) {
        contents.apiKeyRequired = (0, smithy_client_1.expectBoolean)(data.apiKeyRequired);
    }
    if (data.authorizationScopes != null) {
        contents.authorizationScopes = deserializeAws_restJson1ListOfString(data.authorizationScopes, context);
    }
    if (data.authorizationType != null) {
        contents.authorizationType = (0, smithy_client_1.expectString)(data.authorizationType);
    }
    if (data.authorizerId != null) {
        contents.authorizerId = (0, smithy_client_1.expectString)(data.authorizerId);
    }
    if (data.httpMethod != null) {
        contents.httpMethod = (0, smithy_client_1.expectString)(data.httpMethod);
    }
    if (data.methodIntegration != null) {
        contents.methodIntegration = deserializeAws_restJson1Integration(data.methodIntegration, context);
    }
    if (data.methodResponses != null) {
        contents.methodResponses = deserializeAws_restJson1MapOfMethodResponse(data.methodResponses, context);
    }
    if (data.operationName != null) {
        contents.operationName = (0, smithy_client_1.expectString)(data.operationName);
    }
    if (data.requestModels != null) {
        contents.requestModels = deserializeAws_restJson1MapOfStringToString(data.requestModels, context);
    }
    if (data.requestParameters != null) {
        contents.requestParameters = deserializeAws_restJson1MapOfStringToBoolean(data.requestParameters, context);
    }
    if (data.requestValidatorId != null) {
        contents.requestValidatorId = (0, smithy_client_1.expectString)(data.requestValidatorId);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateMethodCommand = deserializeAws_restJson1UpdateMethodCommand;
const deserializeAws_restJson1UpdateMethodCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateMethodResponseCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateMethodResponseCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.responseModels != null) {
        contents.responseModels = deserializeAws_restJson1MapOfStringToString(data.responseModels, context);
    }
    if (data.responseParameters != null) {
        contents.responseParameters = deserializeAws_restJson1MapOfStringToBoolean(data.responseParameters, context);
    }
    if (data.statusCode != null) {
        contents.statusCode = (0, smithy_client_1.expectString)(data.statusCode);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateMethodResponseCommand = deserializeAws_restJson1UpdateMethodResponseCommand;
const deserializeAws_restJson1UpdateMethodResponseCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateModelCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateModelCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.contentType != null) {
        contents.contentType = (0, smithy_client_1.expectString)(data.contentType);
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.schema != null) {
        contents.schema = (0, smithy_client_1.expectString)(data.schema);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateModelCommand = deserializeAws_restJson1UpdateModelCommand;
const deserializeAws_restJson1UpdateModelCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateRequestValidatorCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateRequestValidatorCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.validateRequestBody != null) {
        contents.validateRequestBody = (0, smithy_client_1.expectBoolean)(data.validateRequestBody);
    }
    if (data.validateRequestParameters != null) {
        contents.validateRequestParameters = (0, smithy_client_1.expectBoolean)(data.validateRequestParameters);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateRequestValidatorCommand = deserializeAws_restJson1UpdateRequestValidatorCommand;
const deserializeAws_restJson1UpdateRequestValidatorCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateResourceCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.parentId != null) {
        contents.parentId = (0, smithy_client_1.expectString)(data.parentId);
    }
    if (data.path != null) {
        contents.path = (0, smithy_client_1.expectString)(data.path);
    }
    if (data.pathPart != null) {
        contents.pathPart = (0, smithy_client_1.expectString)(data.pathPart);
    }
    if (data.resourceMethods != null) {
        contents.resourceMethods = deserializeAws_restJson1MapOfMethod(data.resourceMethods, context);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateResourceCommand = deserializeAws_restJson1UpdateResourceCommand;
const deserializeAws_restJson1UpdateResourceCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateRestApiCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateRestApiCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.apiKeySource != null) {
        contents.apiKeySource = (0, smithy_client_1.expectString)(data.apiKeySource);
    }
    if (data.binaryMediaTypes != null) {
        contents.binaryMediaTypes = deserializeAws_restJson1ListOfString(data.binaryMediaTypes, context);
    }
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.disableExecuteApiEndpoint != null) {
        contents.disableExecuteApiEndpoint = (0, smithy_client_1.expectBoolean)(data.disableExecuteApiEndpoint);
    }
    if (data.endpointConfiguration != null) {
        contents.endpointConfiguration = deserializeAws_restJson1EndpointConfiguration(data.endpointConfiguration, context);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.minimumCompressionSize != null) {
        contents.minimumCompressionSize = (0, smithy_client_1.expectInt32)(data.minimumCompressionSize);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.policy != null) {
        contents.policy = (0, smithy_client_1.expectString)(data.policy);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    if (data.version != null) {
        contents.version = (0, smithy_client_1.expectString)(data.version);
    }
    if (data.warnings != null) {
        contents.warnings = deserializeAws_restJson1ListOfString(data.warnings, context);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateRestApiCommand = deserializeAws_restJson1UpdateRestApiCommand;
const deserializeAws_restJson1UpdateRestApiCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateStageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateStageCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.accessLogSettings != null) {
        contents.accessLogSettings = deserializeAws_restJson1AccessLogSettings(data.accessLogSettings, context);
    }
    if (data.cacheClusterEnabled != null) {
        contents.cacheClusterEnabled = (0, smithy_client_1.expectBoolean)(data.cacheClusterEnabled);
    }
    if (data.cacheClusterSize != null) {
        contents.cacheClusterSize = (0, smithy_client_1.expectString)(data.cacheClusterSize);
    }
    if (data.cacheClusterStatus != null) {
        contents.cacheClusterStatus = (0, smithy_client_1.expectString)(data.cacheClusterStatus);
    }
    if (data.canarySettings != null) {
        contents.canarySettings = deserializeAws_restJson1CanarySettings(data.canarySettings, context);
    }
    if (data.clientCertificateId != null) {
        contents.clientCertificateId = (0, smithy_client_1.expectString)(data.clientCertificateId);
    }
    if (data.createdDate != null) {
        contents.createdDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.createdDate)));
    }
    if (data.deploymentId != null) {
        contents.deploymentId = (0, smithy_client_1.expectString)(data.deploymentId);
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.documentationVersion != null) {
        contents.documentationVersion = (0, smithy_client_1.expectString)(data.documentationVersion);
    }
    if (data.lastUpdatedDate != null) {
        contents.lastUpdatedDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(data.lastUpdatedDate)));
    }
    if (data.methodSettings != null) {
        contents.methodSettings = deserializeAws_restJson1MapOfMethodSettings(data.methodSettings, context);
    }
    if (data.stageName != null) {
        contents.stageName = (0, smithy_client_1.expectString)(data.stageName);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    if (data.tracingEnabled != null) {
        contents.tracingEnabled = (0, smithy_client_1.expectBoolean)(data.tracingEnabled);
    }
    if (data.variables != null) {
        contents.variables = deserializeAws_restJson1MapOfStringToString(data.variables, context);
    }
    if (data.webAclArn != null) {
        contents.webAclArn = (0, smithy_client_1.expectString)(data.webAclArn);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateStageCommand = deserializeAws_restJson1UpdateStageCommand;
const deserializeAws_restJson1UpdateStageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateUsageCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateUsageCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.endDate != null) {
        contents.endDate = (0, smithy_client_1.expectString)(data.endDate);
    }
    if (data.values != null) {
        contents.items = deserializeAws_restJson1MapOfKeyUsages(data.values, context);
    }
    if (data.position != null) {
        contents.position = (0, smithy_client_1.expectString)(data.position);
    }
    if (data.startDate != null) {
        contents.startDate = (0, smithy_client_1.expectString)(data.startDate);
    }
    if (data.usagePlanId != null) {
        contents.usagePlanId = (0, smithy_client_1.expectString)(data.usagePlanId);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateUsageCommand = deserializeAws_restJson1UpdateUsageCommand;
const deserializeAws_restJson1UpdateUsageCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateUsagePlanCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateUsagePlanCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.apiStages != null) {
        contents.apiStages = deserializeAws_restJson1ListOfApiStage(data.apiStages, context);
    }
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.productCode != null) {
        contents.productCode = (0, smithy_client_1.expectString)(data.productCode);
    }
    if (data.quota != null) {
        contents.quota = deserializeAws_restJson1QuotaSettings(data.quota, context);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    if (data.throttle != null) {
        contents.throttle = deserializeAws_restJson1ThrottleSettings(data.throttle, context);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateUsagePlanCommand = deserializeAws_restJson1UpdateUsagePlanCommand;
const deserializeAws_restJson1UpdateUsagePlanCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const deserializeAws_restJson1UpdateVpcLinkCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1UpdateVpcLinkCommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    if (data.description != null) {
        contents.description = (0, smithy_client_1.expectString)(data.description);
    }
    if (data.id != null) {
        contents.id = (0, smithy_client_1.expectString)(data.id);
    }
    if (data.name != null) {
        contents.name = (0, smithy_client_1.expectString)(data.name);
    }
    if (data.status != null) {
        contents.status = (0, smithy_client_1.expectString)(data.status);
    }
    if (data.statusMessage != null) {
        contents.statusMessage = (0, smithy_client_1.expectString)(data.statusMessage);
    }
    if (data.tags != null) {
        contents.tags = deserializeAws_restJson1MapOfStringToString(data.tags, context);
    }
    if (data.targetArns != null) {
        contents.targetArns = deserializeAws_restJson1ListOfString(data.targetArns, context);
    }
    return contents;
};
exports.deserializeAws_restJson1UpdateVpcLinkCommand = deserializeAws_restJson1UpdateVpcLinkCommand;
const deserializeAws_restJson1UpdateVpcLinkCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.apigateway#BadRequestException":
            throw await deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.apigateway#ConflictException":
            throw await deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.apigateway#LimitExceededException":
            throw await deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.apigateway#NotFoundException":
            throw await deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.apigateway#TooManyRequestsException":
            throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.apigateway#UnauthorizedException":
            throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, smithy_client_1.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: APIGatewayServiceException_1.APIGatewayServiceException,
                errorCode,
            });
    }
};
const map = smithy_client_1.map;
const deserializeAws_restJson1BadRequestExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ConflictExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1LimitExceededExceptionResponse = async (parsedOutput, context) => {
    const contents = map({
        retryAfterSeconds: [, parsedOutput.headers["retry-after"]],
    });
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1NotFoundExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1ServiceUnavailableExceptionResponse = async (parsedOutput, context) => {
    const contents = map({
        retryAfterSeconds: [, parsedOutput.headers["retry-after"]],
    });
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.ServiceUnavailableException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
    const contents = map({
        retryAfterSeconds: [, parsedOutput.headers["retry-after"]],
    });
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const deserializeAws_restJson1UnauthorizedExceptionResponse = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
    }
    const exception = new models_0_1.UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const serializeAws_restJson1ApiStage = (input, context) => {
    return {
        ...(input.apiId != null && { apiId: input.apiId }),
        ...(input.stage != null && { stage: input.stage }),
        ...(input.throttle != null && {
            throttle: serializeAws_restJson1MapOfApiStageThrottleSettings(input.throttle, context),
        }),
    };
};
const serializeAws_restJson1CanarySettings = (input, context) => {
    return {
        ...(input.deploymentId != null && { deploymentId: input.deploymentId }),
        ...(input.percentTraffic != null && { percentTraffic: (0, smithy_client_1.serializeFloat)(input.percentTraffic) }),
        ...(input.stageVariableOverrides != null && {
            stageVariableOverrides: serializeAws_restJson1MapOfStringToString(input.stageVariableOverrides, context),
        }),
        ...(input.useStageCache != null && { useStageCache: input.useStageCache }),
    };
};
const serializeAws_restJson1DeploymentCanarySettings = (input, context) => {
    return {
        ...(input.percentTraffic != null && { percentTraffic: (0, smithy_client_1.serializeFloat)(input.percentTraffic) }),
        ...(input.stageVariableOverrides != null && {
            stageVariableOverrides: serializeAws_restJson1MapOfStringToString(input.stageVariableOverrides, context),
        }),
        ...(input.useStageCache != null && { useStageCache: input.useStageCache }),
    };
};
const serializeAws_restJson1DocumentationPartLocation = (input, context) => {
    return {
        ...(input.method != null && { method: input.method }),
        ...(input.name != null && { name: input.name }),
        ...(input.path != null && { path: input.path }),
        ...(input.statusCode != null && { statusCode: input.statusCode }),
        ...(input.type != null && { type: input.type }),
    };
};
const serializeAws_restJson1EndpointConfiguration = (input, context) => {
    return {
        ...(input.types != null && { types: serializeAws_restJson1ListOfEndpointType(input.types, context) }),
        ...(input.vpcEndpointIds != null && {
            vpcEndpointIds: serializeAws_restJson1ListOfString(input.vpcEndpointIds, context),
        }),
    };
};
const serializeAws_restJson1ListOfApiStage = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1ApiStage(entry, context);
    });
};
const serializeAws_restJson1ListOfARNs = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1ListOfEndpointType = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1ListOfPatchOperation = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1PatchOperation(entry, context);
    });
};
const serializeAws_restJson1ListOfStageKeys = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return serializeAws_restJson1StageKey(entry, context);
    });
};
const serializeAws_restJson1ListOfString = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return entry;
    });
};
const serializeAws_restJson1MapOfApiStageThrottleSettings = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: serializeAws_restJson1ThrottleSettings(value, context),
        };
    }, {});
};
const serializeAws_restJson1MapOfStringToBoolean = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_restJson1MapOfStringToList = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: serializeAws_restJson1ListOfString(value, context),
        };
    }, {});
};
const serializeAws_restJson1MapOfStringToString = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: value,
        };
    }, {});
};
const serializeAws_restJson1MutualTlsAuthenticationInput = (input, context) => {
    return {
        ...(input.truststoreUri != null && { truststoreUri: input.truststoreUri }),
        ...(input.truststoreVersion != null && { truststoreVersion: input.truststoreVersion }),
    };
};
const serializeAws_restJson1PatchOperation = (input, context) => {
    return {
        ...(input.from != null && { from: input.from }),
        ...(input.op != null && { op: input.op }),
        ...(input.path != null && { path: input.path }),
        ...(input.value != null && { value: input.value }),
    };
};
const serializeAws_restJson1QuotaSettings = (input, context) => {
    return {
        ...(input.limit != null && { limit: input.limit }),
        ...(input.offset != null && { offset: input.offset }),
        ...(input.period != null && { period: input.period }),
    };
};
const serializeAws_restJson1StageKey = (input, context) => {
    return {
        ...(input.restApiId != null && { restApiId: input.restApiId }),
        ...(input.stageName != null && { stageName: input.stageName }),
    };
};
const serializeAws_restJson1ThrottleSettings = (input, context) => {
    return {
        ...(input.burstLimit != null && { burstLimit: input.burstLimit }),
        ...(input.rateLimit != null && { rateLimit: (0, smithy_client_1.serializeFloat)(input.rateLimit) }),
    };
};
const serializeAws_restJson1TlsConfig = (input, context) => {
    return {
        ...(input.insecureSkipVerification != null && { insecureSkipVerification: input.insecureSkipVerification }),
    };
};
const deserializeAws_restJson1AccessLogSettings = (output, context) => {
    return {
        destinationArn: (0, smithy_client_1.expectString)(output.destinationArn),
        format: (0, smithy_client_1.expectString)(output.format),
    };
};
const deserializeAws_restJson1ApiKey = (output, context) => {
    return {
        createdDate: output.createdDate != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdDate)))
            : undefined,
        customerId: (0, smithy_client_1.expectString)(output.customerId),
        description: (0, smithy_client_1.expectString)(output.description),
        enabled: (0, smithy_client_1.expectBoolean)(output.enabled),
        id: (0, smithy_client_1.expectString)(output.id),
        lastUpdatedDate: output.lastUpdatedDate != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastUpdatedDate)))
            : undefined,
        name: (0, smithy_client_1.expectString)(output.name),
        stageKeys: output.stageKeys != null ? deserializeAws_restJson1ListOfString(output.stageKeys, context) : undefined,
        tags: output.tags != null ? deserializeAws_restJson1MapOfStringToString(output.tags, context) : undefined,
        value: (0, smithy_client_1.expectString)(output.value),
    };
};
const deserializeAws_restJson1ApiStage = (output, context) => {
    return {
        apiId: (0, smithy_client_1.expectString)(output.apiId),
        stage: (0, smithy_client_1.expectString)(output.stage),
        throttle: output.throttle != null
            ? deserializeAws_restJson1MapOfApiStageThrottleSettings(output.throttle, context)
            : undefined,
    };
};
const deserializeAws_restJson1Authorizer = (output, context) => {
    return {
        authType: (0, smithy_client_1.expectString)(output.authType),
        authorizerCredentials: (0, smithy_client_1.expectString)(output.authorizerCredentials),
        authorizerResultTtlInSeconds: (0, smithy_client_1.expectInt32)(output.authorizerResultTtlInSeconds),
        authorizerUri: (0, smithy_client_1.expectString)(output.authorizerUri),
        id: (0, smithy_client_1.expectString)(output.id),
        identitySource: (0, smithy_client_1.expectString)(output.identitySource),
        identityValidationExpression: (0, smithy_client_1.expectString)(output.identityValidationExpression),
        name: (0, smithy_client_1.expectString)(output.name),
        providerARNs: output.providerARNs != null ? deserializeAws_restJson1ListOfARNs(output.providerARNs, context) : undefined,
        type: (0, smithy_client_1.expectString)(output.type),
    };
};
const deserializeAws_restJson1BasePathMapping = (output, context) => {
    return {
        basePath: (0, smithy_client_1.expectString)(output.basePath),
        restApiId: (0, smithy_client_1.expectString)(output.restApiId),
        stage: (0, smithy_client_1.expectString)(output.stage),
    };
};
const deserializeAws_restJson1CanarySettings = (output, context) => {
    return {
        deploymentId: (0, smithy_client_1.expectString)(output.deploymentId),
        percentTraffic: (0, smithy_client_1.limitedParseDouble)(output.percentTraffic),
        stageVariableOverrides: output.stageVariableOverrides != null
            ? deserializeAws_restJson1MapOfStringToString(output.stageVariableOverrides, context)
            : undefined,
        useStageCache: (0, smithy_client_1.expectBoolean)(output.useStageCache),
    };
};
const deserializeAws_restJson1ClientCertificate = (output, context) => {
    return {
        clientCertificateId: (0, smithy_client_1.expectString)(output.clientCertificateId),
        createdDate: output.createdDate != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdDate)))
            : undefined,
        description: (0, smithy_client_1.expectString)(output.description),
        expirationDate: output.expirationDate != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.expirationDate)))
            : undefined,
        pemEncodedCertificate: (0, smithy_client_1.expectString)(output.pemEncodedCertificate),
        tags: output.tags != null ? deserializeAws_restJson1MapOfStringToString(output.tags, context) : undefined,
    };
};
const deserializeAws_restJson1Deployment = (output, context) => {
    return {
        apiSummary: output.apiSummary != null
            ? deserializeAws_restJson1PathToMapOfMethodSnapshot(output.apiSummary, context)
            : undefined,
        createdDate: output.createdDate != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdDate)))
            : undefined,
        description: (0, smithy_client_1.expectString)(output.description),
        id: (0, smithy_client_1.expectString)(output.id),
    };
};
const deserializeAws_restJson1DocumentationPart = (output, context) => {
    return {
        id: (0, smithy_client_1.expectString)(output.id),
        location: output.location != null ? deserializeAws_restJson1DocumentationPartLocation(output.location, context) : undefined,
        properties: (0, smithy_client_1.expectString)(output.properties),
    };
};
const deserializeAws_restJson1DocumentationPartLocation = (output, context) => {
    return {
        method: (0, smithy_client_1.expectString)(output.method),
        name: (0, smithy_client_1.expectString)(output.name),
        path: (0, smithy_client_1.expectString)(output.path),
        statusCode: (0, smithy_client_1.expectString)(output.statusCode),
        type: (0, smithy_client_1.expectString)(output.type),
    };
};
const deserializeAws_restJson1DocumentationVersion = (output, context) => {
    return {
        createdDate: output.createdDate != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdDate)))
            : undefined,
        description: (0, smithy_client_1.expectString)(output.description),
        version: (0, smithy_client_1.expectString)(output.version),
    };
};
const deserializeAws_restJson1DomainName = (output, context) => {
    return {
        certificateArn: (0, smithy_client_1.expectString)(output.certificateArn),
        certificateName: (0, smithy_client_1.expectString)(output.certificateName),
        certificateUploadDate: output.certificateUploadDate != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.certificateUploadDate)))
            : undefined,
        distributionDomainName: (0, smithy_client_1.expectString)(output.distributionDomainName),
        distributionHostedZoneId: (0, smithy_client_1.expectString)(output.distributionHostedZoneId),
        domainName: (0, smithy_client_1.expectString)(output.domainName),
        domainNameStatus: (0, smithy_client_1.expectString)(output.domainNameStatus),
        domainNameStatusMessage: (0, smithy_client_1.expectString)(output.domainNameStatusMessage),
        endpointConfiguration: output.endpointConfiguration != null
            ? deserializeAws_restJson1EndpointConfiguration(output.endpointConfiguration, context)
            : undefined,
        mutualTlsAuthentication: output.mutualTlsAuthentication != null
            ? deserializeAws_restJson1MutualTlsAuthentication(output.mutualTlsAuthentication, context)
            : undefined,
        ownershipVerificationCertificateArn: (0, smithy_client_1.expectString)(output.ownershipVerificationCertificateArn),
        regionalCertificateArn: (0, smithy_client_1.expectString)(output.regionalCertificateArn),
        regionalCertificateName: (0, smithy_client_1.expectString)(output.regionalCertificateName),
        regionalDomainName: (0, smithy_client_1.expectString)(output.regionalDomainName),
        regionalHostedZoneId: (0, smithy_client_1.expectString)(output.regionalHostedZoneId),
        securityPolicy: (0, smithy_client_1.expectString)(output.securityPolicy),
        tags: output.tags != null ? deserializeAws_restJson1MapOfStringToString(output.tags, context) : undefined,
    };
};
const deserializeAws_restJson1EndpointConfiguration = (output, context) => {
    return {
        types: output.types != null ? deserializeAws_restJson1ListOfEndpointType(output.types, context) : undefined,
        vpcEndpointIds: output.vpcEndpointIds != null ? deserializeAws_restJson1ListOfString(output.vpcEndpointIds, context) : undefined,
    };
};
const deserializeAws_restJson1GatewayResponse = (output, context) => {
    return {
        defaultResponse: (0, smithy_client_1.expectBoolean)(output.defaultResponse),
        responseParameters: output.responseParameters != null
            ? deserializeAws_restJson1MapOfStringToString(output.responseParameters, context)
            : undefined,
        responseTemplates: output.responseTemplates != null
            ? deserializeAws_restJson1MapOfStringToString(output.responseTemplates, context)
            : undefined,
        responseType: (0, smithy_client_1.expectString)(output.responseType),
        statusCode: (0, smithy_client_1.expectString)(output.statusCode),
    };
};
const deserializeAws_restJson1Integration = (output, context) => {
    return {
        cacheKeyParameters: output.cacheKeyParameters != null
            ? deserializeAws_restJson1ListOfString(output.cacheKeyParameters, context)
            : undefined,
        cacheNamespace: (0, smithy_client_1.expectString)(output.cacheNamespace),
        connectionId: (0, smithy_client_1.expectString)(output.connectionId),
        connectionType: (0, smithy_client_1.expectString)(output.connectionType),
        contentHandling: (0, smithy_client_1.expectString)(output.contentHandling),
        credentials: (0, smithy_client_1.expectString)(output.credentials),
        httpMethod: (0, smithy_client_1.expectString)(output.httpMethod),
        integrationResponses: output.integrationResponses != null
            ? deserializeAws_restJson1MapOfIntegrationResponse(output.integrationResponses, context)
            : undefined,
        passthroughBehavior: (0, smithy_client_1.expectString)(output.passthroughBehavior),
        requestParameters: output.requestParameters != null
            ? deserializeAws_restJson1MapOfStringToString(output.requestParameters, context)
            : undefined,
        requestTemplates: output.requestTemplates != null
            ? deserializeAws_restJson1MapOfStringToString(output.requestTemplates, context)
            : undefined,
        timeoutInMillis: (0, smithy_client_1.expectInt32)(output.timeoutInMillis),
        tlsConfig: output.tlsConfig != null ? deserializeAws_restJson1TlsConfig(output.tlsConfig, context) : undefined,
        type: (0, smithy_client_1.expectString)(output.type),
        uri: (0, smithy_client_1.expectString)(output.uri),
    };
};
const deserializeAws_restJson1IntegrationResponse = (output, context) => {
    return {
        contentHandling: (0, smithy_client_1.expectString)(output.contentHandling),
        responseParameters: output.responseParameters != null
            ? deserializeAws_restJson1MapOfStringToString(output.responseParameters, context)
            : undefined,
        responseTemplates: output.responseTemplates != null
            ? deserializeAws_restJson1MapOfStringToString(output.responseTemplates, context)
            : undefined,
        selectionPattern: (0, smithy_client_1.expectString)(output.selectionPattern),
        statusCode: (0, smithy_client_1.expectString)(output.statusCode),
    };
};
const deserializeAws_restJson1ListOfApiKey = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ApiKey(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfApiStage = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ApiStage(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfARNs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfAuthorizer = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Authorizer(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfBasePathMapping = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1BasePathMapping(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfClientCertificate = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ClientCertificate(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfDeployment = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Deployment(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfDocumentationPart = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1DocumentationPart(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfDocumentationVersion = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1DocumentationVersion(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfDomainName = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1DomainName(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfEndpointType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfGatewayResponse = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1GatewayResponse(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfLong = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectLong)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfModel = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Model(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfRequestValidator = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1RequestValidator(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfResource = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Resource(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfRestApi = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1RestApi(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfSdkConfigurationProperty = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1SdkConfigurationProperty(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfSdkType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1SdkType(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfStage = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1Stage(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfString = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return (0, smithy_client_1.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfUsage = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1ListOfLong(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfUsagePlan = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1UsagePlan(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfUsagePlanKey = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1UsagePlanKey(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1ListOfVpcLink = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        if (entry === null) {
            return null;
        }
        return deserializeAws_restJson1VpcLink(entry, context);
    });
    return retVal;
};
const deserializeAws_restJson1MapOfApiStageThrottleSettings = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1ThrottleSettings(value, context),
        };
    }, {});
};
const deserializeAws_restJson1MapOfIntegrationResponse = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1IntegrationResponse(value, context),
        };
    }, {});
};
const deserializeAws_restJson1MapOfKeyUsages = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1ListOfUsage(value, context),
        };
    }, {});
};
const deserializeAws_restJson1MapOfMethod = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1Method(value, context),
        };
    }, {});
};
const deserializeAws_restJson1MapOfMethodResponse = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1MethodResponse(value, context),
        };
    }, {});
};
const deserializeAws_restJson1MapOfMethodSettings = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1MethodSetting(value, context),
        };
    }, {});
};
const deserializeAws_restJson1MapOfMethodSnapshot = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1MethodSnapshot(value, context),
        };
    }, {});
};
const deserializeAws_restJson1MapOfStringToBoolean = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: (0, smithy_client_1.expectBoolean)(value),
        };
    }, {});
};
const deserializeAws_restJson1MapOfStringToList = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1ListOfString(value, context),
        };
    }, {});
};
const deserializeAws_restJson1MapOfStringToString = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: (0, smithy_client_1.expectString)(value),
        };
    }, {});
};
const deserializeAws_restJson1Method = (output, context) => {
    return {
        apiKeyRequired: (0, smithy_client_1.expectBoolean)(output.apiKeyRequired),
        authorizationScopes: output.authorizationScopes != null
            ? deserializeAws_restJson1ListOfString(output.authorizationScopes, context)
            : undefined,
        authorizationType: (0, smithy_client_1.expectString)(output.authorizationType),
        authorizerId: (0, smithy_client_1.expectString)(output.authorizerId),
        httpMethod: (0, smithy_client_1.expectString)(output.httpMethod),
        methodIntegration: output.methodIntegration != null
            ? deserializeAws_restJson1Integration(output.methodIntegration, context)
            : undefined,
        methodResponses: output.methodResponses != null
            ? deserializeAws_restJson1MapOfMethodResponse(output.methodResponses, context)
            : undefined,
        operationName: (0, smithy_client_1.expectString)(output.operationName),
        requestModels: output.requestModels != null
            ? deserializeAws_restJson1MapOfStringToString(output.requestModels, context)
            : undefined,
        requestParameters: output.requestParameters != null
            ? deserializeAws_restJson1MapOfStringToBoolean(output.requestParameters, context)
            : undefined,
        requestValidatorId: (0, smithy_client_1.expectString)(output.requestValidatorId),
    };
};
const deserializeAws_restJson1MethodResponse = (output, context) => {
    return {
        responseModels: output.responseModels != null
            ? deserializeAws_restJson1MapOfStringToString(output.responseModels, context)
            : undefined,
        responseParameters: output.responseParameters != null
            ? deserializeAws_restJson1MapOfStringToBoolean(output.responseParameters, context)
            : undefined,
        statusCode: (0, smithy_client_1.expectString)(output.statusCode),
    };
};
const deserializeAws_restJson1MethodSetting = (output, context) => {
    return {
        cacheDataEncrypted: (0, smithy_client_1.expectBoolean)(output.cacheDataEncrypted),
        cacheTtlInSeconds: (0, smithy_client_1.expectInt32)(output.cacheTtlInSeconds),
        cachingEnabled: (0, smithy_client_1.expectBoolean)(output.cachingEnabled),
        dataTraceEnabled: (0, smithy_client_1.expectBoolean)(output.dataTraceEnabled),
        loggingLevel: (0, smithy_client_1.expectString)(output.loggingLevel),
        metricsEnabled: (0, smithy_client_1.expectBoolean)(output.metricsEnabled),
        requireAuthorizationForCacheControl: (0, smithy_client_1.expectBoolean)(output.requireAuthorizationForCacheControl),
        throttlingBurstLimit: (0, smithy_client_1.expectInt32)(output.throttlingBurstLimit),
        throttlingRateLimit: (0, smithy_client_1.limitedParseDouble)(output.throttlingRateLimit),
        unauthorizedCacheControlHeaderStrategy: (0, smithy_client_1.expectString)(output.unauthorizedCacheControlHeaderStrategy),
    };
};
const deserializeAws_restJson1MethodSnapshot = (output, context) => {
    return {
        apiKeyRequired: (0, smithy_client_1.expectBoolean)(output.apiKeyRequired),
        authorizationType: (0, smithy_client_1.expectString)(output.authorizationType),
    };
};
const deserializeAws_restJson1Model = (output, context) => {
    return {
        contentType: (0, smithy_client_1.expectString)(output.contentType),
        description: (0, smithy_client_1.expectString)(output.description),
        id: (0, smithy_client_1.expectString)(output.id),
        name: (0, smithy_client_1.expectString)(output.name),
        schema: (0, smithy_client_1.expectString)(output.schema),
    };
};
const deserializeAws_restJson1MutualTlsAuthentication = (output, context) => {
    return {
        truststoreUri: (0, smithy_client_1.expectString)(output.truststoreUri),
        truststoreVersion: (0, smithy_client_1.expectString)(output.truststoreVersion),
        truststoreWarnings: output.truststoreWarnings != null
            ? deserializeAws_restJson1ListOfString(output.truststoreWarnings, context)
            : undefined,
    };
};
const deserializeAws_restJson1PathToMapOfMethodSnapshot = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        return {
            ...acc,
            [key]: deserializeAws_restJson1MapOfMethodSnapshot(value, context),
        };
    }, {});
};
const deserializeAws_restJson1QuotaSettings = (output, context) => {
    return {
        limit: (0, smithy_client_1.expectInt32)(output.limit),
        offset: (0, smithy_client_1.expectInt32)(output.offset),
        period: (0, smithy_client_1.expectString)(output.period),
    };
};
const deserializeAws_restJson1RequestValidator = (output, context) => {
    return {
        id: (0, smithy_client_1.expectString)(output.id),
        name: (0, smithy_client_1.expectString)(output.name),
        validateRequestBody: (0, smithy_client_1.expectBoolean)(output.validateRequestBody),
        validateRequestParameters: (0, smithy_client_1.expectBoolean)(output.validateRequestParameters),
    };
};
const deserializeAws_restJson1Resource = (output, context) => {
    return {
        id: (0, smithy_client_1.expectString)(output.id),
        parentId: (0, smithy_client_1.expectString)(output.parentId),
        path: (0, smithy_client_1.expectString)(output.path),
        pathPart: (0, smithy_client_1.expectString)(output.pathPart),
        resourceMethods: output.resourceMethods != null ? deserializeAws_restJson1MapOfMethod(output.resourceMethods, context) : undefined,
    };
};
const deserializeAws_restJson1RestApi = (output, context) => {
    return {
        apiKeySource: (0, smithy_client_1.expectString)(output.apiKeySource),
        binaryMediaTypes: output.binaryMediaTypes != null
            ? deserializeAws_restJson1ListOfString(output.binaryMediaTypes, context)
            : undefined,
        createdDate: output.createdDate != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdDate)))
            : undefined,
        description: (0, smithy_client_1.expectString)(output.description),
        disableExecuteApiEndpoint: (0, smithy_client_1.expectBoolean)(output.disableExecuteApiEndpoint),
        endpointConfiguration: output.endpointConfiguration != null
            ? deserializeAws_restJson1EndpointConfiguration(output.endpointConfiguration, context)
            : undefined,
        id: (0, smithy_client_1.expectString)(output.id),
        minimumCompressionSize: (0, smithy_client_1.expectInt32)(output.minimumCompressionSize),
        name: (0, smithy_client_1.expectString)(output.name),
        policy: (0, smithy_client_1.expectString)(output.policy),
        tags: output.tags != null ? deserializeAws_restJson1MapOfStringToString(output.tags, context) : undefined,
        version: (0, smithy_client_1.expectString)(output.version),
        warnings: output.warnings != null ? deserializeAws_restJson1ListOfString(output.warnings, context) : undefined,
    };
};
const deserializeAws_restJson1SdkConfigurationProperty = (output, context) => {
    return {
        defaultValue: (0, smithy_client_1.expectString)(output.defaultValue),
        description: (0, smithy_client_1.expectString)(output.description),
        friendlyName: (0, smithy_client_1.expectString)(output.friendlyName),
        name: (0, smithy_client_1.expectString)(output.name),
        required: (0, smithy_client_1.expectBoolean)(output.required),
    };
};
const deserializeAws_restJson1SdkType = (output, context) => {
    return {
        configurationProperties: output.configurationProperties != null
            ? deserializeAws_restJson1ListOfSdkConfigurationProperty(output.configurationProperties, context)
            : undefined,
        description: (0, smithy_client_1.expectString)(output.description),
        friendlyName: (0, smithy_client_1.expectString)(output.friendlyName),
        id: (0, smithy_client_1.expectString)(output.id),
    };
};
const deserializeAws_restJson1Stage = (output, context) => {
    return {
        accessLogSettings: output.accessLogSettings != null
            ? deserializeAws_restJson1AccessLogSettings(output.accessLogSettings, context)
            : undefined,
        cacheClusterEnabled: (0, smithy_client_1.expectBoolean)(output.cacheClusterEnabled),
        cacheClusterSize: (0, smithy_client_1.expectString)(output.cacheClusterSize),
        cacheClusterStatus: (0, smithy_client_1.expectString)(output.cacheClusterStatus),
        canarySettings: output.canarySettings != null
            ? deserializeAws_restJson1CanarySettings(output.canarySettings, context)
            : undefined,
        clientCertificateId: (0, smithy_client_1.expectString)(output.clientCertificateId),
        createdDate: output.createdDate != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.createdDate)))
            : undefined,
        deploymentId: (0, smithy_client_1.expectString)(output.deploymentId),
        description: (0, smithy_client_1.expectString)(output.description),
        documentationVersion: (0, smithy_client_1.expectString)(output.documentationVersion),
        lastUpdatedDate: output.lastUpdatedDate != null
            ? (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseEpochTimestamp)((0, smithy_client_1.expectNumber)(output.lastUpdatedDate)))
            : undefined,
        methodSettings: output.methodSettings != null
            ? deserializeAws_restJson1MapOfMethodSettings(output.methodSettings, context)
            : undefined,
        stageName: (0, smithy_client_1.expectString)(output.stageName),
        tags: output.tags != null ? deserializeAws_restJson1MapOfStringToString(output.tags, context) : undefined,
        tracingEnabled: (0, smithy_client_1.expectBoolean)(output.tracingEnabled),
        variables: output.variables != null ? deserializeAws_restJson1MapOfStringToString(output.variables, context) : undefined,
        webAclArn: (0, smithy_client_1.expectString)(output.webAclArn),
    };
};
const deserializeAws_restJson1ThrottleSettings = (output, context) => {
    return {
        burstLimit: (0, smithy_client_1.expectInt32)(output.burstLimit),
        rateLimit: (0, smithy_client_1.limitedParseDouble)(output.rateLimit),
    };
};
const deserializeAws_restJson1TlsConfig = (output, context) => {
    return {
        insecureSkipVerification: (0, smithy_client_1.expectBoolean)(output.insecureSkipVerification),
    };
};
const deserializeAws_restJson1UsagePlan = (output, context) => {
    return {
        apiStages: output.apiStages != null ? deserializeAws_restJson1ListOfApiStage(output.apiStages, context) : undefined,
        description: (0, smithy_client_1.expectString)(output.description),
        id: (0, smithy_client_1.expectString)(output.id),
        name: (0, smithy_client_1.expectString)(output.name),
        productCode: (0, smithy_client_1.expectString)(output.productCode),
        quota: output.quota != null ? deserializeAws_restJson1QuotaSettings(output.quota, context) : undefined,
        tags: output.tags != null ? deserializeAws_restJson1MapOfStringToString(output.tags, context) : undefined,
        throttle: output.throttle != null ? deserializeAws_restJson1ThrottleSettings(output.throttle, context) : undefined,
    };
};
const deserializeAws_restJson1UsagePlanKey = (output, context) => {
    return {
        id: (0, smithy_client_1.expectString)(output.id),
        name: (0, smithy_client_1.expectString)(output.name),
        type: (0, smithy_client_1.expectString)(output.type),
        value: (0, smithy_client_1.expectString)(output.value),
    };
};
const deserializeAws_restJson1VpcLink = (output, context) => {
    return {
        description: (0, smithy_client_1.expectString)(output.description),
        id: (0, smithy_client_1.expectString)(output.id),
        name: (0, smithy_client_1.expectString)(output.name),
        status: (0, smithy_client_1.expectString)(output.status),
        statusMessage: (0, smithy_client_1.expectString)(output.statusMessage),
        tags: output.tags != null ? deserializeAws_restJson1MapOfStringToString(output.tags, context) : undefined,
        targetArns: output.targetArns != null ? deserializeAws_restJson1ListOfString(output.targetArns, context) : undefined,
    };
};
const deserializeMetadata = (output) => {
    var _a;
    return ({
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"],
    });
};
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
